/* 
 * Moosend API
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Moosend.Wrappers.CSharpWrapper.Client.SwaggerDateConverter;

namespace Moosend.Wrappers.CSharpWrapper.Model
{
    /// <summary>
    /// Context118
    /// </summary>
    [DataContract]
    public partial class Context118 :  IEquatable<Context118>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Context118" /> class.
        /// </summary>
        /// <param name="ABVersion">.</param>
        /// <param name="CampaignDeliveredOn">.</param>
        /// <param name="CampaignID">.</param>
        /// <param name="CampaignIsArchived">.</param>
        /// <param name="CampaignName">.</param>
        /// <param name="CampaignSubject">.</param>
        /// <param name="From">.</param>
        /// <param name="MailingLists">.</param>
        /// <param name="Sent">.</param>
        /// <param name="To">.</param>
        /// <param name="TotalBounces">.</param>
        /// <param name="TotalComplaints">.</param>
        /// <param name="TotalForwards">.</param>
        /// <param name="TotalLinkClicks">.</param>
        /// <param name="TotalOpens">.</param>
        /// <param name="TotalUnsubscribes">.</param>
        /// <param name="UniqueForwards">.</param>
        /// <param name="UniqueLinkClicks">.</param>
        /// <param name="UniqueOpens">.</param>
        public Context118(string ABVersion = default(string), string CampaignDeliveredOn = default(string), string CampaignID = default(string), bool? CampaignIsArchived = default(bool?), string CampaignName = default(string), string CampaignSubject = default(string), string From = default(string), List<MailingLists119> MailingLists = default(List<MailingLists119>), double? Sent = default(double?), string To = default(string), double? TotalBounces = default(double?), double? TotalComplaints = default(double?), double? TotalForwards = default(double?), double? TotalLinkClicks = default(double?), double? TotalOpens = default(double?), double? TotalUnsubscribes = default(double?), double? UniqueForwards = default(double?), double? UniqueLinkClicks = default(double?), double? UniqueOpens = default(double?))
        {
            this.ABVersion = ABVersion;
            this.CampaignDeliveredOn = CampaignDeliveredOn;
            this.CampaignID = CampaignID;
            this.CampaignIsArchived = CampaignIsArchived;
            this.CampaignName = CampaignName;
            this.CampaignSubject = CampaignSubject;
            this.From = From;
            this.MailingLists = MailingLists;
            this.Sent = Sent;
            this.To = To;
            this.TotalBounces = TotalBounces;
            this.TotalComplaints = TotalComplaints;
            this.TotalForwards = TotalForwards;
            this.TotalLinkClicks = TotalLinkClicks;
            this.TotalOpens = TotalOpens;
            this.TotalUnsubscribes = TotalUnsubscribes;
            this.UniqueForwards = UniqueForwards;
            this.UniqueLinkClicks = UniqueLinkClicks;
            this.UniqueOpens = UniqueOpens;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ABVersion", EmitDefaultValue=false)]
        public string ABVersion { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="CampaignDeliveredOn", EmitDefaultValue=false)]
        public string CampaignDeliveredOn { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="CampaignID", EmitDefaultValue=false)]
        public string CampaignID { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="CampaignIsArchived", EmitDefaultValue=false)]
        public bool? CampaignIsArchived { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="CampaignName", EmitDefaultValue=false)]
        public string CampaignName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="CampaignSubject", EmitDefaultValue=false)]
        public string CampaignSubject { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="MailingLists", EmitDefaultValue=false)]
        public List<MailingLists119> MailingLists { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Sent", EmitDefaultValue=false)]
        public double? Sent { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalBounces", EmitDefaultValue=false)]
        public double? TotalBounces { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalComplaints", EmitDefaultValue=false)]
        public double? TotalComplaints { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalForwards", EmitDefaultValue=false)]
        public double? TotalForwards { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalLinkClicks", EmitDefaultValue=false)]
        public double? TotalLinkClicks { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalOpens", EmitDefaultValue=false)]
        public double? TotalOpens { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalUnsubscribes", EmitDefaultValue=false)]
        public double? TotalUnsubscribes { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="UniqueForwards", EmitDefaultValue=false)]
        public double? UniqueForwards { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="UniqueLinkClicks", EmitDefaultValue=false)]
        public double? UniqueLinkClicks { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="UniqueOpens", EmitDefaultValue=false)]
        public double? UniqueOpens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Context118 {\n");
            sb.Append("  ABVersion: ").Append(ABVersion).Append("\n");
            sb.Append("  CampaignDeliveredOn: ").Append(CampaignDeliveredOn).Append("\n");
            sb.Append("  CampaignID: ").Append(CampaignID).Append("\n");
            sb.Append("  CampaignIsArchived: ").Append(CampaignIsArchived).Append("\n");
            sb.Append("  CampaignName: ").Append(CampaignName).Append("\n");
            sb.Append("  CampaignSubject: ").Append(CampaignSubject).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  MailingLists: ").Append(MailingLists).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  TotalBounces: ").Append(TotalBounces).Append("\n");
            sb.Append("  TotalComplaints: ").Append(TotalComplaints).Append("\n");
            sb.Append("  TotalForwards: ").Append(TotalForwards).Append("\n");
            sb.Append("  TotalLinkClicks: ").Append(TotalLinkClicks).Append("\n");
            sb.Append("  TotalOpens: ").Append(TotalOpens).Append("\n");
            sb.Append("  TotalUnsubscribes: ").Append(TotalUnsubscribes).Append("\n");
            sb.Append("  UniqueForwards: ").Append(UniqueForwards).Append("\n");
            sb.Append("  UniqueLinkClicks: ").Append(UniqueLinkClicks).Append("\n");
            sb.Append("  UniqueOpens: ").Append(UniqueOpens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Context118);
        }

        /// <summary>
        /// Returns true if Context118 instances are equal
        /// </summary>
        /// <param name="other">Instance of Context118 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Context118 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ABVersion == other.ABVersion ||
                    this.ABVersion != null &&
                    this.ABVersion.Equals(other.ABVersion)
                ) && 
                (
                    this.CampaignDeliveredOn == other.CampaignDeliveredOn ||
                    this.CampaignDeliveredOn != null &&
                    this.CampaignDeliveredOn.Equals(other.CampaignDeliveredOn)
                ) && 
                (
                    this.CampaignID == other.CampaignID ||
                    this.CampaignID != null &&
                    this.CampaignID.Equals(other.CampaignID)
                ) && 
                (
                    this.CampaignIsArchived == other.CampaignIsArchived ||
                    this.CampaignIsArchived != null &&
                    this.CampaignIsArchived.Equals(other.CampaignIsArchived)
                ) && 
                (
                    this.CampaignName == other.CampaignName ||
                    this.CampaignName != null &&
                    this.CampaignName.Equals(other.CampaignName)
                ) && 
                (
                    this.CampaignSubject == other.CampaignSubject ||
                    this.CampaignSubject != null &&
                    this.CampaignSubject.Equals(other.CampaignSubject)
                ) && 
                (
                    this.From == other.From ||
                    this.From != null &&
                    this.From.Equals(other.From)
                ) && 
                (
                    this.MailingLists == other.MailingLists ||
                    this.MailingLists != null &&
                    this.MailingLists.SequenceEqual(other.MailingLists)
                ) && 
                (
                    this.Sent == other.Sent ||
                    this.Sent != null &&
                    this.Sent.Equals(other.Sent)
                ) && 
                (
                    this.To == other.To ||
                    this.To != null &&
                    this.To.Equals(other.To)
                ) && 
                (
                    this.TotalBounces == other.TotalBounces ||
                    this.TotalBounces != null &&
                    this.TotalBounces.Equals(other.TotalBounces)
                ) && 
                (
                    this.TotalComplaints == other.TotalComplaints ||
                    this.TotalComplaints != null &&
                    this.TotalComplaints.Equals(other.TotalComplaints)
                ) && 
                (
                    this.TotalForwards == other.TotalForwards ||
                    this.TotalForwards != null &&
                    this.TotalForwards.Equals(other.TotalForwards)
                ) && 
                (
                    this.TotalLinkClicks == other.TotalLinkClicks ||
                    this.TotalLinkClicks != null &&
                    this.TotalLinkClicks.Equals(other.TotalLinkClicks)
                ) && 
                (
                    this.TotalOpens == other.TotalOpens ||
                    this.TotalOpens != null &&
                    this.TotalOpens.Equals(other.TotalOpens)
                ) && 
                (
                    this.TotalUnsubscribes == other.TotalUnsubscribes ||
                    this.TotalUnsubscribes != null &&
                    this.TotalUnsubscribes.Equals(other.TotalUnsubscribes)
                ) && 
                (
                    this.UniqueForwards == other.UniqueForwards ||
                    this.UniqueForwards != null &&
                    this.UniqueForwards.Equals(other.UniqueForwards)
                ) && 
                (
                    this.UniqueLinkClicks == other.UniqueLinkClicks ||
                    this.UniqueLinkClicks != null &&
                    this.UniqueLinkClicks.Equals(other.UniqueLinkClicks)
                ) && 
                (
                    this.UniqueOpens == other.UniqueOpens ||
                    this.UniqueOpens != null &&
                    this.UniqueOpens.Equals(other.UniqueOpens)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ABVersion != null)
                    hash = hash * 59 + this.ABVersion.GetHashCode();
                if (this.CampaignDeliveredOn != null)
                    hash = hash * 59 + this.CampaignDeliveredOn.GetHashCode();
                if (this.CampaignID != null)
                    hash = hash * 59 + this.CampaignID.GetHashCode();
                if (this.CampaignIsArchived != null)
                    hash = hash * 59 + this.CampaignIsArchived.GetHashCode();
                if (this.CampaignName != null)
                    hash = hash * 59 + this.CampaignName.GetHashCode();
                if (this.CampaignSubject != null)
                    hash = hash * 59 + this.CampaignSubject.GetHashCode();
                if (this.From != null)
                    hash = hash * 59 + this.From.GetHashCode();
                if (this.MailingLists != null)
                    hash = hash * 59 + this.MailingLists.GetHashCode();
                if (this.Sent != null)
                    hash = hash * 59 + this.Sent.GetHashCode();
                if (this.To != null)
                    hash = hash * 59 + this.To.GetHashCode();
                if (this.TotalBounces != null)
                    hash = hash * 59 + this.TotalBounces.GetHashCode();
                if (this.TotalComplaints != null)
                    hash = hash * 59 + this.TotalComplaints.GetHashCode();
                if (this.TotalForwards != null)
                    hash = hash * 59 + this.TotalForwards.GetHashCode();
                if (this.TotalLinkClicks != null)
                    hash = hash * 59 + this.TotalLinkClicks.GetHashCode();
                if (this.TotalOpens != null)
                    hash = hash * 59 + this.TotalOpens.GetHashCode();
                if (this.TotalUnsubscribes != null)
                    hash = hash * 59 + this.TotalUnsubscribes.GetHashCode();
                if (this.UniqueForwards != null)
                    hash = hash * 59 + this.UniqueForwards.GetHashCode();
                if (this.UniqueLinkClicks != null)
                    hash = hash * 59 + this.UniqueLinkClicks.GetHashCode();
                if (this.UniqueOpens != null)
                    hash = hash * 59 + this.UniqueOpens.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
