/* 
 * Moosend API
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Moosend.Wrappers.CSharpWrapper.Client.SwaggerDateConverter;

namespace Moosend.Wrappers.CSharpWrapper.Model
{
    /// <summary>
    /// Analytic
    /// </summary>
    [DataContract]
    public partial class Analytic :  IEquatable<Analytic>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Analytic" /> class.
        /// </summary>
        /// <param name="Context">.</param>
        /// <param name="ContextDescription">.</param>
        /// <param name="ContextName">.</param>
        /// <param name="TotalCount">.</param>
        /// <param name="UniqueCount">.</param>
        public Analytic(string Context = default(string), string ContextDescription = default(string), string ContextName = default(string), double? TotalCount = default(double?), double? UniqueCount = default(double?))
        {
            this.Context = Context;
            this.ContextDescription = ContextDescription;
            this.ContextName = ContextName;
            this.TotalCount = TotalCount;
            this.UniqueCount = UniqueCount;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Context", EmitDefaultValue=false)]
        public string Context { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ContextDescription", EmitDefaultValue=false)]
        public string ContextDescription { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ContextName", EmitDefaultValue=false)]
        public string ContextName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalCount", EmitDefaultValue=false)]
        public double? TotalCount { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="UniqueCount", EmitDefaultValue=false)]
        public double? UniqueCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Analytic {\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  ContextDescription: ").Append(ContextDescription).Append("\n");
            sb.Append("  ContextName: ").Append(ContextName).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("  UniqueCount: ").Append(UniqueCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Analytic);
        }

        /// <summary>
        /// Returns true if Analytic instances are equal
        /// </summary>
        /// <param name="other">Instance of Analytic to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Analytic other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Context == other.Context ||
                    this.Context != null &&
                    this.Context.Equals(other.Context)
                ) && 
                (
                    this.ContextDescription == other.ContextDescription ||
                    this.ContextDescription != null &&
                    this.ContextDescription.Equals(other.ContextDescription)
                ) && 
                (
                    this.ContextName == other.ContextName ||
                    this.ContextName != null &&
                    this.ContextName.Equals(other.ContextName)
                ) && 
                (
                    this.TotalCount == other.TotalCount ||
                    this.TotalCount != null &&
                    this.TotalCount.Equals(other.TotalCount)
                ) && 
                (
                    this.UniqueCount == other.UniqueCount ||
                    this.UniqueCount != null &&
                    this.UniqueCount.Equals(other.UniqueCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Context != null)
                    hash = hash * 59 + this.Context.GetHashCode();
                if (this.ContextDescription != null)
                    hash = hash * 59 + this.ContextDescription.GetHashCode();
                if (this.ContextName != null)
                    hash = hash * 59 + this.ContextName.GetHashCode();
                if (this.TotalCount != null)
                    hash = hash * 59 + this.TotalCount.GetHashCode();
                if (this.UniqueCount != null)
                    hash = hash * 59 + this.UniqueCount.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
