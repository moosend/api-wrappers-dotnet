/* 
 * Moosend API
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Moosend.Wrappers.CSharpWrapper.Client.SwaggerDateConverter;

namespace Moosend.Wrappers.CSharpWrapper.Model
{
    /// <summary>
    /// Campaign
    /// </summary>
    [DataContract]
    public partial class Campaign :  IEquatable<Campaign>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Campaign" /> class.
        /// </summary>
        /// <param name="ABCampaignType">.</param>
        /// <param name="ABHoursToTest">.</param>
        /// <param name="ABWinner">.</param>
        /// <param name="ABWinnerSelectionType">.</param>
        /// <param name="ConfirmationTo">.</param>
        /// <param name="CreatedOn">.</param>
        /// <param name="DeliveredOn">.</param>
        /// <param name="ID">.</param>
        /// <param name="IsTransactional">.</param>
        /// <param name="MailingLists">.</param>
        /// <param name="Name">.</param>
        /// <param name="RecipientsCount">.</param>
        /// <param name="ScheduledFor">.</param>
        /// <param name="ScheduledForTimezone">.</param>
        /// <param name="SiteName">.</param>
        /// <param name="Status">.</param>
        /// <param name="Subject">.</param>
        /// <param name="TotalBounces">.</param>
        /// <param name="TotalComplaints">.</param>
        /// <param name="TotalForwards">.</param>
        /// <param name="TotalLinkClicks">.</param>
        /// <param name="TotalOpens">.</param>
        /// <param name="TotalSent">.</param>
        /// <param name="TotalUnsubscribes">.</param>
        /// <param name="UniqueForwards">.</param>
        /// <param name="UniqueLinkClicks">.</param>
        /// <param name="UniqueOpens">.</param>
        public Campaign(double? ABCampaignType = default(double?), double? ABHoursToTest = default(double?), double? ABWinner = default(double?), double? ABWinnerSelectionType = default(double?), string ConfirmationTo = default(string), string CreatedOn = default(string), string DeliveredOn = default(string), string ID = default(string), bool? IsTransactional = default(bool?), List<MailingList68> MailingLists = default(List<MailingList68>), string Name = default(string), double? RecipientsCount = default(double?), string ScheduledFor = default(string), string ScheduledForTimezone = default(string), string SiteName = default(string), double? Status = default(double?), string Subject = default(string), double? TotalBounces = default(double?), double? TotalComplaints = default(double?), double? TotalForwards = default(double?), double? TotalLinkClicks = default(double?), double? TotalOpens = default(double?), double? TotalSent = default(double?), double? TotalUnsubscribes = default(double?), double? UniqueForwards = default(double?), double? UniqueLinkClicks = default(double?), double? UniqueOpens = default(double?))
        {
            this.ABCampaignType = ABCampaignType;
            this.ABHoursToTest = ABHoursToTest;
            this.ABWinner = ABWinner;
            this.ABWinnerSelectionType = ABWinnerSelectionType;
            this.ConfirmationTo = ConfirmationTo;
            this.CreatedOn = CreatedOn;
            this.DeliveredOn = DeliveredOn;
            this.ID = ID;
            this.IsTransactional = IsTransactional;
            this.MailingLists = MailingLists;
            this.Name = Name;
            this.RecipientsCount = RecipientsCount;
            this.ScheduledFor = ScheduledFor;
            this.ScheduledForTimezone = ScheduledForTimezone;
            this.SiteName = SiteName;
            this.Status = Status;
            this.Subject = Subject;
            this.TotalBounces = TotalBounces;
            this.TotalComplaints = TotalComplaints;
            this.TotalForwards = TotalForwards;
            this.TotalLinkClicks = TotalLinkClicks;
            this.TotalOpens = TotalOpens;
            this.TotalSent = TotalSent;
            this.TotalUnsubscribes = TotalUnsubscribes;
            this.UniqueForwards = UniqueForwards;
            this.UniqueLinkClicks = UniqueLinkClicks;
            this.UniqueOpens = UniqueOpens;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ABCampaignType", EmitDefaultValue=false)]
        public double? ABCampaignType { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ABHoursToTest", EmitDefaultValue=false)]
        public double? ABHoursToTest { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ABWinner", EmitDefaultValue=false)]
        public double? ABWinner { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ABWinnerSelectionType", EmitDefaultValue=false)]
        public double? ABWinnerSelectionType { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ConfirmationTo", EmitDefaultValue=false)]
        public string ConfirmationTo { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="CreatedOn", EmitDefaultValue=false)]
        public string CreatedOn { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="DeliveredOn", EmitDefaultValue=false)]
        public string DeliveredOn { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="IsTransactional", EmitDefaultValue=false)]
        public bool? IsTransactional { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="MailingLists", EmitDefaultValue=false)]
        public List<MailingList68> MailingLists { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="RecipientsCount", EmitDefaultValue=false)]
        public double? RecipientsCount { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ScheduledFor", EmitDefaultValue=false)]
        public string ScheduledFor { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ScheduledForTimezone", EmitDefaultValue=false)]
        public string ScheduledForTimezone { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="SiteName", EmitDefaultValue=false)]
        public string SiteName { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public double? Status { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalBounces", EmitDefaultValue=false)]
        public double? TotalBounces { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalComplaints", EmitDefaultValue=false)]
        public double? TotalComplaints { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalForwards", EmitDefaultValue=false)]
        public double? TotalForwards { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalLinkClicks", EmitDefaultValue=false)]
        public double? TotalLinkClicks { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalOpens", EmitDefaultValue=false)]
        public double? TotalOpens { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalSent", EmitDefaultValue=false)]
        public double? TotalSent { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalUnsubscribes", EmitDefaultValue=false)]
        public double? TotalUnsubscribes { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="UniqueForwards", EmitDefaultValue=false)]
        public double? UniqueForwards { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="UniqueLinkClicks", EmitDefaultValue=false)]
        public double? UniqueLinkClicks { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="UniqueOpens", EmitDefaultValue=false)]
        public double? UniqueOpens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Campaign {\n");
            sb.Append("  ABCampaignType: ").Append(ABCampaignType).Append("\n");
            sb.Append("  ABHoursToTest: ").Append(ABHoursToTest).Append("\n");
            sb.Append("  ABWinner: ").Append(ABWinner).Append("\n");
            sb.Append("  ABWinnerSelectionType: ").Append(ABWinnerSelectionType).Append("\n");
            sb.Append("  ConfirmationTo: ").Append(ConfirmationTo).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  DeliveredOn: ").Append(DeliveredOn).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  IsTransactional: ").Append(IsTransactional).Append("\n");
            sb.Append("  MailingLists: ").Append(MailingLists).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RecipientsCount: ").Append(RecipientsCount).Append("\n");
            sb.Append("  ScheduledFor: ").Append(ScheduledFor).Append("\n");
            sb.Append("  ScheduledForTimezone: ").Append(ScheduledForTimezone).Append("\n");
            sb.Append("  SiteName: ").Append(SiteName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TotalBounces: ").Append(TotalBounces).Append("\n");
            sb.Append("  TotalComplaints: ").Append(TotalComplaints).Append("\n");
            sb.Append("  TotalForwards: ").Append(TotalForwards).Append("\n");
            sb.Append("  TotalLinkClicks: ").Append(TotalLinkClicks).Append("\n");
            sb.Append("  TotalOpens: ").Append(TotalOpens).Append("\n");
            sb.Append("  TotalSent: ").Append(TotalSent).Append("\n");
            sb.Append("  TotalUnsubscribes: ").Append(TotalUnsubscribes).Append("\n");
            sb.Append("  UniqueForwards: ").Append(UniqueForwards).Append("\n");
            sb.Append("  UniqueLinkClicks: ").Append(UniqueLinkClicks).Append("\n");
            sb.Append("  UniqueOpens: ").Append(UniqueOpens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Campaign);
        }

        /// <summary>
        /// Returns true if Campaign instances are equal
        /// </summary>
        /// <param name="other">Instance of Campaign to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Campaign other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ABCampaignType == other.ABCampaignType ||
                    this.ABCampaignType != null &&
                    this.ABCampaignType.Equals(other.ABCampaignType)
                ) && 
                (
                    this.ABHoursToTest == other.ABHoursToTest ||
                    this.ABHoursToTest != null &&
                    this.ABHoursToTest.Equals(other.ABHoursToTest)
                ) && 
                (
                    this.ABWinner == other.ABWinner ||
                    this.ABWinner != null &&
                    this.ABWinner.Equals(other.ABWinner)
                ) && 
                (
                    this.ABWinnerSelectionType == other.ABWinnerSelectionType ||
                    this.ABWinnerSelectionType != null &&
                    this.ABWinnerSelectionType.Equals(other.ABWinnerSelectionType)
                ) && 
                (
                    this.ConfirmationTo == other.ConfirmationTo ||
                    this.ConfirmationTo != null &&
                    this.ConfirmationTo.Equals(other.ConfirmationTo)
                ) && 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    this.DeliveredOn == other.DeliveredOn ||
                    this.DeliveredOn != null &&
                    this.DeliveredOn.Equals(other.DeliveredOn)
                ) && 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.IsTransactional == other.IsTransactional ||
                    this.IsTransactional != null &&
                    this.IsTransactional.Equals(other.IsTransactional)
                ) && 
                (
                    this.MailingLists == other.MailingLists ||
                    this.MailingLists != null &&
                    this.MailingLists.SequenceEqual(other.MailingLists)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.RecipientsCount == other.RecipientsCount ||
                    this.RecipientsCount != null &&
                    this.RecipientsCount.Equals(other.RecipientsCount)
                ) && 
                (
                    this.ScheduledFor == other.ScheduledFor ||
                    this.ScheduledFor != null &&
                    this.ScheduledFor.Equals(other.ScheduledFor)
                ) && 
                (
                    this.ScheduledForTimezone == other.ScheduledForTimezone ||
                    this.ScheduledForTimezone != null &&
                    this.ScheduledForTimezone.Equals(other.ScheduledForTimezone)
                ) && 
                (
                    this.SiteName == other.SiteName ||
                    this.SiteName != null &&
                    this.SiteName.Equals(other.SiteName)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Subject == other.Subject ||
                    this.Subject != null &&
                    this.Subject.Equals(other.Subject)
                ) && 
                (
                    this.TotalBounces == other.TotalBounces ||
                    this.TotalBounces != null &&
                    this.TotalBounces.Equals(other.TotalBounces)
                ) && 
                (
                    this.TotalComplaints == other.TotalComplaints ||
                    this.TotalComplaints != null &&
                    this.TotalComplaints.Equals(other.TotalComplaints)
                ) && 
                (
                    this.TotalForwards == other.TotalForwards ||
                    this.TotalForwards != null &&
                    this.TotalForwards.Equals(other.TotalForwards)
                ) && 
                (
                    this.TotalLinkClicks == other.TotalLinkClicks ||
                    this.TotalLinkClicks != null &&
                    this.TotalLinkClicks.Equals(other.TotalLinkClicks)
                ) && 
                (
                    this.TotalOpens == other.TotalOpens ||
                    this.TotalOpens != null &&
                    this.TotalOpens.Equals(other.TotalOpens)
                ) && 
                (
                    this.TotalSent == other.TotalSent ||
                    this.TotalSent != null &&
                    this.TotalSent.Equals(other.TotalSent)
                ) && 
                (
                    this.TotalUnsubscribes == other.TotalUnsubscribes ||
                    this.TotalUnsubscribes != null &&
                    this.TotalUnsubscribes.Equals(other.TotalUnsubscribes)
                ) && 
                (
                    this.UniqueForwards == other.UniqueForwards ||
                    this.UniqueForwards != null &&
                    this.UniqueForwards.Equals(other.UniqueForwards)
                ) && 
                (
                    this.UniqueLinkClicks == other.UniqueLinkClicks ||
                    this.UniqueLinkClicks != null &&
                    this.UniqueLinkClicks.Equals(other.UniqueLinkClicks)
                ) && 
                (
                    this.UniqueOpens == other.UniqueOpens ||
                    this.UniqueOpens != null &&
                    this.UniqueOpens.Equals(other.UniqueOpens)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ABCampaignType != null)
                    hash = hash * 59 + this.ABCampaignType.GetHashCode();
                if (this.ABHoursToTest != null)
                    hash = hash * 59 + this.ABHoursToTest.GetHashCode();
                if (this.ABWinner != null)
                    hash = hash * 59 + this.ABWinner.GetHashCode();
                if (this.ABWinnerSelectionType != null)
                    hash = hash * 59 + this.ABWinnerSelectionType.GetHashCode();
                if (this.ConfirmationTo != null)
                    hash = hash * 59 + this.ConfirmationTo.GetHashCode();
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                if (this.DeliveredOn != null)
                    hash = hash * 59 + this.DeliveredOn.GetHashCode();
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                if (this.IsTransactional != null)
                    hash = hash * 59 + this.IsTransactional.GetHashCode();
                if (this.MailingLists != null)
                    hash = hash * 59 + this.MailingLists.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.RecipientsCount != null)
                    hash = hash * 59 + this.RecipientsCount.GetHashCode();
                if (this.ScheduledFor != null)
                    hash = hash * 59 + this.ScheduledFor.GetHashCode();
                if (this.ScheduledForTimezone != null)
                    hash = hash * 59 + this.ScheduledForTimezone.GetHashCode();
                if (this.SiteName != null)
                    hash = hash * 59 + this.SiteName.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Subject != null)
                    hash = hash * 59 + this.Subject.GetHashCode();
                if (this.TotalBounces != null)
                    hash = hash * 59 + this.TotalBounces.GetHashCode();
                if (this.TotalComplaints != null)
                    hash = hash * 59 + this.TotalComplaints.GetHashCode();
                if (this.TotalForwards != null)
                    hash = hash * 59 + this.TotalForwards.GetHashCode();
                if (this.TotalLinkClicks != null)
                    hash = hash * 59 + this.TotalLinkClicks.GetHashCode();
                if (this.TotalOpens != null)
                    hash = hash * 59 + this.TotalOpens.GetHashCode();
                if (this.TotalSent != null)
                    hash = hash * 59 + this.TotalSent.GetHashCode();
                if (this.TotalUnsubscribes != null)
                    hash = hash * 59 + this.TotalUnsubscribes.GetHashCode();
                if (this.UniqueForwards != null)
                    hash = hash * 59 + this.UniqueForwards.GetHashCode();
                if (this.UniqueLinkClicks != null)
                    hash = hash * 59 + this.UniqueLinkClicks.GetHashCode();
                if (this.UniqueOpens != null)
                    hash = hash * 59 + this.UniqueOpens.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
