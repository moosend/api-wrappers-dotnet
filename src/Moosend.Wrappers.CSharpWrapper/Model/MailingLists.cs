/* 
 * Moosend API
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Moosend.Wrappers.CSharpWrapper.Client.SwaggerDateConverter;

namespace Moosend.Wrappers.CSharpWrapper.Model
{
    /// <summary>
    /// MailingLists
    /// </summary>
    [DataContract]
    public partial class MailingLists :  IEquatable<MailingLists>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MailingLists" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MailingLists() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MailingLists" /> class.
        /// </summary>
        /// <param name="MailingListId">A Mailing list id (required).</param>
        /// <param name="SegmentId">Possible values : (whatever, random, fuck).</param>
        public MailingLists(string MailingListId = default(string), double? SegmentId = default(double?))
        {
            // to ensure "MailingListId" is required (not null)
            if (MailingListId == null)
            {
                throw new InvalidDataException("MailingListId is a required property for MailingLists and cannot be null");
            }
            else
            {
                this.MailingListId = MailingListId;
            }
            this.SegmentId = SegmentId;
        }
        
        /// <summary>
        /// A Mailing list id
        /// </summary>
        /// <value>A Mailing list id</value>
        [DataMember(Name="MailingListId", EmitDefaultValue=false)]
        public string MailingListId { get; set; }

        /// <summary>
        /// Possible values : (whatever, random, fuck)
        /// </summary>
        /// <value>Possible values : (whatever, random, fuck)</value>
        [DataMember(Name="SegmentId", EmitDefaultValue=false)]
        public double? SegmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MailingLists {\n");
            sb.Append("  MailingListId: ").Append(MailingListId).Append("\n");
            sb.Append("  SegmentId: ").Append(SegmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MailingLists);
        }

        /// <summary>
        /// Returns true if MailingLists instances are equal
        /// </summary>
        /// <param name="other">Instance of MailingLists to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MailingLists other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MailingListId == other.MailingListId ||
                    this.MailingListId != null &&
                    this.MailingListId.Equals(other.MailingListId)
                ) && 
                (
                    this.SegmentId == other.SegmentId ||
                    this.SegmentId != null &&
                    this.SegmentId.Equals(other.SegmentId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MailingListId != null)
                    hash = hash * 59 + this.MailingListId.GetHashCode();
                if (this.SegmentId != null)
                    hash = hash * 59 + this.SegmentId.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
