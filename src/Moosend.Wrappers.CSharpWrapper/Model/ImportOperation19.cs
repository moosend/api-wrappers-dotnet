/* 
 * Moosend API
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Moosend.Wrappers.CSharpWrapper.Client.SwaggerDateConverter;

namespace Moosend.Wrappers.CSharpWrapper.Model
{
    /// <summary>
    /// ImportOperation19
    /// </summary>
    [DataContract]
    public partial class ImportOperation19 :  IEquatable<ImportOperation19>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportOperation19" /> class.
        /// </summary>
        /// <param name="CompletedOn">.</param>
        /// <param name="CreatedOn">.</param>
        /// <param name="DataHash">.</param>
        /// <param name="EmailNotify">.</param>
        /// <param name="ID">.</param>
        /// <param name="Mappings">.</param>
        /// <param name="Message">.</param>
        /// <param name="SkipNewMembers">.</param>
        /// <param name="StartedOn">.</param>
        /// <param name="Success">.</param>
        /// <param name="TotalDuplicate">.</param>
        /// <param name="TotalIgnored">.</param>
        /// <param name="TotalInserted">.</param>
        /// <param name="TotalInvalid">.</param>
        /// <param name="TotalMembers">.</param>
        /// <param name="TotalUnsubscribed">.</param>
        /// <param name="TotalUpdated">.</param>
        public ImportOperation19(string CompletedOn = default(string), string CreatedOn = default(string), string DataHash = default(string), string EmailNotify = default(string), double? ID = default(double?), string Mappings = default(string), string Message = default(string), bool? SkipNewMembers = default(bool?), string StartedOn = default(string), bool? Success = default(bool?), double? TotalDuplicate = default(double?), double? TotalIgnored = default(double?), double? TotalInserted = default(double?), double? TotalInvalid = default(double?), double? TotalMembers = default(double?), double? TotalUnsubscribed = default(double?), double? TotalUpdated = default(double?))
        {
            this.CompletedOn = CompletedOn;
            this.CreatedOn = CreatedOn;
            this.DataHash = DataHash;
            this.EmailNotify = EmailNotify;
            this.ID = ID;
            this.Mappings = Mappings;
            this.Message = Message;
            this.SkipNewMembers = SkipNewMembers;
            this.StartedOn = StartedOn;
            this.Success = Success;
            this.TotalDuplicate = TotalDuplicate;
            this.TotalIgnored = TotalIgnored;
            this.TotalInserted = TotalInserted;
            this.TotalInvalid = TotalInvalid;
            this.TotalMembers = TotalMembers;
            this.TotalUnsubscribed = TotalUnsubscribed;
            this.TotalUpdated = TotalUpdated;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="CompletedOn", EmitDefaultValue=false)]
        public string CompletedOn { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="CreatedOn", EmitDefaultValue=false)]
        public string CreatedOn { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="DataHash", EmitDefaultValue=false)]
        public string DataHash { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="EmailNotify", EmitDefaultValue=false)]
        public string EmailNotify { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public double? ID { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Mappings", EmitDefaultValue=false)]
        public string Mappings { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="SkipNewMembers", EmitDefaultValue=false)]
        public bool? SkipNewMembers { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="StartedOn", EmitDefaultValue=false)]
        public string StartedOn { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Success", EmitDefaultValue=false)]
        public bool? Success { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalDuplicate", EmitDefaultValue=false)]
        public double? TotalDuplicate { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalIgnored", EmitDefaultValue=false)]
        public double? TotalIgnored { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalInserted", EmitDefaultValue=false)]
        public double? TotalInserted { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalInvalid", EmitDefaultValue=false)]
        public double? TotalInvalid { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalMembers", EmitDefaultValue=false)]
        public double? TotalMembers { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalUnsubscribed", EmitDefaultValue=false)]
        public double? TotalUnsubscribed { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="TotalUpdated", EmitDefaultValue=false)]
        public double? TotalUpdated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImportOperation19 {\n");
            sb.Append("  CompletedOn: ").Append(CompletedOn).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  DataHash: ").Append(DataHash).Append("\n");
            sb.Append("  EmailNotify: ").Append(EmailNotify).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Mappings: ").Append(Mappings).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  SkipNewMembers: ").Append(SkipNewMembers).Append("\n");
            sb.Append("  StartedOn: ").Append(StartedOn).Append("\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  TotalDuplicate: ").Append(TotalDuplicate).Append("\n");
            sb.Append("  TotalIgnored: ").Append(TotalIgnored).Append("\n");
            sb.Append("  TotalInserted: ").Append(TotalInserted).Append("\n");
            sb.Append("  TotalInvalid: ").Append(TotalInvalid).Append("\n");
            sb.Append("  TotalMembers: ").Append(TotalMembers).Append("\n");
            sb.Append("  TotalUnsubscribed: ").Append(TotalUnsubscribed).Append("\n");
            sb.Append("  TotalUpdated: ").Append(TotalUpdated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ImportOperation19);
        }

        /// <summary>
        /// Returns true if ImportOperation19 instances are equal
        /// </summary>
        /// <param name="other">Instance of ImportOperation19 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImportOperation19 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CompletedOn == other.CompletedOn ||
                    this.CompletedOn != null &&
                    this.CompletedOn.Equals(other.CompletedOn)
                ) && 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    this.DataHash == other.DataHash ||
                    this.DataHash != null &&
                    this.DataHash.Equals(other.DataHash)
                ) && 
                (
                    this.EmailNotify == other.EmailNotify ||
                    this.EmailNotify != null &&
                    this.EmailNotify.Equals(other.EmailNotify)
                ) && 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.Mappings == other.Mappings ||
                    this.Mappings != null &&
                    this.Mappings.Equals(other.Mappings)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.SkipNewMembers == other.SkipNewMembers ||
                    this.SkipNewMembers != null &&
                    this.SkipNewMembers.Equals(other.SkipNewMembers)
                ) && 
                (
                    this.StartedOn == other.StartedOn ||
                    this.StartedOn != null &&
                    this.StartedOn.Equals(other.StartedOn)
                ) && 
                (
                    this.Success == other.Success ||
                    this.Success != null &&
                    this.Success.Equals(other.Success)
                ) && 
                (
                    this.TotalDuplicate == other.TotalDuplicate ||
                    this.TotalDuplicate != null &&
                    this.TotalDuplicate.Equals(other.TotalDuplicate)
                ) && 
                (
                    this.TotalIgnored == other.TotalIgnored ||
                    this.TotalIgnored != null &&
                    this.TotalIgnored.Equals(other.TotalIgnored)
                ) && 
                (
                    this.TotalInserted == other.TotalInserted ||
                    this.TotalInserted != null &&
                    this.TotalInserted.Equals(other.TotalInserted)
                ) && 
                (
                    this.TotalInvalid == other.TotalInvalid ||
                    this.TotalInvalid != null &&
                    this.TotalInvalid.Equals(other.TotalInvalid)
                ) && 
                (
                    this.TotalMembers == other.TotalMembers ||
                    this.TotalMembers != null &&
                    this.TotalMembers.Equals(other.TotalMembers)
                ) && 
                (
                    this.TotalUnsubscribed == other.TotalUnsubscribed ||
                    this.TotalUnsubscribed != null &&
                    this.TotalUnsubscribed.Equals(other.TotalUnsubscribed)
                ) && 
                (
                    this.TotalUpdated == other.TotalUpdated ||
                    this.TotalUpdated != null &&
                    this.TotalUpdated.Equals(other.TotalUpdated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CompletedOn != null)
                    hash = hash * 59 + this.CompletedOn.GetHashCode();
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                if (this.DataHash != null)
                    hash = hash * 59 + this.DataHash.GetHashCode();
                if (this.EmailNotify != null)
                    hash = hash * 59 + this.EmailNotify.GetHashCode();
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                if (this.Mappings != null)
                    hash = hash * 59 + this.Mappings.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.SkipNewMembers != null)
                    hash = hash * 59 + this.SkipNewMembers.GetHashCode();
                if (this.StartedOn != null)
                    hash = hash * 59 + this.StartedOn.GetHashCode();
                if (this.Success != null)
                    hash = hash * 59 + this.Success.GetHashCode();
                if (this.TotalDuplicate != null)
                    hash = hash * 59 + this.TotalDuplicate.GetHashCode();
                if (this.TotalIgnored != null)
                    hash = hash * 59 + this.TotalIgnored.GetHashCode();
                if (this.TotalInserted != null)
                    hash = hash * 59 + this.TotalInserted.GetHashCode();
                if (this.TotalInvalid != null)
                    hash = hash * 59 + this.TotalInvalid.GetHashCode();
                if (this.TotalMembers != null)
                    hash = hash * 59 + this.TotalMembers.GetHashCode();
                if (this.TotalUnsubscribed != null)
                    hash = hash * 59 + this.TotalUnsubscribed.GetHashCode();
                if (this.TotalUpdated != null)
                    hash = hash * 59 + this.TotalUpdated.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
