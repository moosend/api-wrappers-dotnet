/* 
 * Moosend API
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Moosend.Wrappers.CSharpWrapper.Client.SwaggerDateConverter;

namespace Moosend.Wrappers.CSharpWrapper.Model
{
    /// <summary>
    /// Context37
    /// </summary>
    [DataContract]
    public partial class Context37 :  IEquatable<Context37>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Context37" /> class.
        /// </summary>
        /// <param name="CreatedOn">.</param>
        /// <param name="CustomFields">.</param>
        /// <param name="Email">.</param>
        /// <param name="ID">.</param>
        /// <param name="Name">.</param>
        /// <param name="RemovedOn">.</param>
        /// <param name="SubscribeMethod">.</param>
        /// <param name="SubscribeType">.</param>
        /// <param name="UnsubscribedFromID">.</param>
        /// <param name="UnsubscribedOn">.</param>
        /// <param name="UpdatedOn">.</param>
        public Context37(string CreatedOn = default(string), List<CustomField> CustomFields = default(List<CustomField>), string Email = default(string), string ID = default(string), string Name = default(string), string RemovedOn = default(string), double? SubscribeMethod = default(double?), double? SubscribeType = default(double?), string UnsubscribedFromID = default(string), string UnsubscribedOn = default(string), string UpdatedOn = default(string))
        {
            this.CreatedOn = CreatedOn;
            this.CustomFields = CustomFields;
            this.Email = Email;
            this.ID = ID;
            this.Name = Name;
            this.RemovedOn = RemovedOn;
            this.SubscribeMethod = SubscribeMethod;
            this.SubscribeType = SubscribeType;
            this.UnsubscribedFromID = UnsubscribedFromID;
            this.UnsubscribedOn = UnsubscribedOn;
            this.UpdatedOn = UpdatedOn;
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="CreatedOn", EmitDefaultValue=false)]
        public string CreatedOn { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="CustomFields", EmitDefaultValue=false)]
        public List<CustomField> CustomFields { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="ID", EmitDefaultValue=false)]
        public string ID { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="RemovedOn", EmitDefaultValue=false)]
        public string RemovedOn { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="SubscribeMethod", EmitDefaultValue=false)]
        public double? SubscribeMethod { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="SubscribeType", EmitDefaultValue=false)]
        public double? SubscribeType { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="UnsubscribedFromID", EmitDefaultValue=false)]
        public string UnsubscribedFromID { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="UnsubscribedOn", EmitDefaultValue=false)]
        public string UnsubscribedOn { get; set; }

        /// <summary>
        /// 
        /// </summary>
        /// <value></value>
        [DataMember(Name="UpdatedOn", EmitDefaultValue=false)]
        public string UpdatedOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Context37 {\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ID: ").Append(ID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RemovedOn: ").Append(RemovedOn).Append("\n");
            sb.Append("  SubscribeMethod: ").Append(SubscribeMethod).Append("\n");
            sb.Append("  SubscribeType: ").Append(SubscribeType).Append("\n");
            sb.Append("  UnsubscribedFromID: ").Append(UnsubscribedFromID).Append("\n");
            sb.Append("  UnsubscribedOn: ").Append(UnsubscribedOn).Append("\n");
            sb.Append("  UpdatedOn: ").Append(UpdatedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Context37);
        }

        /// <summary>
        /// Returns true if Context37 instances are equal
        /// </summary>
        /// <param name="other">Instance of Context37 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Context37 other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                ) && 
                (
                    this.CustomFields == other.CustomFields ||
                    this.CustomFields != null &&
                    this.CustomFields.SequenceEqual(other.CustomFields)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.ID == other.ID ||
                    this.ID != null &&
                    this.ID.Equals(other.ID)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.RemovedOn == other.RemovedOn ||
                    this.RemovedOn != null &&
                    this.RemovedOn.Equals(other.RemovedOn)
                ) && 
                (
                    this.SubscribeMethod == other.SubscribeMethod ||
                    this.SubscribeMethod != null &&
                    this.SubscribeMethod.Equals(other.SubscribeMethod)
                ) && 
                (
                    this.SubscribeType == other.SubscribeType ||
                    this.SubscribeType != null &&
                    this.SubscribeType.Equals(other.SubscribeType)
                ) && 
                (
                    this.UnsubscribedFromID == other.UnsubscribedFromID ||
                    this.UnsubscribedFromID != null &&
                    this.UnsubscribedFromID.Equals(other.UnsubscribedFromID)
                ) && 
                (
                    this.UnsubscribedOn == other.UnsubscribedOn ||
                    this.UnsubscribedOn != null &&
                    this.UnsubscribedOn.Equals(other.UnsubscribedOn)
                ) && 
                (
                    this.UpdatedOn == other.UpdatedOn ||
                    this.UpdatedOn != null &&
                    this.UpdatedOn.Equals(other.UpdatedOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                if (this.CustomFields != null)
                    hash = hash * 59 + this.CustomFields.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.ID != null)
                    hash = hash * 59 + this.ID.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.RemovedOn != null)
                    hash = hash * 59 + this.RemovedOn.GetHashCode();
                if (this.SubscribeMethod != null)
                    hash = hash * 59 + this.SubscribeMethod.GetHashCode();
                if (this.SubscribeType != null)
                    hash = hash * 59 + this.SubscribeType.GetHashCode();
                if (this.UnsubscribedFromID != null)
                    hash = hash * 59 + this.UnsubscribedFromID.GetHashCode();
                if (this.UnsubscribedOn != null)
                    hash = hash * 59 + this.UnsubscribedOn.GetHashCode();
                if (this.UpdatedOn != null)
                    hash = hash * 59 + this.UpdatedOn.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
