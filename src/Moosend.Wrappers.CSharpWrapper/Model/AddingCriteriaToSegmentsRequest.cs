/* 
 * Moosend API
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Moosend.Wrappers.CSharpWrapper.Client.SwaggerDateConverter;

namespace Moosend.Wrappers.CSharpWrapper.Model
{
    /// <summary>
    /// AddingCriteriaToSegmentsRequest
    /// </summary>
    [DataContract]
    public partial class AddingCriteriaToSegmentsRequest :  IEquatable<AddingCriteriaToSegmentsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddingCriteriaToSegmentsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AddingCriteriaToSegmentsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AddingCriteriaToSegmentsRequest" /> class.
        /// </summary>
        /// <param name="Field">The field of the criterion to filter the mailing list by. This must be one of the following values. (required).</param>
        /// <param name="Value">A search term to filter the specified field by. (required).</param>
        /// <param name="Comparer">An operator that defines the way to compare a criterion field with its value. This must be one of the following values. If not specified, &#x60;Is&#x60; will be assumed..</param>
        /// <param name="DateFrom">Provides an additional filter option to be combined with the following fields..</param>
        /// <param name="DateTo">Provides an additional filter option to be combined with the following fields..</param>
        public AddingCriteriaToSegmentsRequest(string Field = default(string), string Value = default(string), string Comparer = default(string), string DateFrom = default(string), string DateTo = default(string))
        {
            // to ensure "Field" is required (not null)
            if (Field == null)
            {
                throw new InvalidDataException("Field is a required property for AddingCriteriaToSegmentsRequest and cannot be null");
            }
            else
            {
                this.Field = Field;
            }
            // to ensure "Value" is required (not null)
            if (Value == null)
            {
                throw new InvalidDataException("Value is a required property for AddingCriteriaToSegmentsRequest and cannot be null");
            }
            else
            {
                this.Value = Value;
            }
            this.Comparer = Comparer;
            this.DateFrom = DateFrom;
            this.DateTo = DateTo;
        }
        
        /// <summary>
        /// The field of the criterion to filter the mailing list by. This must be one of the following values.
        /// </summary>
        /// <value>The field of the criterion to filter the mailing list by. This must be one of the following values.</value>
        [DataMember(Name="Field", EmitDefaultValue=false)]
        public string Field { get; set; }

        /// <summary>
        /// A search term to filter the specified field by.
        /// </summary>
        /// <value>A search term to filter the specified field by.</value>
        [DataMember(Name="Value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// An operator that defines the way to compare a criterion field with its value. This must be one of the following values. If not specified, &#x60;Is&#x60; will be assumed.
        /// </summary>
        /// <value>An operator that defines the way to compare a criterion field with its value. This must be one of the following values. If not specified, &#x60;Is&#x60; will be assumed.</value>
        [DataMember(Name="Comparer", EmitDefaultValue=false)]
        public string Comparer { get; set; }

        /// <summary>
        /// Provides an additional filter option to be combined with the following fields.
        /// </summary>
        /// <value>Provides an additional filter option to be combined with the following fields.</value>
        [DataMember(Name="DateFrom", EmitDefaultValue=false)]
        public string DateFrom { get; set; }

        /// <summary>
        /// Provides an additional filter option to be combined with the following fields.
        /// </summary>
        /// <value>Provides an additional filter option to be combined with the following fields.</value>
        [DataMember(Name="DateTo", EmitDefaultValue=false)]
        public string DateTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddingCriteriaToSegmentsRequest {\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Comparer: ").Append(Comparer).Append("\n");
            sb.Append("  DateFrom: ").Append(DateFrom).Append("\n");
            sb.Append("  DateTo: ").Append(DateTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AddingCriteriaToSegmentsRequest);
        }

        /// <summary>
        /// Returns true if AddingCriteriaToSegmentsRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of AddingCriteriaToSegmentsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddingCriteriaToSegmentsRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Field == other.Field ||
                    this.Field != null &&
                    this.Field.Equals(other.Field)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                ) && 
                (
                    this.Comparer == other.Comparer ||
                    this.Comparer != null &&
                    this.Comparer.Equals(other.Comparer)
                ) && 
                (
                    this.DateFrom == other.DateFrom ||
                    this.DateFrom != null &&
                    this.DateFrom.Equals(other.DateFrom)
                ) && 
                (
                    this.DateTo == other.DateTo ||
                    this.DateTo != null &&
                    this.DateTo.Equals(other.DateTo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Field != null)
                    hash = hash * 59 + this.Field.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                if (this.Comparer != null)
                    hash = hash * 59 + this.Comparer.GetHashCode();
                if (this.DateFrom != null)
                    hash = hash * 59 + this.DateFrom.GetHashCode();
                if (this.DateTo != null)
                    hash = hash * 59 + this.DateTo.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
