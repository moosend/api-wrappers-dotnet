/* 
 * Moosend API
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Moosend.Wrappers.CSharpWrapper.Client;
using Moosend.Wrappers.CSharpWrapper.Model;

namespace Moosend.Wrappers.CSharpWrapper.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICampaignsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// AB Test Campaign Summary
        /// </summary>
        /// <remarks>
        /// Provides a basic summary of the results for a sent AB test campaign, separately for each version (A and B), such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc to date.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <returns>AbTestCampaignSummaryResponse</returns>
        AbTestCampaignSummaryResponse ABTestCampaignSummary (string format, string apikey, string campaignID);

        /// <summary>
        /// AB Test Campaign Summary
        /// </summary>
        /// <remarks>
        /// Provides a basic summary of the results for a sent AB test campaign, separately for each version (A and B), such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc to date.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <returns>ApiResponse of AbTestCampaignSummaryResponse</returns>
        ApiResponse<AbTestCampaignSummaryResponse> ABTestCampaignSummaryWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Activity By Location
        /// </summary>
        /// <remarks>
        /// Returns a detailed report of your campaign opens (unique and total) by country.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>ActivityByLocationResponse</returns>
        ActivityByLocationResponse ActivityByLocation (string format, string apikey, string campaignID);

        /// <summary>
        /// Activity By Location
        /// </summary>
        /// <remarks>
        /// Returns a detailed report of your campaign opens (unique and total) by country.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>ApiResponse of ActivityByLocationResponse</returns>
        ApiResponse<ActivityByLocationResponse> ActivityByLocationWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Campaign Summary
        /// </summary>
        /// <remarks>
        /// Provides a basic summary of the results for any sent campaign such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc. to date.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>CampaignSummaryResponse</returns>
        CampaignSummaryResponse CampaignSummary (string format, string apikey, string campaignID);

        /// <summary>
        /// Campaign Summary
        /// </summary>
        /// <remarks>
        /// Provides a basic summary of the results for any sent campaign such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc. to date.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>ApiResponse of CampaignSummaryResponse</returns>
        ApiResponse<CampaignSummaryResponse> CampaignSummaryWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Cloning An Existing Campaign
        /// </summary>
        /// <remarks>
        /// Creates an exact copy of an existing campaign. The new campaign is created as a draft.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>CloningAnExistingCampaignResponse</returns>
        CloningAnExistingCampaignResponse CloningAnExistingCampaign (string format, string campaignID, string apikey);

        /// <summary>
        /// Cloning An Existing Campaign
        /// </summary>
        /// <remarks>
        /// Creates an exact copy of an existing campaign. The new campaign is created as a draft.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>ApiResponse of CloningAnExistingCampaignResponse</returns>
        ApiResponse<CloningAnExistingCampaignResponse> CloningAnExistingCampaignWithHttpInfo (string format, string campaignID, string apikey);
        /// <summary>
        /// Creating A Draft Campaign
        /// </summary>
        /// <remarks>
        /// Creates a new campaign in your account. This method does not send the campaign, but rather creates it as a draft, ready for sending or testing.  You can choose to send either a regular campaign or an AB split campaign. Campaign content must be specified from a web location.  Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>CreatingADraftCampaignResponse</returns>
        CreatingADraftCampaignResponse CreatingADraftCampaign (string format, string apikey, CreatingADraftCampaignRequest body);

        /// <summary>
        /// Creating A Draft Campaign
        /// </summary>
        /// <remarks>
        /// Creates a new campaign in your account. This method does not send the campaign, but rather creates it as a draft, ready for sending or testing.  You can choose to send either a regular campaign or an AB split campaign. Campaign content must be specified from a web location.  Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreatingADraftCampaignResponse</returns>
        ApiResponse<CreatingADraftCampaignResponse> CreatingADraftCampaignWithHttpInfo (string format, string apikey, CreatingADraftCampaignRequest body);
        /// <summary>
        /// Deleting A Campaign
        /// </summary>
        /// <remarks>
        /// Deletes a campaign from your account, draft or even sent.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <returns>DeletingACampaignResponse</returns>
        DeletingACampaignResponse DeletingACampaign (string format, string apikey, string campaignID);

        /// <summary>
        /// Deleting A Campaign
        /// </summary>
        /// <remarks>
        /// Deletes a campaign from your account, draft or even sent.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <returns>ApiResponse of DeletingACampaignResponse</returns>
        ApiResponse<DeletingACampaignResponse> DeletingACampaignWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Get All Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>GetAllCampaignsResponse</returns>
        GetAllCampaignsResponse GetAllCampaigns (string format, string apikey);

        /// <summary>
        /// Get All Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>ApiResponse of GetAllCampaignsResponse</returns>
        ApiResponse<GetAllCampaignsResponse> GetAllCampaignsWithHttpInfo (string format, string apikey);
        /// <summary>
        /// Get Campaign Statistics With Paging &amp; Filtered
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of statistics for a given campaign based on activity such as emails sent, opened, bounced, link clicked, etc.  Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <param name="type">The type of the activity to display results for. This must be one of the following values : * Sent : To get information about when and to which recipients the campaign was sent. * Opened : To get information about who opened the campaign. * LinkClicked : To get information about who clicked on which link. * Forward : To get information about who forwarded the campaign using the relevant link on the email body and when. * Unsubscribed : To get information about who unsubscribed from the campaign by clicking on the unsubscribe link and when. * Bounced : To get information about which email recipients failed to receive the campaign. If not specified, the value Sent will be used by default.</param>
        /// <param name="page">The page number to display results for. If not specified, the first page will be returned. (optional)</param>
        /// <param name="pageSize">The maximum number of results per page. This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100. (optional)</param>
        /// <param name="from">A date value that specifies since when to start returning results. If omitted, results will be returned from the moment the campaign was sent. (optional)</param>
        /// <param name="to">A date value that specifies up to when to return results. If omitted, results will be returned up to date. (optional)</param>
        /// <returns>GetCampaignStatisticsWithPagingFilteredResponse</returns>
        GetCampaignStatisticsWithPagingFilteredResponse GetCampaignStatisticsWithPagingFiltered (string format, string apikey, string campaignID, string type, string page = null, string pageSize = null, string from = null, string to = null);

        /// <summary>
        /// Get Campaign Statistics With Paging &amp; Filtered
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of statistics for a given campaign based on activity such as emails sent, opened, bounced, link clicked, etc.  Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <param name="type">The type of the activity to display results for. This must be one of the following values : * Sent : To get information about when and to which recipients the campaign was sent. * Opened : To get information about who opened the campaign. * LinkClicked : To get information about who clicked on which link. * Forward : To get information about who forwarded the campaign using the relevant link on the email body and when. * Unsubscribed : To get information about who unsubscribed from the campaign by clicking on the unsubscribe link and when. * Bounced : To get information about which email recipients failed to receive the campaign. If not specified, the value Sent will be used by default.</param>
        /// <param name="page">The page number to display results for. If not specified, the first page will be returned. (optional)</param>
        /// <param name="pageSize">The maximum number of results per page. This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100. (optional)</param>
        /// <param name="from">A date value that specifies since when to start returning results. If omitted, results will be returned from the moment the campaign was sent. (optional)</param>
        /// <param name="to">A date value that specifies up to when to return results. If omitted, results will be returned up to date. (optional)</param>
        /// <returns>ApiResponse of GetCampaignStatisticsWithPagingFilteredResponse</returns>
        ApiResponse<GetCampaignStatisticsWithPagingFilteredResponse> GetCampaignStatisticsWithPagingFilteredWithHttpInfo (string format, string apikey, string campaignID, string type, string page = null, string pageSize = null, string from = null, string to = null);
        /// <summary>
        /// Get Campaigns By Page
        /// </summary>
        /// <remarks>
        /// Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <returns>GetCampaignsByPageResponse</returns>
        GetCampaignsByPageResponse GetCampaignsByPage (string format, string apikey, double? page);

        /// <summary>
        /// Get Campaigns By Page
        /// </summary>
        /// <remarks>
        /// Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <returns>ApiResponse of GetCampaignsByPageResponse</returns>
        ApiResponse<GetCampaignsByPageResponse> GetCampaignsByPageWithHttpInfo (string format, string apikey, double? page);
        /// <summary>
        /// Get Campaigns By Page And Pagesize
        /// </summary>
        /// <remarks>
        /// Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <param name="pageSize">The maximum number of results per page.  This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>GetCampaignsByPageAndPagesizeResponse</returns>
        GetCampaignsByPageAndPagesizeResponse GetCampaignsByPageAndPagesize (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null);

        /// <summary>
        /// Get Campaigns By Page And Pagesize
        /// </summary>
        /// <remarks>
        /// Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <param name="pageSize">The maximum number of results per page.  This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>ApiResponse of GetCampaignsByPageAndPagesizeResponse</returns>
        ApiResponse<GetCampaignsByPageAndPagesizeResponse> GetCampaignsByPageAndPagesizeWithHttpInfo (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null);
        /// <summary>
        /// Getting All Your Senders
        /// </summary>
        /// <remarks>
        /// Gets a list of your active senders in your account. You may specify any email address of these senders when sending a campaign.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>GettingAllYourSendersResponse</returns>
        GettingAllYourSendersResponse GettingAllYourSenders (string format, string apikey);

        /// <summary>
        /// Getting All Your Senders
        /// </summary>
        /// <remarks>
        /// Gets a list of your active senders in your account. You may specify any email address of these senders when sending a campaign.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>ApiResponse of GettingAllYourSendersResponse</returns>
        ApiResponse<GettingAllYourSendersResponse> GettingAllYourSendersWithHttpInfo (string format, string apikey);
        /// <summary>
        /// Getting Campaign Details
        /// </summary>
        /// <remarks>
        /// Returns a complete set of properties that describe the requested campaign in detail. No statistics are included in the result.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>GettingCampaignDetailsResponse</returns>
        GettingCampaignDetailsResponse GettingCampaignDetails (string format, string apikey, string campaignID);

        /// <summary>
        /// Getting Campaign Details
        /// </summary>
        /// <remarks>
        /// Returns a complete set of properties that describe the requested campaign in detail. No statistics are included in the result.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>ApiResponse of GettingCampaignDetailsResponse</returns>
        ApiResponse<GettingCampaignDetailsResponse> GettingCampaignDetailsWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Getting Sender Details
        /// </summary>
        /// <remarks>
        /// Returns basic information for the specified sender identified by its email address.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="email"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>GettingSenderDetailsResponse</returns>
        GettingSenderDetailsResponse GettingSenderDetails (string format, string email, string apikey);

        /// <summary>
        /// Getting Sender Details
        /// </summary>
        /// <remarks>
        /// Returns basic information for the specified sender identified by its email address.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="email"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>ApiResponse of GettingSenderDetailsResponse</returns>
        ApiResponse<GettingSenderDetailsResponse> GettingSenderDetailsWithHttpInfo (string format, string email, string apikey);
        /// <summary>
        /// Link Activity
        /// </summary>
        /// <remarks>
        /// Returns a list with your campaign links and how many clicks have been made by your recipients, either unique or total.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>LinkActivityResponse</returns>
        LinkActivityResponse LinkActivity (string format, string apikey, string campaignID);

        /// <summary>
        /// Link Activity
        /// </summary>
        /// <remarks>
        /// Returns a list with your campaign links and how many clicks have been made by your recipients, either unique or total.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>ApiResponse of LinkActivityResponse</returns>
        ApiResponse<LinkActivityResponse> LinkActivityWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Scheduling A Campaign
        /// </summary>
        /// <remarks>
        /// Assigns a scheduled date and time at which the campaign will be delivered.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <param name="body"></param>
        /// <returns>SchedulingACampaignResponse</returns>
        SchedulingACampaignResponse SchedulingACampaign (string format, string apikey, string campaignID, SchedulingACampaignRequest body);

        /// <summary>
        /// Scheduling A Campaign
        /// </summary>
        /// <remarks>
        /// Assigns a scheduled date and time at which the campaign will be delivered.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SchedulingACampaignResponse</returns>
        ApiResponse<SchedulingACampaignResponse> SchedulingACampaignWithHttpInfo (string format, string apikey, string campaignID, SchedulingACampaignRequest body);
        /// <summary>
        /// Sending a campaign
        /// </summary>
        /// <remarks>
        /// Sends an existing draft campaign to all recipients specified in its mailing list. The campaign is sent immediatelly.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be sent.</param>
        /// <returns>SendingACampaignResponse</returns>
        SendingACampaignResponse SendingACampaign (string format, string apikey, string campaignID);

        /// <summary>
        /// Sending a campaign
        /// </summary>
        /// <remarks>
        /// Sends an existing draft campaign to all recipients specified in its mailing list. The campaign is sent immediatelly.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be sent.</param>
        /// <returns>ApiResponse of SendingACampaignResponse</returns>
        ApiResponse<SendingACampaignResponse> SendingACampaignWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Testing a campaign
        /// </summary>
        /// <remarks>
        /// Sends a test email of a draft campaign to a list of email addresses you specify for previewing.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be tested.</param>
        /// <param name="body"></param>
        /// <returns>TestingACampaignResponse</returns>
        TestingACampaignResponse TestingACampaign (string format, string apikey, string campaignID, TestingACampaignRequest body);

        /// <summary>
        /// Testing a campaign
        /// </summary>
        /// <remarks>
        /// Sends a test email of a draft campaign to a list of email addresses you specify for previewing.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be tested.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TestingACampaignResponse</returns>
        ApiResponse<TestingACampaignResponse> TestingACampaignWithHttpInfo (string format, string apikey, string campaignID, TestingACampaignRequest body);
        /// <summary>
        /// Unscheduling a campaign
        /// </summary>
        /// <remarks>
        /// Removes a previously defined scheduled date and time from a campaign, so that it will be delivered immediately if already queued or when sent.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <returns>UnschedulingACampaignResponse</returns>
        UnschedulingACampaignResponse UnschedulingACampaign (string format, string apikey, string campaignID);

        /// <summary>
        /// Unscheduling a campaign
        /// </summary>
        /// <remarks>
        /// Removes a previously defined scheduled date and time from a campaign, so that it will be delivered immediately if already queued or when sent.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <returns>ApiResponse of UnschedulingACampaignResponse</returns>
        ApiResponse<UnschedulingACampaignResponse> UnschedulingACampaignWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Updating A Draft Campaign
        /// </summary>
        /// <remarks>
        /// Updates properties of an existing draft A/B campaign in your account. Non-draft campaigns cannot be updated. Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <param name="body"></param>
        /// <returns>UpdatingADraftCampaignResponse</returns>
        UpdatingADraftCampaignResponse UpdatingADraftCampaign (string format, string apikey, string campaignID, UpdatingADraftCampaignRequest body);

        /// <summary>
        /// Updating A Draft Campaign
        /// </summary>
        /// <remarks>
        /// Updates properties of an existing draft A/B campaign in your account. Non-draft campaigns cannot be updated. Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdatingADraftCampaignResponse</returns>
        ApiResponse<UpdatingADraftCampaignResponse> UpdatingADraftCampaignWithHttpInfo (string format, string apikey, string campaignID, UpdatingADraftCampaignRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// AB Test Campaign Summary
        /// </summary>
        /// <remarks>
        /// Provides a basic summary of the results for a sent AB test campaign, separately for each version (A and B), such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc to date.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <returns>Task of AbTestCampaignSummaryResponse</returns>
        System.Threading.Tasks.Task<AbTestCampaignSummaryResponse> ABTestCampaignSummaryAsync (string format, string apikey, string campaignID);

        /// <summary>
        /// AB Test Campaign Summary
        /// </summary>
        /// <remarks>
        /// Provides a basic summary of the results for a sent AB test campaign, separately for each version (A and B), such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc to date.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <returns>Task of ApiResponse (AbTestCampaignSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AbTestCampaignSummaryResponse>> ABTestCampaignSummaryAsyncWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Activity By Location
        /// </summary>
        /// <remarks>
        /// Returns a detailed report of your campaign opens (unique and total) by country.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of ActivityByLocationResponse</returns>
        System.Threading.Tasks.Task<ActivityByLocationResponse> ActivityByLocationAsync (string format, string apikey, string campaignID);

        /// <summary>
        /// Activity By Location
        /// </summary>
        /// <remarks>
        /// Returns a detailed report of your campaign opens (unique and total) by country.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of ApiResponse (ActivityByLocationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ActivityByLocationResponse>> ActivityByLocationAsyncWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Campaign Summary
        /// </summary>
        /// <remarks>
        /// Provides a basic summary of the results for any sent campaign such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc. to date.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of CampaignSummaryResponse</returns>
        System.Threading.Tasks.Task<CampaignSummaryResponse> CampaignSummaryAsync (string format, string apikey, string campaignID);

        /// <summary>
        /// Campaign Summary
        /// </summary>
        /// <remarks>
        /// Provides a basic summary of the results for any sent campaign such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc. to date.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of ApiResponse (CampaignSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CampaignSummaryResponse>> CampaignSummaryAsyncWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Cloning An Existing Campaign
        /// </summary>
        /// <remarks>
        /// Creates an exact copy of an existing campaign. The new campaign is created as a draft.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of CloningAnExistingCampaignResponse</returns>
        System.Threading.Tasks.Task<CloningAnExistingCampaignResponse> CloningAnExistingCampaignAsync (string format, string campaignID, string apikey);

        /// <summary>
        /// Cloning An Existing Campaign
        /// </summary>
        /// <remarks>
        /// Creates an exact copy of an existing campaign. The new campaign is created as a draft.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of ApiResponse (CloningAnExistingCampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloningAnExistingCampaignResponse>> CloningAnExistingCampaignAsyncWithHttpInfo (string format, string campaignID, string apikey);
        /// <summary>
        /// Creating A Draft Campaign
        /// </summary>
        /// <remarks>
        /// Creates a new campaign in your account. This method does not send the campaign, but rather creates it as a draft, ready for sending or testing.  You can choose to send either a regular campaign or an AB split campaign. Campaign content must be specified from a web location.  Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of CreatingADraftCampaignResponse</returns>
        System.Threading.Tasks.Task<CreatingADraftCampaignResponse> CreatingADraftCampaignAsync (string format, string apikey, CreatingADraftCampaignRequest body);

        /// <summary>
        /// Creating A Draft Campaign
        /// </summary>
        /// <remarks>
        /// Creates a new campaign in your account. This method does not send the campaign, but rather creates it as a draft, ready for sending or testing.  You can choose to send either a regular campaign or an AB split campaign. Campaign content must be specified from a web location.  Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreatingADraftCampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatingADraftCampaignResponse>> CreatingADraftCampaignAsyncWithHttpInfo (string format, string apikey, CreatingADraftCampaignRequest body);
        /// <summary>
        /// Deleting A Campaign
        /// </summary>
        /// <remarks>
        /// Deletes a campaign from your account, draft or even sent.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <returns>Task of DeletingACampaignResponse</returns>
        System.Threading.Tasks.Task<DeletingACampaignResponse> DeletingACampaignAsync (string format, string apikey, string campaignID);

        /// <summary>
        /// Deleting A Campaign
        /// </summary>
        /// <remarks>
        /// Deletes a campaign from your account, draft or even sent.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <returns>Task of ApiResponse (DeletingACampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletingACampaignResponse>> DeletingACampaignAsyncWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Get All Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of GetAllCampaignsResponse</returns>
        System.Threading.Tasks.Task<GetAllCampaignsResponse> GetAllCampaignsAsync (string format, string apikey);

        /// <summary>
        /// Get All Campaigns
        /// </summary>
        /// <remarks>
        /// Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of ApiResponse (GetAllCampaignsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllCampaignsResponse>> GetAllCampaignsAsyncWithHttpInfo (string format, string apikey);
        /// <summary>
        /// Get Campaign Statistics With Paging &amp; Filtered
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of statistics for a given campaign based on activity such as emails sent, opened, bounced, link clicked, etc.  Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <param name="type">The type of the activity to display results for. This must be one of the following values : * Sent : To get information about when and to which recipients the campaign was sent. * Opened : To get information about who opened the campaign. * LinkClicked : To get information about who clicked on which link. * Forward : To get information about who forwarded the campaign using the relevant link on the email body and when. * Unsubscribed : To get information about who unsubscribed from the campaign by clicking on the unsubscribe link and when. * Bounced : To get information about which email recipients failed to receive the campaign. If not specified, the value Sent will be used by default.</param>
        /// <param name="page">The page number to display results for. If not specified, the first page will be returned. (optional)</param>
        /// <param name="pageSize">The maximum number of results per page. This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100. (optional)</param>
        /// <param name="from">A date value that specifies since when to start returning results. If omitted, results will be returned from the moment the campaign was sent. (optional)</param>
        /// <param name="to">A date value that specifies up to when to return results. If omitted, results will be returned up to date. (optional)</param>
        /// <returns>Task of GetCampaignStatisticsWithPagingFilteredResponse</returns>
        System.Threading.Tasks.Task<GetCampaignStatisticsWithPagingFilteredResponse> GetCampaignStatisticsWithPagingFilteredAsync (string format, string apikey, string campaignID, string type, string page = null, string pageSize = null, string from = null, string to = null);

        /// <summary>
        /// Get Campaign Statistics With Paging &amp; Filtered
        /// </summary>
        /// <remarks>
        /// Returns a detailed list of statistics for a given campaign based on activity such as emails sent, opened, bounced, link clicked, etc.  Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <param name="type">The type of the activity to display results for. This must be one of the following values : * Sent : To get information about when and to which recipients the campaign was sent. * Opened : To get information about who opened the campaign. * LinkClicked : To get information about who clicked on which link. * Forward : To get information about who forwarded the campaign using the relevant link on the email body and when. * Unsubscribed : To get information about who unsubscribed from the campaign by clicking on the unsubscribe link and when. * Bounced : To get information about which email recipients failed to receive the campaign. If not specified, the value Sent will be used by default.</param>
        /// <param name="page">The page number to display results for. If not specified, the first page will be returned. (optional)</param>
        /// <param name="pageSize">The maximum number of results per page. This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100. (optional)</param>
        /// <param name="from">A date value that specifies since when to start returning results. If omitted, results will be returned from the moment the campaign was sent. (optional)</param>
        /// <param name="to">A date value that specifies up to when to return results. If omitted, results will be returned up to date. (optional)</param>
        /// <returns>Task of ApiResponse (GetCampaignStatisticsWithPagingFilteredResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCampaignStatisticsWithPagingFilteredResponse>> GetCampaignStatisticsWithPagingFilteredAsyncWithHttpInfo (string format, string apikey, string campaignID, string type, string page = null, string pageSize = null, string from = null, string to = null);
        /// <summary>
        /// Get Campaigns By Page
        /// </summary>
        /// <remarks>
        /// Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <returns>Task of GetCampaignsByPageResponse</returns>
        System.Threading.Tasks.Task<GetCampaignsByPageResponse> GetCampaignsByPageAsync (string format, string apikey, double? page);

        /// <summary>
        /// Get Campaigns By Page
        /// </summary>
        /// <remarks>
        /// Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <returns>Task of ApiResponse (GetCampaignsByPageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCampaignsByPageResponse>> GetCampaignsByPageAsyncWithHttpInfo (string format, string apikey, double? page);
        /// <summary>
        /// Get Campaigns By Page And Pagesize
        /// </summary>
        /// <remarks>
        /// Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <param name="pageSize">The maximum number of results per page.  This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>Task of GetCampaignsByPageAndPagesizeResponse</returns>
        System.Threading.Tasks.Task<GetCampaignsByPageAndPagesizeResponse> GetCampaignsByPageAndPagesizeAsync (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null);

        /// <summary>
        /// Get Campaigns By Page And Pagesize
        /// </summary>
        /// <remarks>
        /// Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <param name="pageSize">The maximum number of results per page.  This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>Task of ApiResponse (GetCampaignsByPageAndPagesizeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCampaignsByPageAndPagesizeResponse>> GetCampaignsByPageAndPagesizeAsyncWithHttpInfo (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null);
        /// <summary>
        /// Getting All Your Senders
        /// </summary>
        /// <remarks>
        /// Gets a list of your active senders in your account. You may specify any email address of these senders when sending a campaign.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of GettingAllYourSendersResponse</returns>
        System.Threading.Tasks.Task<GettingAllYourSendersResponse> GettingAllYourSendersAsync (string format, string apikey);

        /// <summary>
        /// Getting All Your Senders
        /// </summary>
        /// <remarks>
        /// Gets a list of your active senders in your account. You may specify any email address of these senders when sending a campaign.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of ApiResponse (GettingAllYourSendersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GettingAllYourSendersResponse>> GettingAllYourSendersAsyncWithHttpInfo (string format, string apikey);
        /// <summary>
        /// Getting Campaign Details
        /// </summary>
        /// <remarks>
        /// Returns a complete set of properties that describe the requested campaign in detail. No statistics are included in the result.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of GettingCampaignDetailsResponse</returns>
        System.Threading.Tasks.Task<GettingCampaignDetailsResponse> GettingCampaignDetailsAsync (string format, string apikey, string campaignID);

        /// <summary>
        /// Getting Campaign Details
        /// </summary>
        /// <remarks>
        /// Returns a complete set of properties that describe the requested campaign in detail. No statistics are included in the result.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of ApiResponse (GettingCampaignDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GettingCampaignDetailsResponse>> GettingCampaignDetailsAsyncWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Getting Sender Details
        /// </summary>
        /// <remarks>
        /// Returns basic information for the specified sender identified by its email address.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="email"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of GettingSenderDetailsResponse</returns>
        System.Threading.Tasks.Task<GettingSenderDetailsResponse> GettingSenderDetailsAsync (string format, string email, string apikey);

        /// <summary>
        /// Getting Sender Details
        /// </summary>
        /// <remarks>
        /// Returns basic information for the specified sender identified by its email address.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="email"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of ApiResponse (GettingSenderDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GettingSenderDetailsResponse>> GettingSenderDetailsAsyncWithHttpInfo (string format, string email, string apikey);
        /// <summary>
        /// Link Activity
        /// </summary>
        /// <remarks>
        /// Returns a list with your campaign links and how many clicks have been made by your recipients, either unique or total.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of LinkActivityResponse</returns>
        System.Threading.Tasks.Task<LinkActivityResponse> LinkActivityAsync (string format, string apikey, string campaignID);

        /// <summary>
        /// Link Activity
        /// </summary>
        /// <remarks>
        /// Returns a list with your campaign links and how many clicks have been made by your recipients, either unique or total.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of ApiResponse (LinkActivityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<LinkActivityResponse>> LinkActivityAsyncWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Scheduling A Campaign
        /// </summary>
        /// <remarks>
        /// Assigns a scheduled date and time at which the campaign will be delivered.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <param name="body"></param>
        /// <returns>Task of SchedulingACampaignResponse</returns>
        System.Threading.Tasks.Task<SchedulingACampaignResponse> SchedulingACampaignAsync (string format, string apikey, string campaignID, SchedulingACampaignRequest body);

        /// <summary>
        /// Scheduling A Campaign
        /// </summary>
        /// <remarks>
        /// Assigns a scheduled date and time at which the campaign will be delivered.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SchedulingACampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SchedulingACampaignResponse>> SchedulingACampaignAsyncWithHttpInfo (string format, string apikey, string campaignID, SchedulingACampaignRequest body);
        /// <summary>
        /// Sending a campaign
        /// </summary>
        /// <remarks>
        /// Sends an existing draft campaign to all recipients specified in its mailing list. The campaign is sent immediatelly.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be sent.</param>
        /// <returns>Task of SendingACampaignResponse</returns>
        System.Threading.Tasks.Task<SendingACampaignResponse> SendingACampaignAsync (string format, string apikey, string campaignID);

        /// <summary>
        /// Sending a campaign
        /// </summary>
        /// <remarks>
        /// Sends an existing draft campaign to all recipients specified in its mailing list. The campaign is sent immediatelly.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be sent.</param>
        /// <returns>Task of ApiResponse (SendingACampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendingACampaignResponse>> SendingACampaignAsyncWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Testing a campaign
        /// </summary>
        /// <remarks>
        /// Sends a test email of a draft campaign to a list of email addresses you specify for previewing.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be tested.</param>
        /// <param name="body"></param>
        /// <returns>Task of TestingACampaignResponse</returns>
        System.Threading.Tasks.Task<TestingACampaignResponse> TestingACampaignAsync (string format, string apikey, string campaignID, TestingACampaignRequest body);

        /// <summary>
        /// Testing a campaign
        /// </summary>
        /// <remarks>
        /// Sends a test email of a draft campaign to a list of email addresses you specify for previewing.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be tested.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TestingACampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestingACampaignResponse>> TestingACampaignAsyncWithHttpInfo (string format, string apikey, string campaignID, TestingACampaignRequest body);
        /// <summary>
        /// Unscheduling a campaign
        /// </summary>
        /// <remarks>
        /// Removes a previously defined scheduled date and time from a campaign, so that it will be delivered immediately if already queued or when sent.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <returns>Task of UnschedulingACampaignResponse</returns>
        System.Threading.Tasks.Task<UnschedulingACampaignResponse> UnschedulingACampaignAsync (string format, string apikey, string campaignID);

        /// <summary>
        /// Unscheduling a campaign
        /// </summary>
        /// <remarks>
        /// Removes a previously defined scheduled date and time from a campaign, so that it will be delivered immediately if already queued or when sent.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <returns>Task of ApiResponse (UnschedulingACampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnschedulingACampaignResponse>> UnschedulingACampaignAsyncWithHttpInfo (string format, string apikey, string campaignID);
        /// <summary>
        /// Updating A Draft Campaign
        /// </summary>
        /// <remarks>
        /// Updates properties of an existing draft A/B campaign in your account. Non-draft campaigns cannot be updated. Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <param name="body"></param>
        /// <returns>Task of UpdatingADraftCampaignResponse</returns>
        System.Threading.Tasks.Task<UpdatingADraftCampaignResponse> UpdatingADraftCampaignAsync (string format, string apikey, string campaignID, UpdatingADraftCampaignRequest body);

        /// <summary>
        /// Updating A Draft Campaign
        /// </summary>
        /// <remarks>
        /// Updates properties of an existing draft A/B campaign in your account. Non-draft campaigns cannot be updated. Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdatingADraftCampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatingADraftCampaignResponse>> UpdatingADraftCampaignAsyncWithHttpInfo (string format, string apikey, string campaignID, UpdatingADraftCampaignRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CampaignsApi : ICampaignsApi
    {
        private Moosend.Wrappers.CSharpWrapper.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CampaignsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Moosend.Wrappers.CSharpWrapper.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CampaignsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Moosend.Wrappers.CSharpWrapper.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Moosend.Wrappers.CSharpWrapper.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// AB Test Campaign Summary Provides a basic summary of the results for a sent AB test campaign, separately for each version (A and B), such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc to date.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <returns>AbTestCampaignSummaryResponse</returns>
        public AbTestCampaignSummaryResponse ABTestCampaignSummary (string format, string apikey, string campaignID)
        {
             ApiResponse<AbTestCampaignSummaryResponse> localVarResponse = ABTestCampaignSummaryWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// AB Test Campaign Summary Provides a basic summary of the results for a sent AB test campaign, separately for each version (A and B), such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc to date.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <returns>ApiResponse of AbTestCampaignSummaryResponse</returns>
        public ApiResponse< AbTestCampaignSummaryResponse > ABTestCampaignSummaryWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->ABTestCampaignSummary");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->ABTestCampaignSummary");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->ABTestCampaignSummary");

            var localVarPath = "/campaigns/{CampaignID}/view_ab_summary.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ABTestCampaignSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AbTestCampaignSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AbTestCampaignSummaryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AbTestCampaignSummaryResponse)));
        }

        /// <summary>
        /// AB Test Campaign Summary Provides a basic summary of the results for a sent AB test campaign, separately for each version (A and B), such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc to date.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <returns>Task of AbTestCampaignSummaryResponse</returns>
        public async System.Threading.Tasks.Task<AbTestCampaignSummaryResponse> ABTestCampaignSummaryAsync (string format, string apikey, string campaignID)
        {
             ApiResponse<AbTestCampaignSummaryResponse> localVarResponse = await ABTestCampaignSummaryAsyncWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// AB Test Campaign Summary Provides a basic summary of the results for a sent AB test campaign, separately for each version (A and B), such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc to date.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <returns>Task of ApiResponse (AbTestCampaignSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AbTestCampaignSummaryResponse>> ABTestCampaignSummaryAsyncWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->ABTestCampaignSummary");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->ABTestCampaignSummary");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->ABTestCampaignSummary");

            var localVarPath = "/campaigns/{CampaignID}/view_ab_summary.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ABTestCampaignSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AbTestCampaignSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AbTestCampaignSummaryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AbTestCampaignSummaryResponse)));
        }

        /// <summary>
        /// Activity By Location Returns a detailed report of your campaign opens (unique and total) by country.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>ActivityByLocationResponse</returns>
        public ActivityByLocationResponse ActivityByLocation (string format, string apikey, string campaignID)
        {
             ApiResponse<ActivityByLocationResponse> localVarResponse = ActivityByLocationWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Activity By Location Returns a detailed report of your campaign opens (unique and total) by country.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>ApiResponse of ActivityByLocationResponse</returns>
        public ApiResponse< ActivityByLocationResponse > ActivityByLocationWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->ActivityByLocation");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->ActivityByLocation");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->ActivityByLocation");

            var localVarPath = "/campaigns/{CampaignID}/stats/countries.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivityByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActivityByLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ActivityByLocationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivityByLocationResponse)));
        }

        /// <summary>
        /// Activity By Location Returns a detailed report of your campaign opens (unique and total) by country.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of ActivityByLocationResponse</returns>
        public async System.Threading.Tasks.Task<ActivityByLocationResponse> ActivityByLocationAsync (string format, string apikey, string campaignID)
        {
             ApiResponse<ActivityByLocationResponse> localVarResponse = await ActivityByLocationAsyncWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Activity By Location Returns a detailed report of your campaign opens (unique and total) by country.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of ApiResponse (ActivityByLocationResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ActivityByLocationResponse>> ActivityByLocationAsyncWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->ActivityByLocation");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->ActivityByLocation");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->ActivityByLocation");

            var localVarPath = "/campaigns/{CampaignID}/stats/countries.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ActivityByLocation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ActivityByLocationResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ActivityByLocationResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ActivityByLocationResponse)));
        }

        /// <summary>
        /// Campaign Summary Provides a basic summary of the results for any sent campaign such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc. to date.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>CampaignSummaryResponse</returns>
        public CampaignSummaryResponse CampaignSummary (string format, string apikey, string campaignID)
        {
             ApiResponse<CampaignSummaryResponse> localVarResponse = CampaignSummaryWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Campaign Summary Provides a basic summary of the results for any sent campaign such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc. to date.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>ApiResponse of CampaignSummaryResponse</returns>
        public ApiResponse< CampaignSummaryResponse > CampaignSummaryWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->CampaignSummary");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->CampaignSummary");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->CampaignSummary");

            var localVarPath = "/campaigns/{CampaignID}/view_summary.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CampaignSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CampaignSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CampaignSummaryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CampaignSummaryResponse)));
        }

        /// <summary>
        /// Campaign Summary Provides a basic summary of the results for any sent campaign such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc. to date.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of CampaignSummaryResponse</returns>
        public async System.Threading.Tasks.Task<CampaignSummaryResponse> CampaignSummaryAsync (string format, string apikey, string campaignID)
        {
             ApiResponse<CampaignSummaryResponse> localVarResponse = await CampaignSummaryAsyncWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Campaign Summary Provides a basic summary of the results for any sent campaign such as the number of recipients, opens, clicks, bounces, unsubscribes, forwards etc. to date.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of ApiResponse (CampaignSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CampaignSummaryResponse>> CampaignSummaryAsyncWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->CampaignSummary");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->CampaignSummary");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->CampaignSummary");

            var localVarPath = "/campaigns/{CampaignID}/view_summary.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CampaignSummary", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CampaignSummaryResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CampaignSummaryResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CampaignSummaryResponse)));
        }

        /// <summary>
        /// Cloning An Existing Campaign Creates an exact copy of an existing campaign. The new campaign is created as a draft.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>CloningAnExistingCampaignResponse</returns>
        public CloningAnExistingCampaignResponse CloningAnExistingCampaign (string format, string campaignID, string apikey)
        {
             ApiResponse<CloningAnExistingCampaignResponse> localVarResponse = CloningAnExistingCampaignWithHttpInfo(format, campaignID, apikey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cloning An Existing Campaign Creates an exact copy of an existing campaign. The new campaign is created as a draft.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>ApiResponse of CloningAnExistingCampaignResponse</returns>
        public ApiResponse< CloningAnExistingCampaignResponse > CloningAnExistingCampaignWithHttpInfo (string format, string campaignID, string apikey)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->CloningAnExistingCampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->CloningAnExistingCampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->CloningAnExistingCampaign");

            var localVarPath = "/campaigns/{CampaignID}/clone.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloningAnExistingCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloningAnExistingCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloningAnExistingCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloningAnExistingCampaignResponse)));
        }

        /// <summary>
        /// Cloning An Existing Campaign Creates an exact copy of an existing campaign. The new campaign is created as a draft.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of CloningAnExistingCampaignResponse</returns>
        public async System.Threading.Tasks.Task<CloningAnExistingCampaignResponse> CloningAnExistingCampaignAsync (string format, string campaignID, string apikey)
        {
             ApiResponse<CloningAnExistingCampaignResponse> localVarResponse = await CloningAnExistingCampaignAsyncWithHttpInfo(format, campaignID, apikey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cloning An Existing Campaign Creates an exact copy of an existing campaign. The new campaign is created as a draft.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of ApiResponse (CloningAnExistingCampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloningAnExistingCampaignResponse>> CloningAnExistingCampaignAsyncWithHttpInfo (string format, string campaignID, string apikey)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->CloningAnExistingCampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->CloningAnExistingCampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->CloningAnExistingCampaign");

            var localVarPath = "/campaigns/{CampaignID}/clone.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CloningAnExistingCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloningAnExistingCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloningAnExistingCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloningAnExistingCampaignResponse)));
        }

        /// <summary>
        /// Creating A Draft Campaign Creates a new campaign in your account. This method does not send the campaign, but rather creates it as a draft, ready for sending or testing.  You can choose to send either a regular campaign or an AB split campaign. Campaign content must be specified from a web location.  Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>CreatingADraftCampaignResponse</returns>
        public CreatingADraftCampaignResponse CreatingADraftCampaign (string format, string apikey, CreatingADraftCampaignRequest body)
        {
             ApiResponse<CreatingADraftCampaignResponse> localVarResponse = CreatingADraftCampaignWithHttpInfo(format, apikey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating A Draft Campaign Creates a new campaign in your account. This method does not send the campaign, but rather creates it as a draft, ready for sending or testing.  You can choose to send either a regular campaign or an AB split campaign. Campaign content must be specified from a web location.  Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreatingADraftCampaignResponse</returns>
        public ApiResponse< CreatingADraftCampaignResponse > CreatingADraftCampaignWithHttpInfo (string format, string apikey, CreatingADraftCampaignRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->CreatingADraftCampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->CreatingADraftCampaign");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CampaignsApi->CreatingADraftCampaign");

            var localVarPath = "/campaigns/create.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatingADraftCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatingADraftCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreatingADraftCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatingADraftCampaignResponse)));
        }

        /// <summary>
        /// Creating A Draft Campaign Creates a new campaign in your account. This method does not send the campaign, but rather creates it as a draft, ready for sending or testing.  You can choose to send either a regular campaign or an AB split campaign. Campaign content must be specified from a web location.  Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of CreatingADraftCampaignResponse</returns>
        public async System.Threading.Tasks.Task<CreatingADraftCampaignResponse> CreatingADraftCampaignAsync (string format, string apikey, CreatingADraftCampaignRequest body)
        {
             ApiResponse<CreatingADraftCampaignResponse> localVarResponse = await CreatingADraftCampaignAsyncWithHttpInfo(format, apikey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating A Draft Campaign Creates a new campaign in your account. This method does not send the campaign, but rather creates it as a draft, ready for sending or testing.  You can choose to send either a regular campaign or an AB split campaign. Campaign content must be specified from a web location.  Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreatingADraftCampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatingADraftCampaignResponse>> CreatingADraftCampaignAsyncWithHttpInfo (string format, string apikey, CreatingADraftCampaignRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->CreatingADraftCampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->CreatingADraftCampaign");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CampaignsApi->CreatingADraftCampaign");

            var localVarPath = "/campaigns/create.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatingADraftCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatingADraftCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreatingADraftCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatingADraftCampaignResponse)));
        }

        /// <summary>
        /// Deleting A Campaign Deletes a campaign from your account, draft or even sent.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <returns>DeletingACampaignResponse</returns>
        public DeletingACampaignResponse DeletingACampaign (string format, string apikey, string campaignID)
        {
             ApiResponse<DeletingACampaignResponse> localVarResponse = DeletingACampaignWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting A Campaign Deletes a campaign from your account, draft or even sent.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <returns>ApiResponse of DeletingACampaignResponse</returns>
        public ApiResponse< DeletingACampaignResponse > DeletingACampaignWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->DeletingACampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->DeletingACampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->DeletingACampaign");

            var localVarPath = "/campaigns/{CampaignID}/delete.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletingACampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletingACampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletingACampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletingACampaignResponse)));
        }

        /// <summary>
        /// Deleting A Campaign Deletes a campaign from your account, draft or even sent.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <returns>Task of DeletingACampaignResponse</returns>
        public async System.Threading.Tasks.Task<DeletingACampaignResponse> DeletingACampaignAsync (string format, string apikey, string campaignID)
        {
             ApiResponse<DeletingACampaignResponse> localVarResponse = await DeletingACampaignAsyncWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting A Campaign Deletes a campaign from your account, draft or even sent.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <returns>Task of ApiResponse (DeletingACampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletingACampaignResponse>> DeletingACampaignAsyncWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->DeletingACampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->DeletingACampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->DeletingACampaign");

            var localVarPath = "/campaigns/{CampaignID}/delete.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletingACampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletingACampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletingACampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletingACampaignResponse)));
        }

        /// <summary>
        /// Get All Campaigns Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>GetAllCampaignsResponse</returns>
        public GetAllCampaignsResponse GetAllCampaigns (string format, string apikey)
        {
             ApiResponse<GetAllCampaignsResponse> localVarResponse = GetAllCampaignsWithHttpInfo(format, apikey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Campaigns Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>ApiResponse of GetAllCampaignsResponse</returns>
        public ApiResponse< GetAllCampaignsResponse > GetAllCampaignsWithHttpInfo (string format, string apikey)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->GetAllCampaigns");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->GetAllCampaigns");

            var localVarPath = "/campaigns.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCampaigns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllCampaignsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllCampaignsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllCampaignsResponse)));
        }

        /// <summary>
        /// Get All Campaigns Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of GetAllCampaignsResponse</returns>
        public async System.Threading.Tasks.Task<GetAllCampaignsResponse> GetAllCampaignsAsync (string format, string apikey)
        {
             ApiResponse<GetAllCampaignsResponse> localVarResponse = await GetAllCampaignsAsyncWithHttpInfo(format, apikey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Campaigns Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of ApiResponse (GetAllCampaignsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetAllCampaignsResponse>> GetAllCampaignsAsyncWithHttpInfo (string format, string apikey)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->GetAllCampaigns");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->GetAllCampaigns");

            var localVarPath = "/campaigns.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllCampaigns", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetAllCampaignsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetAllCampaignsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetAllCampaignsResponse)));
        }

        /// <summary>
        /// Get Campaign Statistics With Paging &amp; Filtered Returns a detailed list of statistics for a given campaign based on activity such as emails sent, opened, bounced, link clicked, etc.  Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <param name="type">The type of the activity to display results for. This must be one of the following values : * Sent : To get information about when and to which recipients the campaign was sent. * Opened : To get information about who opened the campaign. * LinkClicked : To get information about who clicked on which link. * Forward : To get information about who forwarded the campaign using the relevant link on the email body and when. * Unsubscribed : To get information about who unsubscribed from the campaign by clicking on the unsubscribe link and when. * Bounced : To get information about which email recipients failed to receive the campaign. If not specified, the value Sent will be used by default.</param>
        /// <param name="page">The page number to display results for. If not specified, the first page will be returned. (optional)</param>
        /// <param name="pageSize">The maximum number of results per page. This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100. (optional)</param>
        /// <param name="from">A date value that specifies since when to start returning results. If omitted, results will be returned from the moment the campaign was sent. (optional)</param>
        /// <param name="to">A date value that specifies up to when to return results. If omitted, results will be returned up to date. (optional)</param>
        /// <returns>GetCampaignStatisticsWithPagingFilteredResponse</returns>
        public GetCampaignStatisticsWithPagingFilteredResponse GetCampaignStatisticsWithPagingFiltered (string format, string apikey, string campaignID, string type, string page = null, string pageSize = null, string from = null, string to = null)
        {
             ApiResponse<GetCampaignStatisticsWithPagingFilteredResponse> localVarResponse = GetCampaignStatisticsWithPagingFilteredWithHttpInfo(format, apikey, campaignID, type, page, pageSize, from, to);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Campaign Statistics With Paging &amp; Filtered Returns a detailed list of statistics for a given campaign based on activity such as emails sent, opened, bounced, link clicked, etc.  Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <param name="type">The type of the activity to display results for. This must be one of the following values : * Sent : To get information about when and to which recipients the campaign was sent. * Opened : To get information about who opened the campaign. * LinkClicked : To get information about who clicked on which link. * Forward : To get information about who forwarded the campaign using the relevant link on the email body and when. * Unsubscribed : To get information about who unsubscribed from the campaign by clicking on the unsubscribe link and when. * Bounced : To get information about which email recipients failed to receive the campaign. If not specified, the value Sent will be used by default.</param>
        /// <param name="page">The page number to display results for. If not specified, the first page will be returned. (optional)</param>
        /// <param name="pageSize">The maximum number of results per page. This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100. (optional)</param>
        /// <param name="from">A date value that specifies since when to start returning results. If omitted, results will be returned from the moment the campaign was sent. (optional)</param>
        /// <param name="to">A date value that specifies up to when to return results. If omitted, results will be returned up to date. (optional)</param>
        /// <returns>ApiResponse of GetCampaignStatisticsWithPagingFilteredResponse</returns>
        public ApiResponse< GetCampaignStatisticsWithPagingFilteredResponse > GetCampaignStatisticsWithPagingFilteredWithHttpInfo (string format, string apikey, string campaignID, string type, string page = null, string pageSize = null, string from = null, string to = null)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->GetCampaignStatisticsWithPagingFiltered");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->GetCampaignStatisticsWithPagingFiltered");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->GetCampaignStatisticsWithPagingFiltered");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CampaignsApi->GetCampaignStatisticsWithPagingFiltered");

            var localVarPath = "/campaigns/{CampaignID}/stats/{Type}.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (type != null) localVarPathParams.Add("Type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (page != null) localVarQueryParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (from != null) localVarQueryParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaignStatisticsWithPagingFiltered", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCampaignStatisticsWithPagingFilteredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCampaignStatisticsWithPagingFilteredResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCampaignStatisticsWithPagingFilteredResponse)));
        }

        /// <summary>
        /// Get Campaign Statistics With Paging &amp; Filtered Returns a detailed list of statistics for a given campaign based on activity such as emails sent, opened, bounced, link clicked, etc.  Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <param name="type">The type of the activity to display results for. This must be one of the following values : * Sent : To get information about when and to which recipients the campaign was sent. * Opened : To get information about who opened the campaign. * LinkClicked : To get information about who clicked on which link. * Forward : To get information about who forwarded the campaign using the relevant link on the email body and when. * Unsubscribed : To get information about who unsubscribed from the campaign by clicking on the unsubscribe link and when. * Bounced : To get information about which email recipients failed to receive the campaign. If not specified, the value Sent will be used by default.</param>
        /// <param name="page">The page number to display results for. If not specified, the first page will be returned. (optional)</param>
        /// <param name="pageSize">The maximum number of results per page. This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100. (optional)</param>
        /// <param name="from">A date value that specifies since when to start returning results. If omitted, results will be returned from the moment the campaign was sent. (optional)</param>
        /// <param name="to">A date value that specifies up to when to return results. If omitted, results will be returned up to date. (optional)</param>
        /// <returns>Task of GetCampaignStatisticsWithPagingFilteredResponse</returns>
        public async System.Threading.Tasks.Task<GetCampaignStatisticsWithPagingFilteredResponse> GetCampaignStatisticsWithPagingFilteredAsync (string format, string apikey, string campaignID, string type, string page = null, string pageSize = null, string from = null, string to = null)
        {
             ApiResponse<GetCampaignStatisticsWithPagingFilteredResponse> localVarResponse = await GetCampaignStatisticsWithPagingFilteredAsyncWithHttpInfo(format, apikey, campaignID, type, page, pageSize, from, to);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Campaign Statistics With Paging &amp; Filtered Returns a detailed list of statistics for a given campaign based on activity such as emails sent, opened, bounced, link clicked, etc.  Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested AB test campaign</param>
        /// <param name="type">The type of the activity to display results for. This must be one of the following values : * Sent : To get information about when and to which recipients the campaign was sent. * Opened : To get information about who opened the campaign. * LinkClicked : To get information about who clicked on which link. * Forward : To get information about who forwarded the campaign using the relevant link on the email body and when. * Unsubscribed : To get information about who unsubscribed from the campaign by clicking on the unsubscribe link and when. * Bounced : To get information about which email recipients failed to receive the campaign. If not specified, the value Sent will be used by default.</param>
        /// <param name="page">The page number to display results for. If not specified, the first page will be returned. (optional)</param>
        /// <param name="pageSize">The maximum number of results per page. This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100. (optional)</param>
        /// <param name="from">A date value that specifies since when to start returning results. If omitted, results will be returned from the moment the campaign was sent. (optional)</param>
        /// <param name="to">A date value that specifies up to when to return results. If omitted, results will be returned up to date. (optional)</param>
        /// <returns>Task of ApiResponse (GetCampaignStatisticsWithPagingFilteredResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCampaignStatisticsWithPagingFilteredResponse>> GetCampaignStatisticsWithPagingFilteredAsyncWithHttpInfo (string format, string apikey, string campaignID, string type, string page = null, string pageSize = null, string from = null, string to = null)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->GetCampaignStatisticsWithPagingFiltered");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->GetCampaignStatisticsWithPagingFiltered");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->GetCampaignStatisticsWithPagingFiltered");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling CampaignsApi->GetCampaignStatisticsWithPagingFiltered");

            var localVarPath = "/campaigns/{CampaignID}/stats/{Type}.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (type != null) localVarPathParams.Add("Type", Configuration.ApiClient.ParameterToString(type)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (page != null) localVarQueryParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (from != null) localVarQueryParams.Add("From", Configuration.ApiClient.ParameterToString(from)); // query parameter
            if (to != null) localVarQueryParams.Add("To", Configuration.ApiClient.ParameterToString(to)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaignStatisticsWithPagingFiltered", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCampaignStatisticsWithPagingFilteredResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCampaignStatisticsWithPagingFilteredResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCampaignStatisticsWithPagingFilteredResponse)));
        }

        /// <summary>
        /// Get Campaigns By Page Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <returns>GetCampaignsByPageResponse</returns>
        public GetCampaignsByPageResponse GetCampaignsByPage (string format, string apikey, double? page)
        {
             ApiResponse<GetCampaignsByPageResponse> localVarResponse = GetCampaignsByPageWithHttpInfo(format, apikey, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Campaigns By Page Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <returns>ApiResponse of GetCampaignsByPageResponse</returns>
        public ApiResponse< GetCampaignsByPageResponse > GetCampaignsByPageWithHttpInfo (string format, string apikey, double? page)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->GetCampaignsByPage");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->GetCampaignsByPage");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling CampaignsApi->GetCampaignsByPage");

            var localVarPath = "/campaigns/{Page}.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (page != null) localVarPathParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaignsByPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCampaignsByPageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCampaignsByPageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCampaignsByPageResponse)));
        }

        /// <summary>
        /// Get Campaigns By Page Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <returns>Task of GetCampaignsByPageResponse</returns>
        public async System.Threading.Tasks.Task<GetCampaignsByPageResponse> GetCampaignsByPageAsync (string format, string apikey, double? page)
        {
             ApiResponse<GetCampaignsByPageResponse> localVarResponse = await GetCampaignsByPageAsyncWithHttpInfo(format, apikey, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Campaigns By Page Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <returns>Task of ApiResponse (GetCampaignsByPageResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCampaignsByPageResponse>> GetCampaignsByPageAsyncWithHttpInfo (string format, string apikey, double? page)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->GetCampaignsByPage");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->GetCampaignsByPage");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling CampaignsApi->GetCampaignsByPage");

            var localVarPath = "/campaigns/{Page}.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (page != null) localVarPathParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaignsByPage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCampaignsByPageResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCampaignsByPageResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCampaignsByPageResponse)));
        }

        /// <summary>
        /// Get Campaigns By Page And Pagesize Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <param name="pageSize">The maximum number of results per page.  This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>GetCampaignsByPageAndPagesizeResponse</returns>
        public GetCampaignsByPageAndPagesizeResponse GetCampaignsByPageAndPagesize (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null)
        {
             ApiResponse<GetCampaignsByPageAndPagesizeResponse> localVarResponse = GetCampaignsByPageAndPagesizeWithHttpInfo(format, apikey, page, pageSize, shortBy, sortMethod);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Campaigns By Page And Pagesize Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <param name="pageSize">The maximum number of results per page.  This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>ApiResponse of GetCampaignsByPageAndPagesizeResponse</returns>
        public ApiResponse< GetCampaignsByPageAndPagesizeResponse > GetCampaignsByPageAndPagesizeWithHttpInfo (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->GetCampaignsByPageAndPagesize");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->GetCampaignsByPageAndPagesize");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling CampaignsApi->GetCampaignsByPageAndPagesize");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling CampaignsApi->GetCampaignsByPageAndPagesize");

            var localVarPath = "/campaigns/{Page}/{PageSize}.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (page != null) localVarPathParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (shortBy != null) localVarQueryParams.Add("ShortBy", Configuration.ApiClient.ParameterToString(shortBy)); // query parameter
            if (sortMethod != null) localVarQueryParams.Add("SortMethod", Configuration.ApiClient.ParameterToString(sortMethod)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaignsByPageAndPagesize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCampaignsByPageAndPagesizeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCampaignsByPageAndPagesizeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCampaignsByPageAndPagesizeResponse)));
        }

        /// <summary>
        /// Get Campaigns By Page And Pagesize Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <param name="pageSize">The maximum number of results per page.  This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>Task of GetCampaignsByPageAndPagesizeResponse</returns>
        public async System.Threading.Tasks.Task<GetCampaignsByPageAndPagesizeResponse> GetCampaignsByPageAndPagesizeAsync (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null)
        {
             ApiResponse<GetCampaignsByPageAndPagesizeResponse> localVarResponse = await GetCampaignsByPageAndPagesizeAsyncWithHttpInfo(format, apikey, page, pageSize, shortBy, sortMethod);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Campaigns By Page And Pagesize Returns a list of all campaigns in your account with detailed information. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page number to display results for.</param>
        /// <param name="pageSize">The maximum number of results per page.  This must be a positive integer up to 100. If not specified, 50 results per page will be returned.  If a value greater than 100 is specified, it will be treated as 100.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>Task of ApiResponse (GetCampaignsByPageAndPagesizeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetCampaignsByPageAndPagesizeResponse>> GetCampaignsByPageAndPagesizeAsyncWithHttpInfo (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->GetCampaignsByPageAndPagesize");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->GetCampaignsByPageAndPagesize");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling CampaignsApi->GetCampaignsByPageAndPagesize");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling CampaignsApi->GetCampaignsByPageAndPagesize");

            var localVarPath = "/campaigns/{Page}/{PageSize}.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (page != null) localVarPathParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (shortBy != null) localVarQueryParams.Add("ShortBy", Configuration.ApiClient.ParameterToString(shortBy)); // query parameter
            if (sortMethod != null) localVarQueryParams.Add("SortMethod", Configuration.ApiClient.ParameterToString(sortMethod)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCampaignsByPageAndPagesize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetCampaignsByPageAndPagesizeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetCampaignsByPageAndPagesizeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetCampaignsByPageAndPagesizeResponse)));
        }

        /// <summary>
        /// Getting All Your Senders Gets a list of your active senders in your account. You may specify any email address of these senders when sending a campaign.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>GettingAllYourSendersResponse</returns>
        public GettingAllYourSendersResponse GettingAllYourSenders (string format, string apikey)
        {
             ApiResponse<GettingAllYourSendersResponse> localVarResponse = GettingAllYourSendersWithHttpInfo(format, apikey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting All Your Senders Gets a list of your active senders in your account. You may specify any email address of these senders when sending a campaign.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>ApiResponse of GettingAllYourSendersResponse</returns>
        public ApiResponse< GettingAllYourSendersResponse > GettingAllYourSendersWithHttpInfo (string format, string apikey)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->GettingAllYourSenders");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->GettingAllYourSenders");

            var localVarPath = "/senders/find_all.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingAllYourSenders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingAllYourSendersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingAllYourSendersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingAllYourSendersResponse)));
        }

        /// <summary>
        /// Getting All Your Senders Gets a list of your active senders in your account. You may specify any email address of these senders when sending a campaign.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of GettingAllYourSendersResponse</returns>
        public async System.Threading.Tasks.Task<GettingAllYourSendersResponse> GettingAllYourSendersAsync (string format, string apikey)
        {
             ApiResponse<GettingAllYourSendersResponse> localVarResponse = await GettingAllYourSendersAsyncWithHttpInfo(format, apikey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting All Your Senders Gets a list of your active senders in your account. You may specify any email address of these senders when sending a campaign.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of ApiResponse (GettingAllYourSendersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GettingAllYourSendersResponse>> GettingAllYourSendersAsyncWithHttpInfo (string format, string apikey)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->GettingAllYourSenders");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->GettingAllYourSenders");

            var localVarPath = "/senders/find_all.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingAllYourSenders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingAllYourSendersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingAllYourSendersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingAllYourSendersResponse)));
        }

        /// <summary>
        /// Getting Campaign Details Returns a complete set of properties that describe the requested campaign in detail. No statistics are included in the result.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>GettingCampaignDetailsResponse</returns>
        public GettingCampaignDetailsResponse GettingCampaignDetails (string format, string apikey, string campaignID)
        {
             ApiResponse<GettingCampaignDetailsResponse> localVarResponse = GettingCampaignDetailsWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting Campaign Details Returns a complete set of properties that describe the requested campaign in detail. No statistics are included in the result.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>ApiResponse of GettingCampaignDetailsResponse</returns>
        public ApiResponse< GettingCampaignDetailsResponse > GettingCampaignDetailsWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->GettingCampaignDetails");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->GettingCampaignDetails");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->GettingCampaignDetails");

            var localVarPath = "/campaigns/{CampaignID}/view.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingCampaignDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingCampaignDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingCampaignDetailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingCampaignDetailsResponse)));
        }

        /// <summary>
        /// Getting Campaign Details Returns a complete set of properties that describe the requested campaign in detail. No statistics are included in the result.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of GettingCampaignDetailsResponse</returns>
        public async System.Threading.Tasks.Task<GettingCampaignDetailsResponse> GettingCampaignDetailsAsync (string format, string apikey, string campaignID)
        {
             ApiResponse<GettingCampaignDetailsResponse> localVarResponse = await GettingCampaignDetailsAsyncWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting Campaign Details Returns a complete set of properties that describe the requested campaign in detail. No statistics are included in the result.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of ApiResponse (GettingCampaignDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GettingCampaignDetailsResponse>> GettingCampaignDetailsAsyncWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->GettingCampaignDetails");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->GettingCampaignDetails");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->GettingCampaignDetails");

            var localVarPath = "/campaigns/{CampaignID}/view.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingCampaignDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingCampaignDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingCampaignDetailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingCampaignDetailsResponse)));
        }

        /// <summary>
        /// Getting Sender Details Returns basic information for the specified sender identified by its email address.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="email"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>GettingSenderDetailsResponse</returns>
        public GettingSenderDetailsResponse GettingSenderDetails (string format, string email, string apikey)
        {
             ApiResponse<GettingSenderDetailsResponse> localVarResponse = GettingSenderDetailsWithHttpInfo(format, email, apikey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting Sender Details Returns basic information for the specified sender identified by its email address.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="email"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>ApiResponse of GettingSenderDetailsResponse</returns>
        public ApiResponse< GettingSenderDetailsResponse > GettingSenderDetailsWithHttpInfo (string format, string email, string apikey)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->GettingSenderDetails");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling CampaignsApi->GettingSenderDetails");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->GettingSenderDetails");

            var localVarPath = "/senders/find_one.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (email != null) localVarQueryParams.Add("Email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingSenderDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingSenderDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingSenderDetailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingSenderDetailsResponse)));
        }

        /// <summary>
        /// Getting Sender Details Returns basic information for the specified sender identified by its email address.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="email"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of GettingSenderDetailsResponse</returns>
        public async System.Threading.Tasks.Task<GettingSenderDetailsResponse> GettingSenderDetailsAsync (string format, string email, string apikey)
        {
             ApiResponse<GettingSenderDetailsResponse> localVarResponse = await GettingSenderDetailsAsyncWithHttpInfo(format, email, apikey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting Sender Details Returns basic information for the specified sender identified by its email address.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="email"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of ApiResponse (GettingSenderDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GettingSenderDetailsResponse>> GettingSenderDetailsAsyncWithHttpInfo (string format, string email, string apikey)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->GettingSenderDetails");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling CampaignsApi->GettingSenderDetails");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->GettingSenderDetails");

            var localVarPath = "/senders/find_one.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (email != null) localVarQueryParams.Add("Email", Configuration.ApiClient.ParameterToString(email)); // query parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingSenderDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingSenderDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingSenderDetailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingSenderDetailsResponse)));
        }

        /// <summary>
        /// Link Activity Returns a list with your campaign links and how many clicks have been made by your recipients, either unique or total.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>LinkActivityResponse</returns>
        public LinkActivityResponse LinkActivity (string format, string apikey, string campaignID)
        {
             ApiResponse<LinkActivityResponse> localVarResponse = LinkActivityWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Link Activity Returns a list with your campaign links and how many clicks have been made by your recipients, either unique or total.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>ApiResponse of LinkActivityResponse</returns>
        public ApiResponse< LinkActivityResponse > LinkActivityWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->LinkActivity");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->LinkActivity");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->LinkActivity");

            var localVarPath = "/campaigns/{CampaignID}/stats/links.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkActivityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkActivityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LinkActivityResponse)));
        }

        /// <summary>
        /// Link Activity Returns a list with your campaign links and how many clicks have been made by your recipients, either unique or total.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of LinkActivityResponse</returns>
        public async System.Threading.Tasks.Task<LinkActivityResponse> LinkActivityAsync (string format, string apikey, string campaignID)
        {
             ApiResponse<LinkActivityResponse> localVarResponse = await LinkActivityAsyncWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Link Activity Returns a list with your campaign links and how many clicks have been made by your recipients, either unique or total.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the requested campaign</param>
        /// <returns>Task of ApiResponse (LinkActivityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LinkActivityResponse>> LinkActivityAsyncWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->LinkActivity");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->LinkActivity");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->LinkActivity");

            var localVarPath = "/campaigns/{CampaignID}/stats/links.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LinkActivity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LinkActivityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LinkActivityResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LinkActivityResponse)));
        }

        /// <summary>
        /// Scheduling A Campaign Assigns a scheduled date and time at which the campaign will be delivered.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <param name="body"></param>
        /// <returns>SchedulingACampaignResponse</returns>
        public SchedulingACampaignResponse SchedulingACampaign (string format, string apikey, string campaignID, SchedulingACampaignRequest body)
        {
             ApiResponse<SchedulingACampaignResponse> localVarResponse = SchedulingACampaignWithHttpInfo(format, apikey, campaignID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Scheduling A Campaign Assigns a scheduled date and time at which the campaign will be delivered.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of SchedulingACampaignResponse</returns>
        public ApiResponse< SchedulingACampaignResponse > SchedulingACampaignWithHttpInfo (string format, string apikey, string campaignID, SchedulingACampaignRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->SchedulingACampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->SchedulingACampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->SchedulingACampaign");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CampaignsApi->SchedulingACampaign");

            var localVarPath = "/campaigns/{CampaignID}/schedule.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SchedulingACampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchedulingACampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchedulingACampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchedulingACampaignResponse)));
        }

        /// <summary>
        /// Scheduling A Campaign Assigns a scheduled date and time at which the campaign will be delivered.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <param name="body"></param>
        /// <returns>Task of SchedulingACampaignResponse</returns>
        public async System.Threading.Tasks.Task<SchedulingACampaignResponse> SchedulingACampaignAsync (string format, string apikey, string campaignID, SchedulingACampaignRequest body)
        {
             ApiResponse<SchedulingACampaignResponse> localVarResponse = await SchedulingACampaignAsyncWithHttpInfo(format, apikey, campaignID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Scheduling A Campaign Assigns a scheduled date and time at which the campaign will be delivered.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (SchedulingACampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SchedulingACampaignResponse>> SchedulingACampaignAsyncWithHttpInfo (string format, string apikey, string campaignID, SchedulingACampaignRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->SchedulingACampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->SchedulingACampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->SchedulingACampaign");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CampaignsApi->SchedulingACampaign");

            var localVarPath = "/campaigns/{CampaignID}/schedule.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SchedulingACampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SchedulingACampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SchedulingACampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SchedulingACampaignResponse)));
        }

        /// <summary>
        /// Sending a campaign Sends an existing draft campaign to all recipients specified in its mailing list. The campaign is sent immediatelly.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be sent.</param>
        /// <returns>SendingACampaignResponse</returns>
        public SendingACampaignResponse SendingACampaign (string format, string apikey, string campaignID)
        {
             ApiResponse<SendingACampaignResponse> localVarResponse = SendingACampaignWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sending a campaign Sends an existing draft campaign to all recipients specified in its mailing list. The campaign is sent immediatelly.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be sent.</param>
        /// <returns>ApiResponse of SendingACampaignResponse</returns>
        public ApiResponse< SendingACampaignResponse > SendingACampaignWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->SendingACampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->SendingACampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->SendingACampaign");

            var localVarPath = "/campaigns/{CampaignID}/send.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendingACampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendingACampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendingACampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendingACampaignResponse)));
        }

        /// <summary>
        /// Sending a campaign Sends an existing draft campaign to all recipients specified in its mailing list. The campaign is sent immediatelly.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be sent.</param>
        /// <returns>Task of SendingACampaignResponse</returns>
        public async System.Threading.Tasks.Task<SendingACampaignResponse> SendingACampaignAsync (string format, string apikey, string campaignID)
        {
             ApiResponse<SendingACampaignResponse> localVarResponse = await SendingACampaignAsyncWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sending a campaign Sends an existing draft campaign to all recipients specified in its mailing list. The campaign is sent immediatelly.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be sent.</param>
        /// <returns>Task of ApiResponse (SendingACampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendingACampaignResponse>> SendingACampaignAsyncWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->SendingACampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->SendingACampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->SendingACampaign");

            var localVarPath = "/campaigns/{CampaignID}/send.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendingACampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendingACampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SendingACampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendingACampaignResponse)));
        }

        /// <summary>
        /// Testing a campaign Sends a test email of a draft campaign to a list of email addresses you specify for previewing.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be tested.</param>
        /// <param name="body"></param>
        /// <returns>TestingACampaignResponse</returns>
        public TestingACampaignResponse TestingACampaign (string format, string apikey, string campaignID, TestingACampaignRequest body)
        {
             ApiResponse<TestingACampaignResponse> localVarResponse = TestingACampaignWithHttpInfo(format, apikey, campaignID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Testing a campaign Sends a test email of a draft campaign to a list of email addresses you specify for previewing.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be tested.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TestingACampaignResponse</returns>
        public ApiResponse< TestingACampaignResponse > TestingACampaignWithHttpInfo (string format, string apikey, string campaignID, TestingACampaignRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->TestingACampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->TestingACampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->TestingACampaign");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CampaignsApi->TestingACampaign");

            var localVarPath = "/campaigns/{CampaignID}/send_test.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestingACampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestingACampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TestingACampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestingACampaignResponse)));
        }

        /// <summary>
        /// Testing a campaign Sends a test email of a draft campaign to a list of email addresses you specify for previewing.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be tested.</param>
        /// <param name="body"></param>
        /// <returns>Task of TestingACampaignResponse</returns>
        public async System.Threading.Tasks.Task<TestingACampaignResponse> TestingACampaignAsync (string format, string apikey, string campaignID, TestingACampaignRequest body)
        {
             ApiResponse<TestingACampaignResponse> localVarResponse = await TestingACampaignAsyncWithHttpInfo(format, apikey, campaignID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Testing a campaign Sends a test email of a draft campaign to a list of email addresses you specify for previewing.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to be tested.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TestingACampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TestingACampaignResponse>> TestingACampaignAsyncWithHttpInfo (string format, string apikey, string campaignID, TestingACampaignRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->TestingACampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->TestingACampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->TestingACampaign");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CampaignsApi->TestingACampaign");

            var localVarPath = "/campaigns/{CampaignID}/send_test.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TestingACampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TestingACampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TestingACampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TestingACampaignResponse)));
        }

        /// <summary>
        /// Unscheduling a campaign Removes a previously defined scheduled date and time from a campaign, so that it will be delivered immediately if already queued or when sent.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <returns>UnschedulingACampaignResponse</returns>
        public UnschedulingACampaignResponse UnschedulingACampaign (string format, string apikey, string campaignID)
        {
             ApiResponse<UnschedulingACampaignResponse> localVarResponse = UnschedulingACampaignWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unscheduling a campaign Removes a previously defined scheduled date and time from a campaign, so that it will be delivered immediately if already queued or when sent.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <returns>ApiResponse of UnschedulingACampaignResponse</returns>
        public ApiResponse< UnschedulingACampaignResponse > UnschedulingACampaignWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->UnschedulingACampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->UnschedulingACampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->UnschedulingACampaign");

            var localVarPath = "/campaigns/{CampaignID}/unschedule.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnschedulingACampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnschedulingACampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnschedulingACampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnschedulingACampaignResponse)));
        }

        /// <summary>
        /// Unscheduling a campaign Removes a previously defined scheduled date and time from a campaign, so that it will be delivered immediately if already queued or when sent.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <returns>Task of UnschedulingACampaignResponse</returns>
        public async System.Threading.Tasks.Task<UnschedulingACampaignResponse> UnschedulingACampaignAsync (string format, string apikey, string campaignID)
        {
             ApiResponse<UnschedulingACampaignResponse> localVarResponse = await UnschedulingACampaignAsyncWithHttpInfo(format, apikey, campaignID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unscheduling a campaign Removes a previously defined scheduled date and time from a campaign, so that it will be delivered immediately if already queued or when sent.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the campaign to be scheduled</param>
        /// <returns>Task of ApiResponse (UnschedulingACampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnschedulingACampaignResponse>> UnschedulingACampaignAsyncWithHttpInfo (string format, string apikey, string campaignID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->UnschedulingACampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->UnschedulingACampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->UnschedulingACampaign");

            var localVarPath = "/campaigns/{CampaignID}/unschedule.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnschedulingACampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnschedulingACampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnschedulingACampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnschedulingACampaignResponse)));
        }

        /// <summary>
        /// Updating A Draft Campaign Updates properties of an existing draft A/B campaign in your account. Non-draft campaigns cannot be updated. Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <param name="body"></param>
        /// <returns>UpdatingADraftCampaignResponse</returns>
        public UpdatingADraftCampaignResponse UpdatingADraftCampaign (string format, string apikey, string campaignID, UpdatingADraftCampaignRequest body)
        {
             ApiResponse<UpdatingADraftCampaignResponse> localVarResponse = UpdatingADraftCampaignWithHttpInfo(format, apikey, campaignID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating A Draft Campaign Updates properties of an existing draft A/B campaign in your account. Non-draft campaigns cannot be updated. Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdatingADraftCampaignResponse</returns>
        public ApiResponse< UpdatingADraftCampaignResponse > UpdatingADraftCampaignWithHttpInfo (string format, string apikey, string campaignID, UpdatingADraftCampaignRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->UpdatingADraftCampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->UpdatingADraftCampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->UpdatingADraftCampaign");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CampaignsApi->UpdatingADraftCampaign");

            var localVarPath = "/campaigns/{CampaignID}/update.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatingADraftCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatingADraftCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatingADraftCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatingADraftCampaignResponse)));
        }

        /// <summary>
        /// Updating A Draft Campaign Updates properties of an existing draft A/B campaign in your account. Non-draft campaigns cannot be updated. Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <param name="body"></param>
        /// <returns>Task of UpdatingADraftCampaignResponse</returns>
        public async System.Threading.Tasks.Task<UpdatingADraftCampaignResponse> UpdatingADraftCampaignAsync (string format, string apikey, string campaignID, UpdatingADraftCampaignRequest body)
        {
             ApiResponse<UpdatingADraftCampaignResponse> localVarResponse = await UpdatingADraftCampaignAsyncWithHttpInfo(format, apikey, campaignID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating A Draft Campaign Updates properties of an existing draft A/B campaign in your account. Non-draft campaigns cannot be updated. Ignore ***(A/B Split Campaign Option)*** if you want to create a regular campaign.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="campaignID">The ID of the draft campaign to update.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdatingADraftCampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatingADraftCampaignResponse>> UpdatingADraftCampaignAsyncWithHttpInfo (string format, string apikey, string campaignID, UpdatingADraftCampaignRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling CampaignsApi->UpdatingADraftCampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling CampaignsApi->UpdatingADraftCampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling CampaignsApi->UpdatingADraftCampaign");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CampaignsApi->UpdatingADraftCampaign");

            var localVarPath = "/campaigns/{CampaignID}/update.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatingADraftCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatingADraftCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatingADraftCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatingADraftCampaignResponse)));
        }

    }
}
