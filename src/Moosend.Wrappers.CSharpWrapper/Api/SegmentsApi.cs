/* 
 * Moosend API
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Moosend.Wrappers.CSharpWrapper.Client;
using Moosend.Wrappers.CSharpWrapper.Model;

namespace Moosend.Wrappers.CSharpWrapper.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISegmentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adding criteria to segments
        /// </summary>
        /// <remarks>
        /// Adds a new criterion (a rule) to the specified segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>AddingCriteriaToSegmentsResponse</returns>
        AddingCriteriaToSegmentsResponse AddingCriteriaToSegments (string format, string mailingListID, string apikey, string segmentID, AddingCriteriaToSegmentsRequest body);

        /// <summary>
        /// Adding criteria to segments
        /// </summary>
        /// <remarks>
        /// Adds a new criterion (a rule) to the specified segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AddingCriteriaToSegmentsResponse</returns>
        ApiResponse<AddingCriteriaToSegmentsResponse> AddingCriteriaToSegmentsWithHttpInfo (string format, string mailingListID, string apikey, string segmentID, AddingCriteriaToSegmentsRequest body);
        /// <summary>
        /// Creating a new segment
        /// </summary>
        /// <remarks>
        /// Creates a new empty segment (without criteria) for the given mailing list. You may specify the name of the segment and the way the criteria will match together.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>CreatingANewSegmentResponse</returns>
        CreatingANewSegmentResponse CreatingANewSegment (string format, string mailingListID, string apikey, CreatingANewSegmentRequest body);

        /// <summary>
        /// Creating a new segment
        /// </summary>
        /// <remarks>
        /// Creates a new empty segment (without criteria) for the given mailing list. You may specify the name of the segment and the way the criteria will match together.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreatingANewSegmentResponse</returns>
        ApiResponse<CreatingANewSegmentResponse> CreatingANewSegmentWithHttpInfo (string format, string mailingListID, string apikey, CreatingANewSegmentRequest body);
        /// <summary>
        /// Deleting A Segment
        /// </summary>
        /// <remarks>
        /// Deletes a segment along with its criteria from the mailing list. The subscribers of the mailing list that the segment returned are not deleted or affected in any way.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <returns>DeletingASegmentResponse</returns>
        DeletingASegmentResponse DeletingASegment (string format, string mailingListID, string apikey, string segmentID);

        /// <summary>
        /// Deleting A Segment
        /// </summary>
        /// <remarks>
        /// Deletes a segment along with its criteria from the mailing list. The subscribers of the mailing list that the segment returned are not deleted or affected in any way.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <returns>ApiResponse of DeletingASegmentResponse</returns>
        ApiResponse<DeletingASegmentResponse> DeletingASegmentWithHttpInfo (string format, string mailingListID, string apikey, string segmentID);
        /// <summary>
        /// Getting segment details
        /// </summary>
        /// <remarks>
        /// Gets detailed information on a specific segment and its criteria. However, it does not include the subscribers returned by the segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>GettingSegmentDetailsResponse</returns>
        GettingSegmentDetailsResponse GettingSegmentDetails (string format, string mailingListID, string segmentID, string apikey);

        /// <summary>
        /// Getting segment details
        /// </summary>
        /// <remarks>
        /// Gets detailed information on a specific segment and its criteria. However, it does not include the subscribers returned by the segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>ApiResponse of GettingSegmentDetailsResponse</returns>
        ApiResponse<GettingSegmentDetailsResponse> GettingSegmentDetailsWithHttpInfo (string format, string mailingListID, string segmentID, string apikey);
        /// <summary>
        /// Getting segment subscribers
        /// </summary>
        /// <remarks>
        /// Gets a list of the subscribers that the specified segment returns according to its criteria. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>GettingSegmentSubscribersResponse</returns>
        GettingSegmentSubscribersResponse GettingSegmentSubscribers (string format, string mailingListID, string segmentID, string apikey);

        /// <summary>
        /// Getting segment subscribers
        /// </summary>
        /// <remarks>
        /// Gets a list of the subscribers that the specified segment returns according to its criteria. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>ApiResponse of GettingSegmentSubscribersResponse</returns>
        ApiResponse<GettingSegmentSubscribersResponse> GettingSegmentSubscribersWithHttpInfo (string format, string mailingListID, string segmentID, string apikey);
        /// <summary>
        /// Getting segments
        /// </summary>
        /// <remarks>
        /// Get a list of all segments with their criteria for the given mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>GettingSegmentsResponse</returns>
        GettingSegmentsResponse GettingSegments (string format, string mailingListID, string apikey);

        /// <summary>
        /// Getting segments
        /// </summary>
        /// <remarks>
        /// Get a list of all segments with their criteria for the given mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>ApiResponse of GettingSegmentsResponse</returns>
        ApiResponse<GettingSegmentsResponse> GettingSegmentsWithHttpInfo (string format, string mailingListID, string apikey);
        /// <summary>
        /// Updating a segment
        /// </summary>
        /// <remarks>
        /// Updates the properties of an existing segment. You may update the name and match type of the segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>UpdatingASegmentResponse</returns>
        UpdatingASegmentResponse UpdatingASegment (string format, string mailingListID, string apikey, string segmentID, UpdatingASegmentRequest body);

        /// <summary>
        /// Updating a segment
        /// </summary>
        /// <remarks>
        /// Updates the properties of an existing segment. You may update the name and match type of the segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdatingASegmentResponse</returns>
        ApiResponse<UpdatingASegmentResponse> UpdatingASegmentWithHttpInfo (string format, string mailingListID, string apikey, string segmentID, UpdatingASegmentRequest body);
        /// <summary>
        /// Updating segment criteria
        /// </summary>
        /// <remarks>
        /// Updates an existing criterion in the specified segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="criteriaID">The ID of the criterion to process.</param>
        /// <param name="body"></param>
        /// <returns>UpdatingSegmentCriteriaResponse</returns>
        UpdatingSegmentCriteriaResponse UpdatingSegmentCriteria (string format, string mailingListID, string apikey, string segmentID, double? criteriaID, UpdatingSegmentCriteriaRequest body);

        /// <summary>
        /// Updating segment criteria
        /// </summary>
        /// <remarks>
        /// Updates an existing criterion in the specified segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="criteriaID">The ID of the criterion to process.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdatingSegmentCriteriaResponse</returns>
        ApiResponse<UpdatingSegmentCriteriaResponse> UpdatingSegmentCriteriaWithHttpInfo (string format, string mailingListID, string apikey, string segmentID, double? criteriaID, UpdatingSegmentCriteriaRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adding criteria to segments
        /// </summary>
        /// <remarks>
        /// Adds a new criterion (a rule) to the specified segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>Task of AddingCriteriaToSegmentsResponse</returns>
        System.Threading.Tasks.Task<AddingCriteriaToSegmentsResponse> AddingCriteriaToSegmentsAsync (string format, string mailingListID, string apikey, string segmentID, AddingCriteriaToSegmentsRequest body);

        /// <summary>
        /// Adding criteria to segments
        /// </summary>
        /// <remarks>
        /// Adds a new criterion (a rule) to the specified segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AddingCriteriaToSegmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddingCriteriaToSegmentsResponse>> AddingCriteriaToSegmentsAsyncWithHttpInfo (string format, string mailingListID, string apikey, string segmentID, AddingCriteriaToSegmentsRequest body);
        /// <summary>
        /// Creating a new segment
        /// </summary>
        /// <remarks>
        /// Creates a new empty segment (without criteria) for the given mailing list. You may specify the name of the segment and the way the criteria will match together.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of CreatingANewSegmentResponse</returns>
        System.Threading.Tasks.Task<CreatingANewSegmentResponse> CreatingANewSegmentAsync (string format, string mailingListID, string apikey, CreatingANewSegmentRequest body);

        /// <summary>
        /// Creating a new segment
        /// </summary>
        /// <remarks>
        /// Creates a new empty segment (without criteria) for the given mailing list. You may specify the name of the segment and the way the criteria will match together.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreatingANewSegmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatingANewSegmentResponse>> CreatingANewSegmentAsyncWithHttpInfo (string format, string mailingListID, string apikey, CreatingANewSegmentRequest body);
        /// <summary>
        /// Deleting A Segment
        /// </summary>
        /// <remarks>
        /// Deletes a segment along with its criteria from the mailing list. The subscribers of the mailing list that the segment returned are not deleted or affected in any way.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <returns>Task of DeletingASegmentResponse</returns>
        System.Threading.Tasks.Task<DeletingASegmentResponse> DeletingASegmentAsync (string format, string mailingListID, string apikey, string segmentID);

        /// <summary>
        /// Deleting A Segment
        /// </summary>
        /// <remarks>
        /// Deletes a segment along with its criteria from the mailing list. The subscribers of the mailing list that the segment returned are not deleted or affected in any way.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <returns>Task of ApiResponse (DeletingASegmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletingASegmentResponse>> DeletingASegmentAsyncWithHttpInfo (string format, string mailingListID, string apikey, string segmentID);
        /// <summary>
        /// Getting segment details
        /// </summary>
        /// <remarks>
        /// Gets detailed information on a specific segment and its criteria. However, it does not include the subscribers returned by the segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of GettingSegmentDetailsResponse</returns>
        System.Threading.Tasks.Task<GettingSegmentDetailsResponse> GettingSegmentDetailsAsync (string format, string mailingListID, string segmentID, string apikey);

        /// <summary>
        /// Getting segment details
        /// </summary>
        /// <remarks>
        /// Gets detailed information on a specific segment and its criteria. However, it does not include the subscribers returned by the segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of ApiResponse (GettingSegmentDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GettingSegmentDetailsResponse>> GettingSegmentDetailsAsyncWithHttpInfo (string format, string mailingListID, string segmentID, string apikey);
        /// <summary>
        /// Getting segment subscribers
        /// </summary>
        /// <remarks>
        /// Gets a list of the subscribers that the specified segment returns according to its criteria. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of GettingSegmentSubscribersResponse</returns>
        System.Threading.Tasks.Task<GettingSegmentSubscribersResponse> GettingSegmentSubscribersAsync (string format, string mailingListID, string segmentID, string apikey);

        /// <summary>
        /// Getting segment subscribers
        /// </summary>
        /// <remarks>
        /// Gets a list of the subscribers that the specified segment returns according to its criteria. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of ApiResponse (GettingSegmentSubscribersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GettingSegmentSubscribersResponse>> GettingSegmentSubscribersAsyncWithHttpInfo (string format, string mailingListID, string segmentID, string apikey);
        /// <summary>
        /// Getting segments
        /// </summary>
        /// <remarks>
        /// Get a list of all segments with their criteria for the given mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of GettingSegmentsResponse</returns>
        System.Threading.Tasks.Task<GettingSegmentsResponse> GettingSegmentsAsync (string format, string mailingListID, string apikey);

        /// <summary>
        /// Getting segments
        /// </summary>
        /// <remarks>
        /// Get a list of all segments with their criteria for the given mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of ApiResponse (GettingSegmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GettingSegmentsResponse>> GettingSegmentsAsyncWithHttpInfo (string format, string mailingListID, string apikey);
        /// <summary>
        /// Updating a segment
        /// </summary>
        /// <remarks>
        /// Updates the properties of an existing segment. You may update the name and match type of the segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>Task of UpdatingASegmentResponse</returns>
        System.Threading.Tasks.Task<UpdatingASegmentResponse> UpdatingASegmentAsync (string format, string mailingListID, string apikey, string segmentID, UpdatingASegmentRequest body);

        /// <summary>
        /// Updating a segment
        /// </summary>
        /// <remarks>
        /// Updates the properties of an existing segment. You may update the name and match type of the segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdatingASegmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatingASegmentResponse>> UpdatingASegmentAsyncWithHttpInfo (string format, string mailingListID, string apikey, string segmentID, UpdatingASegmentRequest body);
        /// <summary>
        /// Updating segment criteria
        /// </summary>
        /// <remarks>
        /// Updates an existing criterion in the specified segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="criteriaID">The ID of the criterion to process.</param>
        /// <param name="body"></param>
        /// <returns>Task of UpdatingSegmentCriteriaResponse</returns>
        System.Threading.Tasks.Task<UpdatingSegmentCriteriaResponse> UpdatingSegmentCriteriaAsync (string format, string mailingListID, string apikey, string segmentID, double? criteriaID, UpdatingSegmentCriteriaRequest body);

        /// <summary>
        /// Updating segment criteria
        /// </summary>
        /// <remarks>
        /// Updates an existing criterion in the specified segment.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="criteriaID">The ID of the criterion to process.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdatingSegmentCriteriaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatingSegmentCriteriaResponse>> UpdatingSegmentCriteriaAsyncWithHttpInfo (string format, string mailingListID, string apikey, string segmentID, double? criteriaID, UpdatingSegmentCriteriaRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SegmentsApi : ISegmentsApi
    {
        private Moosend.Wrappers.CSharpWrapper.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SegmentsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Moosend.Wrappers.CSharpWrapper.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SegmentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Moosend.Wrappers.CSharpWrapper.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Moosend.Wrappers.CSharpWrapper.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adding criteria to segments Adds a new criterion (a rule) to the specified segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>AddingCriteriaToSegmentsResponse</returns>
        public AddingCriteriaToSegmentsResponse AddingCriteriaToSegments (string format, string mailingListID, string apikey, string segmentID, AddingCriteriaToSegmentsRequest body)
        {
             ApiResponse<AddingCriteriaToSegmentsResponse> localVarResponse = AddingCriteriaToSegmentsWithHttpInfo(format, mailingListID, apikey, segmentID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adding criteria to segments Adds a new criterion (a rule) to the specified segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AddingCriteriaToSegmentsResponse</returns>
        public ApiResponse< AddingCriteriaToSegmentsResponse > AddingCriteriaToSegmentsWithHttpInfo (string format, string mailingListID, string apikey, string segmentID, AddingCriteriaToSegmentsRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->AddingCriteriaToSegments");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->AddingCriteriaToSegments");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->AddingCriteriaToSegments");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling SegmentsApi->AddingCriteriaToSegments");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SegmentsApi->AddingCriteriaToSegments");

            var localVarPath = "/lists/{MailingListID}/segments/{SegmentID}/criteria/add.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("SegmentID", Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddingCriteriaToSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddingCriteriaToSegmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddingCriteriaToSegmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddingCriteriaToSegmentsResponse)));
        }

        /// <summary>
        /// Adding criteria to segments Adds a new criterion (a rule) to the specified segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>Task of AddingCriteriaToSegmentsResponse</returns>
        public async System.Threading.Tasks.Task<AddingCriteriaToSegmentsResponse> AddingCriteriaToSegmentsAsync (string format, string mailingListID, string apikey, string segmentID, AddingCriteriaToSegmentsRequest body)
        {
             ApiResponse<AddingCriteriaToSegmentsResponse> localVarResponse = await AddingCriteriaToSegmentsAsyncWithHttpInfo(format, mailingListID, apikey, segmentID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adding criteria to segments Adds a new criterion (a rule) to the specified segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AddingCriteriaToSegmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddingCriteriaToSegmentsResponse>> AddingCriteriaToSegmentsAsyncWithHttpInfo (string format, string mailingListID, string apikey, string segmentID, AddingCriteriaToSegmentsRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->AddingCriteriaToSegments");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->AddingCriteriaToSegments");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->AddingCriteriaToSegments");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling SegmentsApi->AddingCriteriaToSegments");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SegmentsApi->AddingCriteriaToSegments");

            var localVarPath = "/lists/{MailingListID}/segments/{SegmentID}/criteria/add.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("SegmentID", Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddingCriteriaToSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddingCriteriaToSegmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddingCriteriaToSegmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddingCriteriaToSegmentsResponse)));
        }

        /// <summary>
        /// Creating a new segment Creates a new empty segment (without criteria) for the given mailing list. You may specify the name of the segment and the way the criteria will match together.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>CreatingANewSegmentResponse</returns>
        public CreatingANewSegmentResponse CreatingANewSegment (string format, string mailingListID, string apikey, CreatingANewSegmentRequest body)
        {
             ApiResponse<CreatingANewSegmentResponse> localVarResponse = CreatingANewSegmentWithHttpInfo(format, mailingListID, apikey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a new segment Creates a new empty segment (without criteria) for the given mailing list. You may specify the name of the segment and the way the criteria will match together.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreatingANewSegmentResponse</returns>
        public ApiResponse< CreatingANewSegmentResponse > CreatingANewSegmentWithHttpInfo (string format, string mailingListID, string apikey, CreatingANewSegmentRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->CreatingANewSegment");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->CreatingANewSegment");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->CreatingANewSegment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SegmentsApi->CreatingANewSegment");

            var localVarPath = "/lists/{MailingListID}/segments/create.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatingANewSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatingANewSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreatingANewSegmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatingANewSegmentResponse)));
        }

        /// <summary>
        /// Creating a new segment Creates a new empty segment (without criteria) for the given mailing list. You may specify the name of the segment and the way the criteria will match together.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of CreatingANewSegmentResponse</returns>
        public async System.Threading.Tasks.Task<CreatingANewSegmentResponse> CreatingANewSegmentAsync (string format, string mailingListID, string apikey, CreatingANewSegmentRequest body)
        {
             ApiResponse<CreatingANewSegmentResponse> localVarResponse = await CreatingANewSegmentAsyncWithHttpInfo(format, mailingListID, apikey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a new segment Creates a new empty segment (without criteria) for the given mailing list. You may specify the name of the segment and the way the criteria will match together.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreatingANewSegmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatingANewSegmentResponse>> CreatingANewSegmentAsyncWithHttpInfo (string format, string mailingListID, string apikey, CreatingANewSegmentRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->CreatingANewSegment");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->CreatingANewSegment");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->CreatingANewSegment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SegmentsApi->CreatingANewSegment");

            var localVarPath = "/lists/{MailingListID}/segments/create.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatingANewSegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatingANewSegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreatingANewSegmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatingANewSegmentResponse)));
        }

        /// <summary>
        /// Deleting A Segment Deletes a segment along with its criteria from the mailing list. The subscribers of the mailing list that the segment returned are not deleted or affected in any way.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <returns>DeletingASegmentResponse</returns>
        public DeletingASegmentResponse DeletingASegment (string format, string mailingListID, string apikey, string segmentID)
        {
             ApiResponse<DeletingASegmentResponse> localVarResponse = DeletingASegmentWithHttpInfo(format, mailingListID, apikey, segmentID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting A Segment Deletes a segment along with its criteria from the mailing list. The subscribers of the mailing list that the segment returned are not deleted or affected in any way.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <returns>ApiResponse of DeletingASegmentResponse</returns>
        public ApiResponse< DeletingASegmentResponse > DeletingASegmentWithHttpInfo (string format, string mailingListID, string apikey, string segmentID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->DeletingASegment");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->DeletingASegment");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->DeletingASegment");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling SegmentsApi->DeletingASegment");

            var localVarPath = "/lists/{MailingListID}/segments/{SegmentID}/delete.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("SegmentID", Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletingASegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletingASegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletingASegmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletingASegmentResponse)));
        }

        /// <summary>
        /// Deleting A Segment Deletes a segment along with its criteria from the mailing list. The subscribers of the mailing list that the segment returned are not deleted or affected in any way.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <returns>Task of DeletingASegmentResponse</returns>
        public async System.Threading.Tasks.Task<DeletingASegmentResponse> DeletingASegmentAsync (string format, string mailingListID, string apikey, string segmentID)
        {
             ApiResponse<DeletingASegmentResponse> localVarResponse = await DeletingASegmentAsyncWithHttpInfo(format, mailingListID, apikey, segmentID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting A Segment Deletes a segment along with its criteria from the mailing list. The subscribers of the mailing list that the segment returned are not deleted or affected in any way.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <returns>Task of ApiResponse (DeletingASegmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletingASegmentResponse>> DeletingASegmentAsyncWithHttpInfo (string format, string mailingListID, string apikey, string segmentID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->DeletingASegment");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->DeletingASegment");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->DeletingASegment");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling SegmentsApi->DeletingASegment");

            var localVarPath = "/lists/{MailingListID}/segments/{SegmentID}/delete.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("SegmentID", Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletingASegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletingASegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletingASegmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletingASegmentResponse)));
        }

        /// <summary>
        /// Getting segment details Gets detailed information on a specific segment and its criteria. However, it does not include the subscribers returned by the segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>GettingSegmentDetailsResponse</returns>
        public GettingSegmentDetailsResponse GettingSegmentDetails (string format, string mailingListID, string segmentID, string apikey)
        {
             ApiResponse<GettingSegmentDetailsResponse> localVarResponse = GettingSegmentDetailsWithHttpInfo(format, mailingListID, segmentID, apikey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting segment details Gets detailed information on a specific segment and its criteria. However, it does not include the subscribers returned by the segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>ApiResponse of GettingSegmentDetailsResponse</returns>
        public ApiResponse< GettingSegmentDetailsResponse > GettingSegmentDetailsWithHttpInfo (string format, string mailingListID, string segmentID, string apikey)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->GettingSegmentDetails");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->GettingSegmentDetails");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling SegmentsApi->GettingSegmentDetails");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->GettingSegmentDetails");

            var localVarPath = "/lists/{MailingListID}/segments/{SegmentID}/details.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("SegmentID", Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingSegmentDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingSegmentDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingSegmentDetailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingSegmentDetailsResponse)));
        }

        /// <summary>
        /// Getting segment details Gets detailed information on a specific segment and its criteria. However, it does not include the subscribers returned by the segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of GettingSegmentDetailsResponse</returns>
        public async System.Threading.Tasks.Task<GettingSegmentDetailsResponse> GettingSegmentDetailsAsync (string format, string mailingListID, string segmentID, string apikey)
        {
             ApiResponse<GettingSegmentDetailsResponse> localVarResponse = await GettingSegmentDetailsAsyncWithHttpInfo(format, mailingListID, segmentID, apikey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting segment details Gets detailed information on a specific segment and its criteria. However, it does not include the subscribers returned by the segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of ApiResponse (GettingSegmentDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GettingSegmentDetailsResponse>> GettingSegmentDetailsAsyncWithHttpInfo (string format, string mailingListID, string segmentID, string apikey)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->GettingSegmentDetails");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->GettingSegmentDetails");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling SegmentsApi->GettingSegmentDetails");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->GettingSegmentDetails");

            var localVarPath = "/lists/{MailingListID}/segments/{SegmentID}/details.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("SegmentID", Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingSegmentDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingSegmentDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingSegmentDetailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingSegmentDetailsResponse)));
        }

        /// <summary>
        /// Getting segment subscribers Gets a list of the subscribers that the specified segment returns according to its criteria. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>GettingSegmentSubscribersResponse</returns>
        public GettingSegmentSubscribersResponse GettingSegmentSubscribers (string format, string mailingListID, string segmentID, string apikey)
        {
             ApiResponse<GettingSegmentSubscribersResponse> localVarResponse = GettingSegmentSubscribersWithHttpInfo(format, mailingListID, segmentID, apikey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting segment subscribers Gets a list of the subscribers that the specified segment returns according to its criteria. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>ApiResponse of GettingSegmentSubscribersResponse</returns>
        public ApiResponse< GettingSegmentSubscribersResponse > GettingSegmentSubscribersWithHttpInfo (string format, string mailingListID, string segmentID, string apikey)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->GettingSegmentSubscribers");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->GettingSegmentSubscribers");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling SegmentsApi->GettingSegmentSubscribers");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->GettingSegmentSubscribers");

            var localVarPath = "/lists/{MailingListID}/segments/{SegmentID}/members.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("SegmentID", Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingSegmentSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingSegmentSubscribersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingSegmentSubscribersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingSegmentSubscribersResponse)));
        }

        /// <summary>
        /// Getting segment subscribers Gets a list of the subscribers that the specified segment returns according to its criteria. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of GettingSegmentSubscribersResponse</returns>
        public async System.Threading.Tasks.Task<GettingSegmentSubscribersResponse> GettingSegmentSubscribersAsync (string format, string mailingListID, string segmentID, string apikey)
        {
             ApiResponse<GettingSegmentSubscribersResponse> localVarResponse = await GettingSegmentSubscribersAsyncWithHttpInfo(format, mailingListID, segmentID, apikey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting segment subscribers Gets a list of the subscribers that the specified segment returns according to its criteria. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="segmentID">The ID of the segment to fetch results for.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of ApiResponse (GettingSegmentSubscribersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GettingSegmentSubscribersResponse>> GettingSegmentSubscribersAsyncWithHttpInfo (string format, string mailingListID, string segmentID, string apikey)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->GettingSegmentSubscribers");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->GettingSegmentSubscribers");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling SegmentsApi->GettingSegmentSubscribers");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->GettingSegmentSubscribers");

            var localVarPath = "/lists/{MailingListID}/segments/{SegmentID}/members.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("SegmentID", Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingSegmentSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingSegmentSubscribersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingSegmentSubscribersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingSegmentSubscribersResponse)));
        }

        /// <summary>
        /// Getting segments Get a list of all segments with their criteria for the given mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>GettingSegmentsResponse</returns>
        public GettingSegmentsResponse GettingSegments (string format, string mailingListID, string apikey)
        {
             ApiResponse<GettingSegmentsResponse> localVarResponse = GettingSegmentsWithHttpInfo(format, mailingListID, apikey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting segments Get a list of all segments with their criteria for the given mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>ApiResponse of GettingSegmentsResponse</returns>
        public ApiResponse< GettingSegmentsResponse > GettingSegmentsWithHttpInfo (string format, string mailingListID, string apikey)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->GettingSegments");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->GettingSegments");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->GettingSegments");

            var localVarPath = "/lists/{MailingListID}/segments.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingSegmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingSegmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingSegmentsResponse)));
        }

        /// <summary>
        /// Getting segments Get a list of all segments with their criteria for the given mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of GettingSegmentsResponse</returns>
        public async System.Threading.Tasks.Task<GettingSegmentsResponse> GettingSegmentsAsync (string format, string mailingListID, string apikey)
        {
             ApiResponse<GettingSegmentsResponse> localVarResponse = await GettingSegmentsAsyncWithHttpInfo(format, mailingListID, apikey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting segments Get a list of all segments with their criteria for the given mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <returns>Task of ApiResponse (GettingSegmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GettingSegmentsResponse>> GettingSegmentsAsyncWithHttpInfo (string format, string mailingListID, string apikey)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->GettingSegments");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->GettingSegments");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->GettingSegments");

            var localVarPath = "/lists/{MailingListID}/segments.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingSegments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingSegmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingSegmentsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingSegmentsResponse)));
        }

        /// <summary>
        /// Updating a segment Updates the properties of an existing segment. You may update the name and match type of the segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>UpdatingASegmentResponse</returns>
        public UpdatingASegmentResponse UpdatingASegment (string format, string mailingListID, string apikey, string segmentID, UpdatingASegmentRequest body)
        {
             ApiResponse<UpdatingASegmentResponse> localVarResponse = UpdatingASegmentWithHttpInfo(format, mailingListID, apikey, segmentID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a segment Updates the properties of an existing segment. You may update the name and match type of the segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdatingASegmentResponse</returns>
        public ApiResponse< UpdatingASegmentResponse > UpdatingASegmentWithHttpInfo (string format, string mailingListID, string apikey, string segmentID, UpdatingASegmentRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->UpdatingASegment");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->UpdatingASegment");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->UpdatingASegment");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling SegmentsApi->UpdatingASegment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SegmentsApi->UpdatingASegment");

            var localVarPath = "/lists/{MailingListID}/segments/{SegmentID}/update.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("SegmentID", Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatingASegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatingASegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatingASegmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatingASegmentResponse)));
        }

        /// <summary>
        /// Updating a segment Updates the properties of an existing segment. You may update the name and match type of the segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>Task of UpdatingASegmentResponse</returns>
        public async System.Threading.Tasks.Task<UpdatingASegmentResponse> UpdatingASegmentAsync (string format, string mailingListID, string apikey, string segmentID, UpdatingASegmentRequest body)
        {
             ApiResponse<UpdatingASegmentResponse> localVarResponse = await UpdatingASegmentAsyncWithHttpInfo(format, mailingListID, apikey, segmentID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a segment Updates the properties of an existing segment. You may update the name and match type of the segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdatingASegmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatingASegmentResponse>> UpdatingASegmentAsyncWithHttpInfo (string format, string mailingListID, string apikey, string segmentID, UpdatingASegmentRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->UpdatingASegment");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->UpdatingASegment");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->UpdatingASegment");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling SegmentsApi->UpdatingASegment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SegmentsApi->UpdatingASegment");

            var localVarPath = "/lists/{MailingListID}/segments/{SegmentID}/update.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("SegmentID", Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatingASegment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatingASegmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatingASegmentResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatingASegmentResponse)));
        }

        /// <summary>
        /// Updating segment criteria Updates an existing criterion in the specified segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="criteriaID">The ID of the criterion to process.</param>
        /// <param name="body"></param>
        /// <returns>UpdatingSegmentCriteriaResponse</returns>
        public UpdatingSegmentCriteriaResponse UpdatingSegmentCriteria (string format, string mailingListID, string apikey, string segmentID, double? criteriaID, UpdatingSegmentCriteriaRequest body)
        {
             ApiResponse<UpdatingSegmentCriteriaResponse> localVarResponse = UpdatingSegmentCriteriaWithHttpInfo(format, mailingListID, apikey, segmentID, criteriaID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating segment criteria Updates an existing criterion in the specified segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="criteriaID">The ID of the criterion to process.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdatingSegmentCriteriaResponse</returns>
        public ApiResponse< UpdatingSegmentCriteriaResponse > UpdatingSegmentCriteriaWithHttpInfo (string format, string mailingListID, string apikey, string segmentID, double? criteriaID, UpdatingSegmentCriteriaRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->UpdatingSegmentCriteria");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->UpdatingSegmentCriteria");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->UpdatingSegmentCriteria");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling SegmentsApi->UpdatingSegmentCriteria");
            // verify the required parameter 'criteriaID' is set
            if (criteriaID == null)
                throw new ApiException(400, "Missing required parameter 'criteriaID' when calling SegmentsApi->UpdatingSegmentCriteria");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SegmentsApi->UpdatingSegmentCriteria");

            var localVarPath = "/lists/{MailingListID}/segments/{SegmentID}/criteria/{CriteriaID}/update.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("SegmentID", Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (criteriaID != null) localVarPathParams.Add("CriteriaID", Configuration.ApiClient.ParameterToString(criteriaID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatingSegmentCriteria", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatingSegmentCriteriaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatingSegmentCriteriaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatingSegmentCriteriaResponse)));
        }

        /// <summary>
        /// Updating segment criteria Updates an existing criterion in the specified segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="criteriaID">The ID of the criterion to process.</param>
        /// <param name="body"></param>
        /// <returns>Task of UpdatingSegmentCriteriaResponse</returns>
        public async System.Threading.Tasks.Task<UpdatingSegmentCriteriaResponse> UpdatingSegmentCriteriaAsync (string format, string mailingListID, string apikey, string segmentID, double? criteriaID, UpdatingSegmentCriteriaRequest body)
        {
             ApiResponse<UpdatingSegmentCriteriaResponse> localVarResponse = await UpdatingSegmentCriteriaAsyncWithHttpInfo(format, mailingListID, apikey, segmentID, criteriaID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating segment criteria Updates an existing criterion in the specified segment.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list the specified segment belongs.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="segmentID">The ID of the segment to update.</param>
        /// <param name="criteriaID">The ID of the criterion to process.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdatingSegmentCriteriaResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatingSegmentCriteriaResponse>> UpdatingSegmentCriteriaAsyncWithHttpInfo (string format, string mailingListID, string apikey, string segmentID, double? criteriaID, UpdatingSegmentCriteriaRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SegmentsApi->UpdatingSegmentCriteria");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SegmentsApi->UpdatingSegmentCriteria");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SegmentsApi->UpdatingSegmentCriteria");
            // verify the required parameter 'segmentID' is set
            if (segmentID == null)
                throw new ApiException(400, "Missing required parameter 'segmentID' when calling SegmentsApi->UpdatingSegmentCriteria");
            // verify the required parameter 'criteriaID' is set
            if (criteriaID == null)
                throw new ApiException(400, "Missing required parameter 'criteriaID' when calling SegmentsApi->UpdatingSegmentCriteria");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SegmentsApi->UpdatingSegmentCriteria");

            var localVarPath = "/lists/{MailingListID}/segments/{SegmentID}/criteria/{CriteriaID}/update.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (segmentID != null) localVarPathParams.Add("SegmentID", Configuration.ApiClient.ParameterToString(segmentID)); // path parameter
            if (criteriaID != null) localVarPathParams.Add("CriteriaID", Configuration.ApiClient.ParameterToString(criteriaID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatingSegmentCriteria", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatingSegmentCriteriaResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatingSegmentCriteriaResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatingSegmentCriteriaResponse)));
        }

    }
}
