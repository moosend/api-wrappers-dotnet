/* 
 * Moosend API
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Moosend.Wrappers.CSharpWrapper.Client;
using Moosend.Wrappers.CSharpWrapper.Model;

namespace Moosend.Wrappers.CSharpWrapper.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMailingListsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Creating a custom field
        /// </summary>
        /// <remarks>
        /// Creates a new custom field in the specified mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field will belong.</param>
        /// <param name="body"></param>
        /// <returns>CreatingACustomFieldResponse</returns>
        CreatingACustomFieldResponse CreatingACustomField (string format, string apikey, string mailingListID, CreatingACustomFieldRequest body);

        /// <summary>
        /// Creating a custom field
        /// </summary>
        /// <remarks>
        /// Creates a new custom field in the specified mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field will belong.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreatingACustomFieldResponse</returns>
        ApiResponse<CreatingACustomFieldResponse> CreatingACustomFieldWithHttpInfo (string format, string apikey, string mailingListID, CreatingACustomFieldRequest body);
        /// <summary>
        /// Creating a mailing list
        /// </summary>
        /// <remarks>
        /// Creates a new empty mailing list in your account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>CreatingAMailingListResponse</returns>
        CreatingAMailingListResponse CreatingAMailingList (string format, string apikey, CreatingAMailingListRequest body);

        /// <summary>
        /// Creating a mailing list
        /// </summary>
        /// <remarks>
        /// Creates a new empty mailing list in your account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreatingAMailingListResponse</returns>
        ApiResponse<CreatingAMailingListResponse> CreatingAMailingListWithHttpInfo (string format, string apikey, CreatingAMailingListRequest body);
        /// <summary>
        /// Deleting a mailing list
        /// </summary>
        /// <remarks>
        /// Deletes a mailing list from your account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be deleted.</param>
        /// <returns>DeletingAMailingListResponse</returns>
        DeletingAMailingListResponse DeletingAMailingList (string format, string apikey, string mailingListID);

        /// <summary>
        /// Deleting a mailing list
        /// </summary>
        /// <remarks>
        /// Deletes a mailing list from your account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be deleted.</param>
        /// <returns>ApiResponse of DeletingAMailingListResponse</returns>
        ApiResponse<DeletingAMailingListResponse> DeletingAMailingListWithHttpInfo (string format, string apikey, string mailingListID);
        /// <summary>
        /// Getting all active mailing lists
        /// </summary>
        /// <remarks>
        /// Gets a list of your active mailing lists in your account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>GettingAllActiveMailingListsResponse</returns>
        GettingAllActiveMailingListsResponse GettingAllActiveMailingLists (string format, string apikey, string withStatistics = null, string shortBy = null, string sortMethod = null);

        /// <summary>
        /// Getting all active mailing lists
        /// </summary>
        /// <remarks>
        /// Gets a list of your active mailing lists in your account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>ApiResponse of GettingAllActiveMailingListsResponse</returns>
        ApiResponse<GettingAllActiveMailingListsResponse> GettingAllActiveMailingListsWithHttpInfo (string format, string apikey, string withStatistics = null, string shortBy = null, string sortMethod = null);
        /// <summary>
        /// Getting all active mailing lists with paging
        /// </summary>
        /// <remarks>
        /// Gets a list of your active mailing lists in your account. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page that you want to get.</param>
        /// <param name="pageSize">Lists Per Page.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>GettingAllActiveMailingListsWithPagingResponse</returns>
        GettingAllActiveMailingListsWithPagingResponse GettingAllActiveMailingListsWithPaging (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null);

        /// <summary>
        /// Getting all active mailing lists with paging
        /// </summary>
        /// <remarks>
        /// Gets a list of your active mailing lists in your account. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page that you want to get.</param>
        /// <param name="pageSize">Lists Per Page.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>ApiResponse of GettingAllActiveMailingListsWithPagingResponse</returns>
        ApiResponse<GettingAllActiveMailingListsWithPagingResponse> GettingAllActiveMailingListsWithPagingWithHttpInfo (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null);
        /// <summary>
        /// Getting mailing list details
        /// </summary>
        /// <remarks>
        /// Gets details for a given mailing list. You may include subscriber statistics in your results or not. Any segments existing for the requested mailing list will not be included in the results.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to be returned.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <returns>GettingMailingListDetailsResponse</returns>
        GettingMailingListDetailsResponse GettingMailingListDetails (string format, string mailingListID, string apikey, string withStatistics = null);

        /// <summary>
        /// Getting mailing list details
        /// </summary>
        /// <remarks>
        /// Gets details for a given mailing list. You may include subscriber statistics in your results or not. Any segments existing for the requested mailing list will not be included in the results.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to be returned.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <returns>ApiResponse of GettingMailingListDetailsResponse</returns>
        ApiResponse<GettingMailingListDetailsResponse> GettingMailingListDetailsWithHttpInfo (string format, string mailingListID, string apikey, string withStatistics = null);
        /// <summary>
        /// Removing a custom field
        /// </summary>
        /// <remarks>
        /// Removes a custom field definition from the specified mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be deleted.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <returns>RemovingACustomFieldResponse</returns>
        RemovingACustomFieldResponse RemovingACustomField (string format, string customFieldID, string apikey, string mailingListID);

        /// <summary>
        /// Removing a custom field
        /// </summary>
        /// <remarks>
        /// Removes a custom field definition from the specified mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be deleted.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <returns>ApiResponse of RemovingACustomFieldResponse</returns>
        ApiResponse<RemovingACustomFieldResponse> RemovingACustomFieldWithHttpInfo (string format, string customFieldID, string apikey, string mailingListID);
        /// <summary>
        /// Updating a custom field
        /// </summary>
        /// <remarks>
        /// Updates the properties of an existing custom field in the specified mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be updated.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <param name="body"></param>
        /// <returns>UpdatingACustomFieldResponse</returns>
        UpdatingACustomFieldResponse UpdatingACustomField (string format, string customFieldID, string apikey, string mailingListID, UpdatingACustomFieldRequest body);

        /// <summary>
        /// Updating a custom field
        /// </summary>
        /// <remarks>
        /// Updates the properties of an existing custom field in the specified mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be updated.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdatingACustomFieldResponse</returns>
        ApiResponse<UpdatingACustomFieldResponse> UpdatingACustomFieldWithHttpInfo (string format, string customFieldID, string apikey, string mailingListID, UpdatingACustomFieldRequest body);
        /// <summary>
        /// Updating a mailing list
        /// </summary>
        /// <remarks>
        /// Updates the properties of an existing mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be updated.</param>
        /// <param name="body"></param>
        /// <returns>UpdatingAMailingListResponse</returns>
        UpdatingAMailingListResponse UpdatingAMailingList (string format, string apikey, string mailingListID, UpdatingAMailingListRequest body);

        /// <summary>
        /// Updating a mailing list
        /// </summary>
        /// <remarks>
        /// Updates the properties of an existing mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be updated.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdatingAMailingListResponse</returns>
        ApiResponse<UpdatingAMailingListResponse> UpdatingAMailingListWithHttpInfo (string format, string apikey, string mailingListID, UpdatingAMailingListRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Creating a custom field
        /// </summary>
        /// <remarks>
        /// Creates a new custom field in the specified mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field will belong.</param>
        /// <param name="body"></param>
        /// <returns>Task of CreatingACustomFieldResponse</returns>
        System.Threading.Tasks.Task<CreatingACustomFieldResponse> CreatingACustomFieldAsync (string format, string apikey, string mailingListID, CreatingACustomFieldRequest body);

        /// <summary>
        /// Creating a custom field
        /// </summary>
        /// <remarks>
        /// Creates a new custom field in the specified mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field will belong.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreatingACustomFieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatingACustomFieldResponse>> CreatingACustomFieldAsyncWithHttpInfo (string format, string apikey, string mailingListID, CreatingACustomFieldRequest body);
        /// <summary>
        /// Creating a mailing list
        /// </summary>
        /// <remarks>
        /// Creates a new empty mailing list in your account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of CreatingAMailingListResponse</returns>
        System.Threading.Tasks.Task<CreatingAMailingListResponse> CreatingAMailingListAsync (string format, string apikey, CreatingAMailingListRequest body);

        /// <summary>
        /// Creating a mailing list
        /// </summary>
        /// <remarks>
        /// Creates a new empty mailing list in your account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreatingAMailingListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatingAMailingListResponse>> CreatingAMailingListAsyncWithHttpInfo (string format, string apikey, CreatingAMailingListRequest body);
        /// <summary>
        /// Deleting a mailing list
        /// </summary>
        /// <remarks>
        /// Deletes a mailing list from your account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be deleted.</param>
        /// <returns>Task of DeletingAMailingListResponse</returns>
        System.Threading.Tasks.Task<DeletingAMailingListResponse> DeletingAMailingListAsync (string format, string apikey, string mailingListID);

        /// <summary>
        /// Deleting a mailing list
        /// </summary>
        /// <remarks>
        /// Deletes a mailing list from your account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be deleted.</param>
        /// <returns>Task of ApiResponse (DeletingAMailingListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeletingAMailingListResponse>> DeletingAMailingListAsyncWithHttpInfo (string format, string apikey, string mailingListID);
        /// <summary>
        /// Getting all active mailing lists
        /// </summary>
        /// <remarks>
        /// Gets a list of your active mailing lists in your account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>Task of GettingAllActiveMailingListsResponse</returns>
        System.Threading.Tasks.Task<GettingAllActiveMailingListsResponse> GettingAllActiveMailingListsAsync (string format, string apikey, string withStatistics = null, string shortBy = null, string sortMethod = null);

        /// <summary>
        /// Getting all active mailing lists
        /// </summary>
        /// <remarks>
        /// Gets a list of your active mailing lists in your account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>Task of ApiResponse (GettingAllActiveMailingListsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GettingAllActiveMailingListsResponse>> GettingAllActiveMailingListsAsyncWithHttpInfo (string format, string apikey, string withStatistics = null, string shortBy = null, string sortMethod = null);
        /// <summary>
        /// Getting all active mailing lists with paging
        /// </summary>
        /// <remarks>
        /// Gets a list of your active mailing lists in your account. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page that you want to get.</param>
        /// <param name="pageSize">Lists Per Page.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>Task of GettingAllActiveMailingListsWithPagingResponse</returns>
        System.Threading.Tasks.Task<GettingAllActiveMailingListsWithPagingResponse> GettingAllActiveMailingListsWithPagingAsync (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null);

        /// <summary>
        /// Getting all active mailing lists with paging
        /// </summary>
        /// <remarks>
        /// Gets a list of your active mailing lists in your account. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page that you want to get.</param>
        /// <param name="pageSize">Lists Per Page.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>Task of ApiResponse (GettingAllActiveMailingListsWithPagingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GettingAllActiveMailingListsWithPagingResponse>> GettingAllActiveMailingListsWithPagingAsyncWithHttpInfo (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null);
        /// <summary>
        /// Getting mailing list details
        /// </summary>
        /// <remarks>
        /// Gets details for a given mailing list. You may include subscriber statistics in your results or not. Any segments existing for the requested mailing list will not be included in the results.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to be returned.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <returns>Task of GettingMailingListDetailsResponse</returns>
        System.Threading.Tasks.Task<GettingMailingListDetailsResponse> GettingMailingListDetailsAsync (string format, string mailingListID, string apikey, string withStatistics = null);

        /// <summary>
        /// Getting mailing list details
        /// </summary>
        /// <remarks>
        /// Gets details for a given mailing list. You may include subscriber statistics in your results or not. Any segments existing for the requested mailing list will not be included in the results.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to be returned.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <returns>Task of ApiResponse (GettingMailingListDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GettingMailingListDetailsResponse>> GettingMailingListDetailsAsyncWithHttpInfo (string format, string mailingListID, string apikey, string withStatistics = null);
        /// <summary>
        /// Removing a custom field
        /// </summary>
        /// <remarks>
        /// Removes a custom field definition from the specified mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be deleted.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <returns>Task of RemovingACustomFieldResponse</returns>
        System.Threading.Tasks.Task<RemovingACustomFieldResponse> RemovingACustomFieldAsync (string format, string customFieldID, string apikey, string mailingListID);

        /// <summary>
        /// Removing a custom field
        /// </summary>
        /// <remarks>
        /// Removes a custom field definition from the specified mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be deleted.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <returns>Task of ApiResponse (RemovingACustomFieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemovingACustomFieldResponse>> RemovingACustomFieldAsyncWithHttpInfo (string format, string customFieldID, string apikey, string mailingListID);
        /// <summary>
        /// Updating a custom field
        /// </summary>
        /// <remarks>
        /// Updates the properties of an existing custom field in the specified mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be updated.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <param name="body"></param>
        /// <returns>Task of UpdatingACustomFieldResponse</returns>
        System.Threading.Tasks.Task<UpdatingACustomFieldResponse> UpdatingACustomFieldAsync (string format, string customFieldID, string apikey, string mailingListID, UpdatingACustomFieldRequest body);

        /// <summary>
        /// Updating a custom field
        /// </summary>
        /// <remarks>
        /// Updates the properties of an existing custom field in the specified mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be updated.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdatingACustomFieldResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatingACustomFieldResponse>> UpdatingACustomFieldAsyncWithHttpInfo (string format, string customFieldID, string apikey, string mailingListID, UpdatingACustomFieldRequest body);
        /// <summary>
        /// Updating a mailing list
        /// </summary>
        /// <remarks>
        /// Updates the properties of an existing mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be updated.</param>
        /// <param name="body"></param>
        /// <returns>Task of UpdatingAMailingListResponse</returns>
        System.Threading.Tasks.Task<UpdatingAMailingListResponse> UpdatingAMailingListAsync (string format, string apikey, string mailingListID, UpdatingAMailingListRequest body);

        /// <summary>
        /// Updating a mailing list
        /// </summary>
        /// <remarks>
        /// Updates the properties of an existing mailing list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be updated.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdatingAMailingListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatingAMailingListResponse>> UpdatingAMailingListAsyncWithHttpInfo (string format, string apikey, string mailingListID, UpdatingAMailingListRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MailingListsApi : IMailingListsApi
    {
        private Moosend.Wrappers.CSharpWrapper.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MailingListsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MailingListsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Moosend.Wrappers.CSharpWrapper.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MailingListsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MailingListsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Moosend.Wrappers.CSharpWrapper.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Moosend.Wrappers.CSharpWrapper.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Creating a custom field Creates a new custom field in the specified mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field will belong.</param>
        /// <param name="body"></param>
        /// <returns>CreatingACustomFieldResponse</returns>
        public CreatingACustomFieldResponse CreatingACustomField (string format, string apikey, string mailingListID, CreatingACustomFieldRequest body)
        {
             ApiResponse<CreatingACustomFieldResponse> localVarResponse = CreatingACustomFieldWithHttpInfo(format, apikey, mailingListID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a custom field Creates a new custom field in the specified mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field will belong.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreatingACustomFieldResponse</returns>
        public ApiResponse< CreatingACustomFieldResponse > CreatingACustomFieldWithHttpInfo (string format, string apikey, string mailingListID, CreatingACustomFieldRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->CreatingACustomField");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->CreatingACustomField");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling MailingListsApi->CreatingACustomField");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MailingListsApi->CreatingACustomField");

            var localVarPath = "/lists/{MailingListID}/customfields/create.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatingACustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatingACustomFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreatingACustomFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatingACustomFieldResponse)));
        }

        /// <summary>
        /// Creating a custom field Creates a new custom field in the specified mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field will belong.</param>
        /// <param name="body"></param>
        /// <returns>Task of CreatingACustomFieldResponse</returns>
        public async System.Threading.Tasks.Task<CreatingACustomFieldResponse> CreatingACustomFieldAsync (string format, string apikey, string mailingListID, CreatingACustomFieldRequest body)
        {
             ApiResponse<CreatingACustomFieldResponse> localVarResponse = await CreatingACustomFieldAsyncWithHttpInfo(format, apikey, mailingListID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a custom field Creates a new custom field in the specified mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field will belong.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreatingACustomFieldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatingACustomFieldResponse>> CreatingACustomFieldAsyncWithHttpInfo (string format, string apikey, string mailingListID, CreatingACustomFieldRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->CreatingACustomField");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->CreatingACustomField");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling MailingListsApi->CreatingACustomField");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MailingListsApi->CreatingACustomField");

            var localVarPath = "/lists/{MailingListID}/customfields/create.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatingACustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatingACustomFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreatingACustomFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatingACustomFieldResponse)));
        }

        /// <summary>
        /// Creating a mailing list Creates a new empty mailing list in your account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>CreatingAMailingListResponse</returns>
        public CreatingAMailingListResponse CreatingAMailingList (string format, string apikey, CreatingAMailingListRequest body)
        {
             ApiResponse<CreatingAMailingListResponse> localVarResponse = CreatingAMailingListWithHttpInfo(format, apikey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Creating a mailing list Creates a new empty mailing list in your account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CreatingAMailingListResponse</returns>
        public ApiResponse< CreatingAMailingListResponse > CreatingAMailingListWithHttpInfo (string format, string apikey, CreatingAMailingListRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->CreatingAMailingList");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->CreatingAMailingList");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MailingListsApi->CreatingAMailingList");

            var localVarPath = "/lists/create.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatingAMailingList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatingAMailingListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreatingAMailingListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatingAMailingListResponse)));
        }

        /// <summary>
        /// Creating a mailing list Creates a new empty mailing list in your account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of CreatingAMailingListResponse</returns>
        public async System.Threading.Tasks.Task<CreatingAMailingListResponse> CreatingAMailingListAsync (string format, string apikey, CreatingAMailingListRequest body)
        {
             ApiResponse<CreatingAMailingListResponse> localVarResponse = await CreatingAMailingListAsyncWithHttpInfo(format, apikey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Creating a mailing list Creates a new empty mailing list in your account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CreatingAMailingListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreatingAMailingListResponse>> CreatingAMailingListAsyncWithHttpInfo (string format, string apikey, CreatingAMailingListRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->CreatingAMailingList");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->CreatingAMailingList");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MailingListsApi->CreatingAMailingList");

            var localVarPath = "/lists/create.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatingAMailingList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreatingAMailingListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreatingAMailingListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatingAMailingListResponse)));
        }

        /// <summary>
        /// Deleting a mailing list Deletes a mailing list from your account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be deleted.</param>
        /// <returns>DeletingAMailingListResponse</returns>
        public DeletingAMailingListResponse DeletingAMailingList (string format, string apikey, string mailingListID)
        {
             ApiResponse<DeletingAMailingListResponse> localVarResponse = DeletingAMailingListWithHttpInfo(format, apikey, mailingListID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deleting a mailing list Deletes a mailing list from your account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be deleted.</param>
        /// <returns>ApiResponse of DeletingAMailingListResponse</returns>
        public ApiResponse< DeletingAMailingListResponse > DeletingAMailingListWithHttpInfo (string format, string apikey, string mailingListID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->DeletingAMailingList");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->DeletingAMailingList");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling MailingListsApi->DeletingAMailingList");

            var localVarPath = "/lists/{MailingListID}/delete.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletingAMailingList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletingAMailingListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletingAMailingListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletingAMailingListResponse)));
        }

        /// <summary>
        /// Deleting a mailing list Deletes a mailing list from your account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be deleted.</param>
        /// <returns>Task of DeletingAMailingListResponse</returns>
        public async System.Threading.Tasks.Task<DeletingAMailingListResponse> DeletingAMailingListAsync (string format, string apikey, string mailingListID)
        {
             ApiResponse<DeletingAMailingListResponse> localVarResponse = await DeletingAMailingListAsyncWithHttpInfo(format, apikey, mailingListID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deleting a mailing list Deletes a mailing list from your account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be deleted.</param>
        /// <returns>Task of ApiResponse (DeletingAMailingListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeletingAMailingListResponse>> DeletingAMailingListAsyncWithHttpInfo (string format, string apikey, string mailingListID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->DeletingAMailingList");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->DeletingAMailingList");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling MailingListsApi->DeletingAMailingList");

            var localVarPath = "/lists/{MailingListID}/delete.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletingAMailingList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeletingAMailingListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeletingAMailingListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeletingAMailingListResponse)));
        }

        /// <summary>
        /// Getting all active mailing lists Gets a list of your active mailing lists in your account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>GettingAllActiveMailingListsResponse</returns>
        public GettingAllActiveMailingListsResponse GettingAllActiveMailingLists (string format, string apikey, string withStatistics = null, string shortBy = null, string sortMethod = null)
        {
             ApiResponse<GettingAllActiveMailingListsResponse> localVarResponse = GettingAllActiveMailingListsWithHttpInfo(format, apikey, withStatistics, shortBy, sortMethod);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all active mailing lists Gets a list of your active mailing lists in your account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>ApiResponse of GettingAllActiveMailingListsResponse</returns>
        public ApiResponse< GettingAllActiveMailingListsResponse > GettingAllActiveMailingListsWithHttpInfo (string format, string apikey, string withStatistics = null, string shortBy = null, string sortMethod = null)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->GettingAllActiveMailingLists");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->GettingAllActiveMailingLists");

            var localVarPath = "/lists.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (withStatistics != null) localVarQueryParams.Add("WithStatistics", Configuration.ApiClient.ParameterToString(withStatistics)); // query parameter
            if (shortBy != null) localVarQueryParams.Add("ShortBy", Configuration.ApiClient.ParameterToString(shortBy)); // query parameter
            if (sortMethod != null) localVarQueryParams.Add("SortMethod", Configuration.ApiClient.ParameterToString(sortMethod)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingAllActiveMailingLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingAllActiveMailingListsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingAllActiveMailingListsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingAllActiveMailingListsResponse)));
        }

        /// <summary>
        /// Getting all active mailing lists Gets a list of your active mailing lists in your account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>Task of GettingAllActiveMailingListsResponse</returns>
        public async System.Threading.Tasks.Task<GettingAllActiveMailingListsResponse> GettingAllActiveMailingListsAsync (string format, string apikey, string withStatistics = null, string shortBy = null, string sortMethod = null)
        {
             ApiResponse<GettingAllActiveMailingListsResponse> localVarResponse = await GettingAllActiveMailingListsAsyncWithHttpInfo(format, apikey, withStatistics, shortBy, sortMethod);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all active mailing lists Gets a list of your active mailing lists in your account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>Task of ApiResponse (GettingAllActiveMailingListsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GettingAllActiveMailingListsResponse>> GettingAllActiveMailingListsAsyncWithHttpInfo (string format, string apikey, string withStatistics = null, string shortBy = null, string sortMethod = null)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->GettingAllActiveMailingLists");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->GettingAllActiveMailingLists");

            var localVarPath = "/lists.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (withStatistics != null) localVarQueryParams.Add("WithStatistics", Configuration.ApiClient.ParameterToString(withStatistics)); // query parameter
            if (shortBy != null) localVarQueryParams.Add("ShortBy", Configuration.ApiClient.ParameterToString(shortBy)); // query parameter
            if (sortMethod != null) localVarQueryParams.Add("SortMethod", Configuration.ApiClient.ParameterToString(sortMethod)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingAllActiveMailingLists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingAllActiveMailingListsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingAllActiveMailingListsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingAllActiveMailingListsResponse)));
        }

        /// <summary>
        /// Getting all active mailing lists with paging Gets a list of your active mailing lists in your account. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page that you want to get.</param>
        /// <param name="pageSize">Lists Per Page.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>GettingAllActiveMailingListsWithPagingResponse</returns>
        public GettingAllActiveMailingListsWithPagingResponse GettingAllActiveMailingListsWithPaging (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null)
        {
             ApiResponse<GettingAllActiveMailingListsWithPagingResponse> localVarResponse = GettingAllActiveMailingListsWithPagingWithHttpInfo(format, apikey, page, pageSize, shortBy, sortMethod);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting all active mailing lists with paging Gets a list of your active mailing lists in your account. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page that you want to get.</param>
        /// <param name="pageSize">Lists Per Page.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>ApiResponse of GettingAllActiveMailingListsWithPagingResponse</returns>
        public ApiResponse< GettingAllActiveMailingListsWithPagingResponse > GettingAllActiveMailingListsWithPagingWithHttpInfo (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->GettingAllActiveMailingListsWithPaging");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->GettingAllActiveMailingListsWithPaging");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling MailingListsApi->GettingAllActiveMailingListsWithPaging");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling MailingListsApi->GettingAllActiveMailingListsWithPaging");

            var localVarPath = "/lists/{Page}/{PageSize}.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (page != null) localVarPathParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (shortBy != null) localVarQueryParams.Add("ShortBy", Configuration.ApiClient.ParameterToString(shortBy)); // query parameter
            if (sortMethod != null) localVarQueryParams.Add("SortMethod", Configuration.ApiClient.ParameterToString(sortMethod)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingAllActiveMailingListsWithPaging", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingAllActiveMailingListsWithPagingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingAllActiveMailingListsWithPagingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingAllActiveMailingListsWithPagingResponse)));
        }

        /// <summary>
        /// Getting all active mailing lists with paging Gets a list of your active mailing lists in your account. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page that you want to get.</param>
        /// <param name="pageSize">Lists Per Page.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>Task of GettingAllActiveMailingListsWithPagingResponse</returns>
        public async System.Threading.Tasks.Task<GettingAllActiveMailingListsWithPagingResponse> GettingAllActiveMailingListsWithPagingAsync (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null)
        {
             ApiResponse<GettingAllActiveMailingListsWithPagingResponse> localVarResponse = await GettingAllActiveMailingListsWithPagingAsyncWithHttpInfo(format, apikey, page, pageSize, shortBy, sortMethod);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting all active mailing lists with paging Gets a list of your active mailing lists in your account. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="page">The page that you want to get.</param>
        /// <param name="pageSize">Lists Per Page.</param>
        /// <param name="shortBy">The name of the campaign property to sort results by. If not specified, results will be sorted by the CreatedOn property (optional)</param>
        /// <param name="sortMethod">The method to sort results: ASC for ascending, DESC for descending. If not specified, &#x60;ASC&#x60; will be assumed (optional)</param>
        /// <returns>Task of ApiResponse (GettingAllActiveMailingListsWithPagingResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GettingAllActiveMailingListsWithPagingResponse>> GettingAllActiveMailingListsWithPagingAsyncWithHttpInfo (string format, string apikey, double? page, double? pageSize, string shortBy = null, string sortMethod = null)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->GettingAllActiveMailingListsWithPaging");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->GettingAllActiveMailingListsWithPaging");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling MailingListsApi->GettingAllActiveMailingListsWithPaging");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling MailingListsApi->GettingAllActiveMailingListsWithPaging");

            var localVarPath = "/lists/{Page}/{PageSize}.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (page != null) localVarPathParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (shortBy != null) localVarQueryParams.Add("ShortBy", Configuration.ApiClient.ParameterToString(shortBy)); // query parameter
            if (sortMethod != null) localVarQueryParams.Add("SortMethod", Configuration.ApiClient.ParameterToString(sortMethod)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingAllActiveMailingListsWithPaging", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingAllActiveMailingListsWithPagingResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingAllActiveMailingListsWithPagingResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingAllActiveMailingListsWithPagingResponse)));
        }

        /// <summary>
        /// Getting mailing list details Gets details for a given mailing list. You may include subscriber statistics in your results or not. Any segments existing for the requested mailing list will not be included in the results.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to be returned.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <returns>GettingMailingListDetailsResponse</returns>
        public GettingMailingListDetailsResponse GettingMailingListDetails (string format, string mailingListID, string apikey, string withStatistics = null)
        {
             ApiResponse<GettingMailingListDetailsResponse> localVarResponse = GettingMailingListDetailsWithHttpInfo(format, mailingListID, apikey, withStatistics);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting mailing list details Gets details for a given mailing list. You may include subscriber statistics in your results or not. Any segments existing for the requested mailing list will not be included in the results.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to be returned.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <returns>ApiResponse of GettingMailingListDetailsResponse</returns>
        public ApiResponse< GettingMailingListDetailsResponse > GettingMailingListDetailsWithHttpInfo (string format, string mailingListID, string apikey, string withStatistics = null)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->GettingMailingListDetails");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling MailingListsApi->GettingMailingListDetails");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->GettingMailingListDetails");

            var localVarPath = "/lists/{MailingListID}/details.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (withStatistics != null) localVarQueryParams.Add("WithStatistics", Configuration.ApiClient.ParameterToString(withStatistics)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingMailingListDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingMailingListDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingMailingListDetailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingMailingListDetailsResponse)));
        }

        /// <summary>
        /// Getting mailing list details Gets details for a given mailing list. You may include subscriber statistics in your results or not. Any segments existing for the requested mailing list will not be included in the results.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to be returned.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <returns>Task of GettingMailingListDetailsResponse</returns>
        public async System.Threading.Tasks.Task<GettingMailingListDetailsResponse> GettingMailingListDetailsAsync (string format, string mailingListID, string apikey, string withStatistics = null)
        {
             ApiResponse<GettingMailingListDetailsResponse> localVarResponse = await GettingMailingListDetailsAsyncWithHttpInfo(format, mailingListID, apikey, withStatistics);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting mailing list details Gets details for a given mailing list. You may include subscriber statistics in your results or not. Any segments existing for the requested mailing list will not be included in the results.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to be returned.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="withStatistics">Specifies whether to fetch statistics for the subscribers or not. If omitted, results will be returned with statistics by default. (optional)</param>
        /// <returns>Task of ApiResponse (GettingMailingListDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GettingMailingListDetailsResponse>> GettingMailingListDetailsAsyncWithHttpInfo (string format, string mailingListID, string apikey, string withStatistics = null)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->GettingMailingListDetails");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling MailingListsApi->GettingMailingListDetails");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->GettingMailingListDetails");

            var localVarPath = "/lists/{MailingListID}/details.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (withStatistics != null) localVarQueryParams.Add("WithStatistics", Configuration.ApiClient.ParameterToString(withStatistics)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingMailingListDetails", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingMailingListDetailsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingMailingListDetailsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingMailingListDetailsResponse)));
        }

        /// <summary>
        /// Removing a custom field Removes a custom field definition from the specified mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be deleted.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <returns>RemovingACustomFieldResponse</returns>
        public RemovingACustomFieldResponse RemovingACustomField (string format, string customFieldID, string apikey, string mailingListID)
        {
             ApiResponse<RemovingACustomFieldResponse> localVarResponse = RemovingACustomFieldWithHttpInfo(format, customFieldID, apikey, mailingListID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removing a custom field Removes a custom field definition from the specified mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be deleted.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <returns>ApiResponse of RemovingACustomFieldResponse</returns>
        public ApiResponse< RemovingACustomFieldResponse > RemovingACustomFieldWithHttpInfo (string format, string customFieldID, string apikey, string mailingListID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->RemovingACustomField");
            // verify the required parameter 'customFieldID' is set
            if (customFieldID == null)
                throw new ApiException(400, "Missing required parameter 'customFieldID' when calling MailingListsApi->RemovingACustomField");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->RemovingACustomField");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling MailingListsApi->RemovingACustomField");

            var localVarPath = "/lists/{MailingListID}/customfields/{CustomFieldID}/delete.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (customFieldID != null) localVarPathParams.Add("CustomFieldID", Configuration.ApiClient.ParameterToString(customFieldID)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovingACustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemovingACustomFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemovingACustomFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemovingACustomFieldResponse)));
        }

        /// <summary>
        /// Removing a custom field Removes a custom field definition from the specified mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be deleted.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <returns>Task of RemovingACustomFieldResponse</returns>
        public async System.Threading.Tasks.Task<RemovingACustomFieldResponse> RemovingACustomFieldAsync (string format, string customFieldID, string apikey, string mailingListID)
        {
             ApiResponse<RemovingACustomFieldResponse> localVarResponse = await RemovingACustomFieldAsyncWithHttpInfo(format, customFieldID, apikey, mailingListID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removing a custom field Removes a custom field definition from the specified mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be deleted.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <returns>Task of ApiResponse (RemovingACustomFieldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemovingACustomFieldResponse>> RemovingACustomFieldAsyncWithHttpInfo (string format, string customFieldID, string apikey, string mailingListID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->RemovingACustomField");
            // verify the required parameter 'customFieldID' is set
            if (customFieldID == null)
                throw new ApiException(400, "Missing required parameter 'customFieldID' when calling MailingListsApi->RemovingACustomField");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->RemovingACustomField");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling MailingListsApi->RemovingACustomField");

            var localVarPath = "/lists/{MailingListID}/customfields/{CustomFieldID}/delete.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (customFieldID != null) localVarPathParams.Add("CustomFieldID", Configuration.ApiClient.ParameterToString(customFieldID)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovingACustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemovingACustomFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemovingACustomFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemovingACustomFieldResponse)));
        }

        /// <summary>
        /// Updating a custom field Updates the properties of an existing custom field in the specified mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be updated.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <param name="body"></param>
        /// <returns>UpdatingACustomFieldResponse</returns>
        public UpdatingACustomFieldResponse UpdatingACustomField (string format, string customFieldID, string apikey, string mailingListID, UpdatingACustomFieldRequest body)
        {
             ApiResponse<UpdatingACustomFieldResponse> localVarResponse = UpdatingACustomFieldWithHttpInfo(format, customFieldID, apikey, mailingListID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a custom field Updates the properties of an existing custom field in the specified mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be updated.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdatingACustomFieldResponse</returns>
        public ApiResponse< UpdatingACustomFieldResponse > UpdatingACustomFieldWithHttpInfo (string format, string customFieldID, string apikey, string mailingListID, UpdatingACustomFieldRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->UpdatingACustomField");
            // verify the required parameter 'customFieldID' is set
            if (customFieldID == null)
                throw new ApiException(400, "Missing required parameter 'customFieldID' when calling MailingListsApi->UpdatingACustomField");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->UpdatingACustomField");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling MailingListsApi->UpdatingACustomField");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MailingListsApi->UpdatingACustomField");

            var localVarPath = "/lists/{MailingListID}/customfields/{CustomFieldID}/update.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (customFieldID != null) localVarPathParams.Add("CustomFieldID", Configuration.ApiClient.ParameterToString(customFieldID)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatingACustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatingACustomFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatingACustomFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatingACustomFieldResponse)));
        }

        /// <summary>
        /// Updating a custom field Updates the properties of an existing custom field in the specified mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be updated.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <param name="body"></param>
        /// <returns>Task of UpdatingACustomFieldResponse</returns>
        public async System.Threading.Tasks.Task<UpdatingACustomFieldResponse> UpdatingACustomFieldAsync (string format, string customFieldID, string apikey, string mailingListID, UpdatingACustomFieldRequest body)
        {
             ApiResponse<UpdatingACustomFieldResponse> localVarResponse = await UpdatingACustomFieldAsyncWithHttpInfo(format, customFieldID, apikey, mailingListID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a custom field Updates the properties of an existing custom field in the specified mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="customFieldID">The ID of the custom field to be updated.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the custom field belongs.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdatingACustomFieldResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatingACustomFieldResponse>> UpdatingACustomFieldAsyncWithHttpInfo (string format, string customFieldID, string apikey, string mailingListID, UpdatingACustomFieldRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->UpdatingACustomField");
            // verify the required parameter 'customFieldID' is set
            if (customFieldID == null)
                throw new ApiException(400, "Missing required parameter 'customFieldID' when calling MailingListsApi->UpdatingACustomField");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->UpdatingACustomField");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling MailingListsApi->UpdatingACustomField");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MailingListsApi->UpdatingACustomField");

            var localVarPath = "/lists/{MailingListID}/customfields/{CustomFieldID}/update.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (customFieldID != null) localVarPathParams.Add("CustomFieldID", Configuration.ApiClient.ParameterToString(customFieldID)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatingACustomField", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatingACustomFieldResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatingACustomFieldResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatingACustomFieldResponse)));
        }

        /// <summary>
        /// Updating a mailing list Updates the properties of an existing mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be updated.</param>
        /// <param name="body"></param>
        /// <returns>UpdatingAMailingListResponse</returns>
        public UpdatingAMailingListResponse UpdatingAMailingList (string format, string apikey, string mailingListID, UpdatingAMailingListRequest body)
        {
             ApiResponse<UpdatingAMailingListResponse> localVarResponse = UpdatingAMailingListWithHttpInfo(format, apikey, mailingListID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a mailing list Updates the properties of an existing mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be updated.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdatingAMailingListResponse</returns>
        public ApiResponse< UpdatingAMailingListResponse > UpdatingAMailingListWithHttpInfo (string format, string apikey, string mailingListID, UpdatingAMailingListRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->UpdatingAMailingList");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->UpdatingAMailingList");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling MailingListsApi->UpdatingAMailingList");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MailingListsApi->UpdatingAMailingList");

            var localVarPath = "/lists/{MailingListID}/update.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatingAMailingList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatingAMailingListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatingAMailingListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatingAMailingListResponse)));
        }

        /// <summary>
        /// Updating a mailing list Updates the properties of an existing mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be updated.</param>
        /// <param name="body"></param>
        /// <returns>Task of UpdatingAMailingListResponse</returns>
        public async System.Threading.Tasks.Task<UpdatingAMailingListResponse> UpdatingAMailingListAsync (string format, string apikey, string mailingListID, UpdatingAMailingListRequest body)
        {
             ApiResponse<UpdatingAMailingListResponse> localVarResponse = await UpdatingAMailingListAsyncWithHttpInfo(format, apikey, mailingListID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a mailing list Updates the properties of an existing mailing list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to be updated.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdatingAMailingListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatingAMailingListResponse>> UpdatingAMailingListAsyncWithHttpInfo (string format, string apikey, string mailingListID, UpdatingAMailingListRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling MailingListsApi->UpdatingAMailingList");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling MailingListsApi->UpdatingAMailingList");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling MailingListsApi->UpdatingAMailingList");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling MailingListsApi->UpdatingAMailingList");

            var localVarPath = "/lists/{MailingListID}/update.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatingAMailingList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatingAMailingListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatingAMailingListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatingAMailingListResponse)));
        }

    }
}
