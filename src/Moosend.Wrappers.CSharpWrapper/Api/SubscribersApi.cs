/* 
 * Moosend API
 *
 * TODO: Add a description
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Moosend.Wrappers.CSharpWrapper.Client;
using Moosend.Wrappers.CSharpWrapper.Model;

namespace Moosend.Wrappers.CSharpWrapper.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISubscribersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adding multiple subscribers
        /// </summary>
        /// <remarks>
        /// This method allows you to add multiple subscribers in a mailing list with a single call. If some subscribers already exist with the given email addresses, they will be updated. If you try to add a subscriber with an invalid email address, this attempt will be ignored, as the process will skip to the next subscriber automatically.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>AddingMultipleSubscribersResponse</returns>
        AddingMultipleSubscribersResponse AddingMultipleSubscribers (string format, string apikey, string mailingListID, AddingMultipleSubscribersRequest body);

        /// <summary>
        /// Adding multiple subscribers
        /// </summary>
        /// <remarks>
        /// This method allows you to add multiple subscribers in a mailing list with a single call. If some subscribers already exist with the given email addresses, they will be updated. If you try to add a subscriber with an invalid email address, this attempt will be ignored, as the process will skip to the next subscriber automatically.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AddingMultipleSubscribersResponse</returns>
        ApiResponse<AddingMultipleSubscribersResponse> AddingMultipleSubscribersWithHttpInfo (string format, string apikey, string mailingListID, AddingMultipleSubscribersRequest body);
        /// <summary>
        /// Adding subscribers
        /// </summary>
        /// <remarks>
        /// Adds a new subscriber to the specified mailing list. If there is already a subscriber with the specified email address in the list, an update will be performed instead.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to add the new member.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>AddingSubscribersResponse</returns>
        AddingSubscribersResponse AddingSubscribers (string format, string mailingListID, string apikey, AddingSubscribersRequest body);

        /// <summary>
        /// Adding subscribers
        /// </summary>
        /// <remarks>
        /// Adds a new subscriber to the specified mailing list. If there is already a subscriber with the specified email address in the list, an update will be performed instead.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to add the new member.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AddingSubscribersResponse</returns>
        ApiResponse<AddingSubscribersResponse> AddingSubscribersWithHttpInfo (string format, string mailingListID, string apikey, AddingSubscribersRequest body);
        /// <summary>
        /// Get subscriber by email address
        /// </summary>
        /// <remarks>
        /// Searches for a subscriber with the specified email address in the specified mailing list and returns detailed information such as id, name, date created, date unsubscribed, status and custom fields
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the subscriber belongs.</param>
        /// <param name="email">The email of the subscriber.</param>
        /// <returns>GetSubscriberByEmailAddressResponse</returns>
        GetSubscriberByEmailAddressResponse GetSubscriberByEmailAddress (string format, string apikey, string mailingListID, string email);

        /// <summary>
        /// Get subscriber by email address
        /// </summary>
        /// <remarks>
        /// Searches for a subscriber with the specified email address in the specified mailing list and returns detailed information such as id, name, date created, date unsubscribed, status and custom fields
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the subscriber belongs.</param>
        /// <param name="email">The email of the subscriber.</param>
        /// <returns>ApiResponse of GetSubscriberByEmailAddressResponse</returns>
        ApiResponse<GetSubscriberByEmailAddressResponse> GetSubscriberByEmailAddressWithHttpInfo (string format, string apikey, string mailingListID, string email);
        /// <summary>
        /// Get subscriber by id
        /// </summary>
        /// <remarks>
        /// Searches for a subscriber with the specified unique id in the specified mailing list and returns detailed information such as email, name, date created, date unsubscribed, status and custom fields.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to search the subscriber in.</param>
        /// <param name="subscriberID">The id of the subscriber being searched.</param>
        /// <returns>GetSubscriberByIdResponse</returns>
        GetSubscriberByIdResponse GetSubscriberById (string format, string apikey, string mailingListID, string subscriberID);

        /// <summary>
        /// Get subscriber by id
        /// </summary>
        /// <remarks>
        /// Searches for a subscriber with the specified unique id in the specified mailing list and returns detailed information such as email, name, date created, date unsubscribed, status and custom fields.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to search the subscriber in.</param>
        /// <param name="subscriberID">The id of the subscriber being searched.</param>
        /// <returns>ApiResponse of GetSubscriberByIdResponse</returns>
        ApiResponse<GetSubscriberByIdResponse> GetSubscriberByIdWithHttpInfo (string format, string apikey, string mailingListID, string subscriberID);
        /// <summary>
        /// Getting subscribers
        /// </summary>
        /// <remarks>
        /// Gets a list of all subscribers in a given mailing list. You may filter the list by setting a date to fetch those subscribed since then and/or by their status. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list where the subscribers belong.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="status">Specifies what type of subscriber statistics results will be returned.</param>
        /// <param name="page">Specifies the page of subscriber statistics results will be returned. (optional)</param>
        /// <param name="pageSize">Specifies the page size of subscriber statistics results will be returned. (optional)</param>
        /// <returns>GettingSubscribersResponse</returns>
        GettingSubscribersResponse GettingSubscribers (string format, string mailingListID, string apikey, string status, double? page = null, double? pageSize = null);

        /// <summary>
        /// Getting subscribers
        /// </summary>
        /// <remarks>
        /// Gets a list of all subscribers in a given mailing list. You may filter the list by setting a date to fetch those subscribed since then and/or by their status. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list where the subscribers belong.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="status">Specifies what type of subscriber statistics results will be returned.</param>
        /// <param name="page">Specifies the page of subscriber statistics results will be returned. (optional)</param>
        /// <param name="pageSize">Specifies the page size of subscriber statistics results will be returned. (optional)</param>
        /// <returns>ApiResponse of GettingSubscribersResponse</returns>
        ApiResponse<GettingSubscribersResponse> GettingSubscribersWithHttpInfo (string format, string mailingListID, string apikey, string status, double? page = null, double? pageSize = null);
        /// <summary>
        /// Removing a subscriber
        /// </summary>
        /// <remarks>
        /// Removes a subscriber from the specified mailing list permanently (without moving to the suppression list).
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>RemovingASubscriberResponse</returns>
        RemovingASubscriberResponse RemovingASubscriber (string format, string apikey, string mailingListID, RemovingASubscriberRequest body);

        /// <summary>
        /// Removing a subscriber
        /// </summary>
        /// <remarks>
        /// Removes a subscriber from the specified mailing list permanently (without moving to the suppression list).
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RemovingASubscriberResponse</returns>
        ApiResponse<RemovingASubscriberResponse> RemovingASubscriberWithHttpInfo (string format, string apikey, string mailingListID, RemovingASubscriberRequest body);
        /// <summary>
        /// Removing multiple subscribers
        /// </summary>
        /// <remarks>
        /// Removes a list of subscribers from the specified mailing list permanently (without putting them in the suppression list). Any invalid email addresses specified will be ignored.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscribers from.</param>
        /// <param name="body"></param>
        /// <returns>RemovingMultipleSubscribersResponse</returns>
        RemovingMultipleSubscribersResponse RemovingMultipleSubscribers (string format, string apikey, string mailingListID, RemovingMultipleSubscribersRequest body);

        /// <summary>
        /// Removing multiple subscribers
        /// </summary>
        /// <remarks>
        /// Removes a list of subscribers from the specified mailing list permanently (without putting them in the suppression list). Any invalid email addresses specified will be ignored.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscribers from.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RemovingMultipleSubscribersResponse</returns>
        ApiResponse<RemovingMultipleSubscribersResponse> RemovingMultipleSubscribersWithHttpInfo (string format, string apikey, string mailingListID, RemovingMultipleSubscribersRequest body);
        /// <summary>
        /// Unsubscribing subscribers from account
        /// </summary>
        /// <remarks>
        /// Unsubscribes a subscriber from the account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>UnsubscribingSubscribersFromAccountResponse</returns>
        UnsubscribingSubscribersFromAccountResponse UnsubscribingSubscribersFromAccount (string format, string apikey, UnsubscribingSubscribersFromAccountRequest body);

        /// <summary>
        /// Unsubscribing subscribers from account
        /// </summary>
        /// <remarks>
        /// Unsubscribes a subscriber from the account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UnsubscribingSubscribersFromAccountResponse</returns>
        ApiResponse<UnsubscribingSubscribersFromAccountResponse> UnsubscribingSubscribersFromAccountWithHttpInfo (string format, string apikey, UnsubscribingSubscribersFromAccountRequest body);
        /// <summary>
        /// Unsubscribing subscribers from mailing list
        /// </summary>
        /// <remarks>
        /// Unsubscribes a subscriber from the specified mailing list. The subscriber is not deleted, but moved to the suppression list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>UnsubscribingSubscribersFromMailingListResponse</returns>
        UnsubscribingSubscribersFromMailingListResponse UnsubscribingSubscribersFromMailingList (string format, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListRequest body);

        /// <summary>
        /// Unsubscribing subscribers from mailing list
        /// </summary>
        /// <remarks>
        /// Unsubscribes a subscriber from the specified mailing list. The subscriber is not deleted, but moved to the suppression list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UnsubscribingSubscribersFromMailingListResponse</returns>
        ApiResponse<UnsubscribingSubscribersFromMailingListResponse> UnsubscribingSubscribersFromMailingListWithHttpInfo (string format, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListRequest body);
        /// <summary>
        /// Unsubscribing subscribers from mailing list and a specified campaign
        /// </summary>
        /// <remarks>
        /// Unsubscribes a subscriber from the specified mailing list and the specified campaign. The subscriber is not deleted, but moved to the suppression list.  This call will take into account the setting you have in \&quot;suppression list and unsubscribe settings\&quot; and will remove the subscriber from all other mailing lists or not accordingly.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID">The ID of the campaign that was sent to the specific mailing list.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse</returns>
        UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign (string format, string campaignID, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest body);

        /// <summary>
        /// Unsubscribing subscribers from mailing list and a specified campaign
        /// </summary>
        /// <remarks>
        /// Unsubscribes a subscriber from the specified mailing list and the specified campaign. The subscriber is not deleted, but moved to the suppression list.  This call will take into account the setting you have in \&quot;suppression list and unsubscribe settings\&quot; and will remove the subscriber from all other mailing lists or not accordingly.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID">The ID of the campaign that was sent to the specific mailing list.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse</returns>
        ApiResponse<UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse> UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignWithHttpInfo (string format, string campaignID, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest body);
        /// <summary>
        /// Updating a subscriber
        /// </summary>
        /// <remarks>
        /// Updates a subscriber in the specified mailing list. You can even update the subscribers email, if he has not unsubscribed.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list that contains the subscriber</param>
        /// <param name="subscriberID">The id of the subscriber to be updated</param>
        /// <param name="body"></param>
        /// <returns>UpdatingASubscriberResponse</returns>
        UpdatingASubscriberResponse UpdatingASubscriber (string format, string apikey, string mailingListID, string subscriberID, UpdatingASubscriberRequest body);

        /// <summary>
        /// Updating a subscriber
        /// </summary>
        /// <remarks>
        /// Updates a subscriber in the specified mailing list. You can even update the subscribers email, if he has not unsubscribed.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list that contains the subscriber</param>
        /// <param name="subscriberID">The id of the subscriber to be updated</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdatingASubscriberResponse</returns>
        ApiResponse<UpdatingASubscriberResponse> UpdatingASubscriberWithHttpInfo (string format, string apikey, string mailingListID, string subscriberID, UpdatingASubscriberRequest body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Adding multiple subscribers
        /// </summary>
        /// <remarks>
        /// This method allows you to add multiple subscribers in a mailing list with a single call. If some subscribers already exist with the given email addresses, they will be updated. If you try to add a subscriber with an invalid email address, this attempt will be ignored, as the process will skip to the next subscriber automatically.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>Task of AddingMultipleSubscribersResponse</returns>
        System.Threading.Tasks.Task<AddingMultipleSubscribersResponse> AddingMultipleSubscribersAsync (string format, string apikey, string mailingListID, AddingMultipleSubscribersRequest body);

        /// <summary>
        /// Adding multiple subscribers
        /// </summary>
        /// <remarks>
        /// This method allows you to add multiple subscribers in a mailing list with a single call. If some subscribers already exist with the given email addresses, they will be updated. If you try to add a subscriber with an invalid email address, this attempt will be ignored, as the process will skip to the next subscriber automatically.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AddingMultipleSubscribersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddingMultipleSubscribersResponse>> AddingMultipleSubscribersAsyncWithHttpInfo (string format, string apikey, string mailingListID, AddingMultipleSubscribersRequest body);
        /// <summary>
        /// Adding subscribers
        /// </summary>
        /// <remarks>
        /// Adds a new subscriber to the specified mailing list. If there is already a subscriber with the specified email address in the list, an update will be performed instead.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to add the new member.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of AddingSubscribersResponse</returns>
        System.Threading.Tasks.Task<AddingSubscribersResponse> AddingSubscribersAsync (string format, string mailingListID, string apikey, AddingSubscribersRequest body);

        /// <summary>
        /// Adding subscribers
        /// </summary>
        /// <remarks>
        /// Adds a new subscriber to the specified mailing list. If there is already a subscriber with the specified email address in the list, an update will be performed instead.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to add the new member.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AddingSubscribersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddingSubscribersResponse>> AddingSubscribersAsyncWithHttpInfo (string format, string mailingListID, string apikey, AddingSubscribersRequest body);
        /// <summary>
        /// Get subscriber by email address
        /// </summary>
        /// <remarks>
        /// Searches for a subscriber with the specified email address in the specified mailing list and returns detailed information such as id, name, date created, date unsubscribed, status and custom fields
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the subscriber belongs.</param>
        /// <param name="email">The email of the subscriber.</param>
        /// <returns>Task of GetSubscriberByEmailAddressResponse</returns>
        System.Threading.Tasks.Task<GetSubscriberByEmailAddressResponse> GetSubscriberByEmailAddressAsync (string format, string apikey, string mailingListID, string email);

        /// <summary>
        /// Get subscriber by email address
        /// </summary>
        /// <remarks>
        /// Searches for a subscriber with the specified email address in the specified mailing list and returns detailed information such as id, name, date created, date unsubscribed, status and custom fields
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the subscriber belongs.</param>
        /// <param name="email">The email of the subscriber.</param>
        /// <returns>Task of ApiResponse (GetSubscriberByEmailAddressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSubscriberByEmailAddressResponse>> GetSubscriberByEmailAddressAsyncWithHttpInfo (string format, string apikey, string mailingListID, string email);
        /// <summary>
        /// Get subscriber by id
        /// </summary>
        /// <remarks>
        /// Searches for a subscriber with the specified unique id in the specified mailing list and returns detailed information such as email, name, date created, date unsubscribed, status and custom fields.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to search the subscriber in.</param>
        /// <param name="subscriberID">The id of the subscriber being searched.</param>
        /// <returns>Task of GetSubscriberByIdResponse</returns>
        System.Threading.Tasks.Task<GetSubscriberByIdResponse> GetSubscriberByIdAsync (string format, string apikey, string mailingListID, string subscriberID);

        /// <summary>
        /// Get subscriber by id
        /// </summary>
        /// <remarks>
        /// Searches for a subscriber with the specified unique id in the specified mailing list and returns detailed information such as email, name, date created, date unsubscribed, status and custom fields.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to search the subscriber in.</param>
        /// <param name="subscriberID">The id of the subscriber being searched.</param>
        /// <returns>Task of ApiResponse (GetSubscriberByIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetSubscriberByIdResponse>> GetSubscriberByIdAsyncWithHttpInfo (string format, string apikey, string mailingListID, string subscriberID);
        /// <summary>
        /// Getting subscribers
        /// </summary>
        /// <remarks>
        /// Gets a list of all subscribers in a given mailing list. You may filter the list by setting a date to fetch those subscribed since then and/or by their status. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list where the subscribers belong.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="status">Specifies what type of subscriber statistics results will be returned.</param>
        /// <param name="page">Specifies the page of subscriber statistics results will be returned. (optional)</param>
        /// <param name="pageSize">Specifies the page size of subscriber statistics results will be returned. (optional)</param>
        /// <returns>Task of GettingSubscribersResponse</returns>
        System.Threading.Tasks.Task<GettingSubscribersResponse> GettingSubscribersAsync (string format, string mailingListID, string apikey, string status, double? page = null, double? pageSize = null);

        /// <summary>
        /// Getting subscribers
        /// </summary>
        /// <remarks>
        /// Gets a list of all subscribers in a given mailing list. You may filter the list by setting a date to fetch those subscribed since then and/or by their status. Because the results for this call could be quite big, paging information is required as input.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list where the subscribers belong.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="status">Specifies what type of subscriber statistics results will be returned.</param>
        /// <param name="page">Specifies the page of subscriber statistics results will be returned. (optional)</param>
        /// <param name="pageSize">Specifies the page size of subscriber statistics results will be returned. (optional)</param>
        /// <returns>Task of ApiResponse (GettingSubscribersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GettingSubscribersResponse>> GettingSubscribersAsyncWithHttpInfo (string format, string mailingListID, string apikey, string status, double? page = null, double? pageSize = null);
        /// <summary>
        /// Removing a subscriber
        /// </summary>
        /// <remarks>
        /// Removes a subscriber from the specified mailing list permanently (without moving to the suppression list).
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>Task of RemovingASubscriberResponse</returns>
        System.Threading.Tasks.Task<RemovingASubscriberResponse> RemovingASubscriberAsync (string format, string apikey, string mailingListID, RemovingASubscriberRequest body);

        /// <summary>
        /// Removing a subscriber
        /// </summary>
        /// <remarks>
        /// Removes a subscriber from the specified mailing list permanently (without moving to the suppression list).
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RemovingASubscriberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemovingASubscriberResponse>> RemovingASubscriberAsyncWithHttpInfo (string format, string apikey, string mailingListID, RemovingASubscriberRequest body);
        /// <summary>
        /// Removing multiple subscribers
        /// </summary>
        /// <remarks>
        /// Removes a list of subscribers from the specified mailing list permanently (without putting them in the suppression list). Any invalid email addresses specified will be ignored.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscribers from.</param>
        /// <param name="body"></param>
        /// <returns>Task of RemovingMultipleSubscribersResponse</returns>
        System.Threading.Tasks.Task<RemovingMultipleSubscribersResponse> RemovingMultipleSubscribersAsync (string format, string apikey, string mailingListID, RemovingMultipleSubscribersRequest body);

        /// <summary>
        /// Removing multiple subscribers
        /// </summary>
        /// <remarks>
        /// Removes a list of subscribers from the specified mailing list permanently (without putting them in the suppression list). Any invalid email addresses specified will be ignored.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscribers from.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RemovingMultipleSubscribersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemovingMultipleSubscribersResponse>> RemovingMultipleSubscribersAsyncWithHttpInfo (string format, string apikey, string mailingListID, RemovingMultipleSubscribersRequest body);
        /// <summary>
        /// Unsubscribing subscribers from account
        /// </summary>
        /// <remarks>
        /// Unsubscribes a subscriber from the account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of UnsubscribingSubscribersFromAccountResponse</returns>
        System.Threading.Tasks.Task<UnsubscribingSubscribersFromAccountResponse> UnsubscribingSubscribersFromAccountAsync (string format, string apikey, UnsubscribingSubscribersFromAccountRequest body);

        /// <summary>
        /// Unsubscribing subscribers from account
        /// </summary>
        /// <remarks>
        /// Unsubscribes a subscriber from the account.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UnsubscribingSubscribersFromAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnsubscribingSubscribersFromAccountResponse>> UnsubscribingSubscribersFromAccountAsyncWithHttpInfo (string format, string apikey, UnsubscribingSubscribersFromAccountRequest body);
        /// <summary>
        /// Unsubscribing subscribers from mailing list
        /// </summary>
        /// <remarks>
        /// Unsubscribes a subscriber from the specified mailing list. The subscriber is not deleted, but moved to the suppression list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>Task of UnsubscribingSubscribersFromMailingListResponse</returns>
        System.Threading.Tasks.Task<UnsubscribingSubscribersFromMailingListResponse> UnsubscribingSubscribersFromMailingListAsync (string format, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListRequest body);

        /// <summary>
        /// Unsubscribing subscribers from mailing list
        /// </summary>
        /// <remarks>
        /// Unsubscribes a subscriber from the specified mailing list. The subscriber is not deleted, but moved to the suppression list.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UnsubscribingSubscribersFromMailingListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnsubscribingSubscribersFromMailingListResponse>> UnsubscribingSubscribersFromMailingListAsyncWithHttpInfo (string format, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListRequest body);
        /// <summary>
        /// Unsubscribing subscribers from mailing list and a specified campaign
        /// </summary>
        /// <remarks>
        /// Unsubscribes a subscriber from the specified mailing list and the specified campaign. The subscriber is not deleted, but moved to the suppression list.  This call will take into account the setting you have in \&quot;suppression list and unsubscribe settings\&quot; and will remove the subscriber from all other mailing lists or not accordingly.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID">The ID of the campaign that was sent to the specific mailing list.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>Task of UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse</returns>
        System.Threading.Tasks.Task<UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse> UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignAsync (string format, string campaignID, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest body);

        /// <summary>
        /// Unsubscribing subscribers from mailing list and a specified campaign
        /// </summary>
        /// <remarks>
        /// Unsubscribes a subscriber from the specified mailing list and the specified campaign. The subscriber is not deleted, but moved to the suppression list.  This call will take into account the setting you have in \&quot;suppression list and unsubscribe settings\&quot; and will remove the subscriber from all other mailing lists or not accordingly.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID">The ID of the campaign that was sent to the specific mailing list.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse>> UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignAsyncWithHttpInfo (string format, string campaignID, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest body);
        /// <summary>
        /// Updating a subscriber
        /// </summary>
        /// <remarks>
        /// Updates a subscriber in the specified mailing list. You can even update the subscribers email, if he has not unsubscribed.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list that contains the subscriber</param>
        /// <param name="subscriberID">The id of the subscriber to be updated</param>
        /// <param name="body"></param>
        /// <returns>Task of UpdatingASubscriberResponse</returns>
        System.Threading.Tasks.Task<UpdatingASubscriberResponse> UpdatingASubscriberAsync (string format, string apikey, string mailingListID, string subscriberID, UpdatingASubscriberRequest body);

        /// <summary>
        /// Updating a subscriber
        /// </summary>
        /// <remarks>
        /// Updates a subscriber in the specified mailing list. You can even update the subscribers email, if he has not unsubscribed.
        /// </remarks>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list that contains the subscriber</param>
        /// <param name="subscriberID">The id of the subscriber to be updated</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdatingASubscriberResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdatingASubscriberResponse>> UpdatingASubscriberAsyncWithHttpInfo (string format, string apikey, string mailingListID, string subscriberID, UpdatingASubscriberRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SubscribersApi : ISubscribersApi
    {
        private Moosend.Wrappers.CSharpWrapper.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SubscribersApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Moosend.Wrappers.CSharpWrapper.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SubscribersApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Moosend.Wrappers.CSharpWrapper.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Moosend.Wrappers.CSharpWrapper.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Adding multiple subscribers This method allows you to add multiple subscribers in a mailing list with a single call. If some subscribers already exist with the given email addresses, they will be updated. If you try to add a subscriber with an invalid email address, this attempt will be ignored, as the process will skip to the next subscriber automatically.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>AddingMultipleSubscribersResponse</returns>
        public AddingMultipleSubscribersResponse AddingMultipleSubscribers (string format, string apikey, string mailingListID, AddingMultipleSubscribersRequest body)
        {
             ApiResponse<AddingMultipleSubscribersResponse> localVarResponse = AddingMultipleSubscribersWithHttpInfo(format, apikey, mailingListID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adding multiple subscribers This method allows you to add multiple subscribers in a mailing list with a single call. If some subscribers already exist with the given email addresses, they will be updated. If you try to add a subscriber with an invalid email address, this attempt will be ignored, as the process will skip to the next subscriber automatically.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AddingMultipleSubscribersResponse</returns>
        public ApiResponse< AddingMultipleSubscribersResponse > AddingMultipleSubscribersWithHttpInfo (string format, string apikey, string mailingListID, AddingMultipleSubscribersRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->AddingMultipleSubscribers");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->AddingMultipleSubscribers");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->AddingMultipleSubscribers");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->AddingMultipleSubscribers");

            var localVarPath = "/subscribers/{MailingListID}/subscribe_many.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddingMultipleSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddingMultipleSubscribersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddingMultipleSubscribersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddingMultipleSubscribersResponse)));
        }

        /// <summary>
        /// Adding multiple subscribers This method allows you to add multiple subscribers in a mailing list with a single call. If some subscribers already exist with the given email addresses, they will be updated. If you try to add a subscriber with an invalid email address, this attempt will be ignored, as the process will skip to the next subscriber automatically.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>Task of AddingMultipleSubscribersResponse</returns>
        public async System.Threading.Tasks.Task<AddingMultipleSubscribersResponse> AddingMultipleSubscribersAsync (string format, string apikey, string mailingListID, AddingMultipleSubscribersRequest body)
        {
             ApiResponse<AddingMultipleSubscribersResponse> localVarResponse = await AddingMultipleSubscribersAsyncWithHttpInfo(format, apikey, mailingListID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adding multiple subscribers This method allows you to add multiple subscribers in a mailing list with a single call. If some subscribers already exist with the given email addresses, they will be updated. If you try to add a subscriber with an invalid email address, this attempt will be ignored, as the process will skip to the next subscriber automatically.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AddingMultipleSubscribersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddingMultipleSubscribersResponse>> AddingMultipleSubscribersAsyncWithHttpInfo (string format, string apikey, string mailingListID, AddingMultipleSubscribersRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->AddingMultipleSubscribers");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->AddingMultipleSubscribers");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->AddingMultipleSubscribers");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->AddingMultipleSubscribers");

            var localVarPath = "/subscribers/{MailingListID}/subscribe_many.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddingMultipleSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddingMultipleSubscribersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddingMultipleSubscribersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddingMultipleSubscribersResponse)));
        }

        /// <summary>
        /// Adding subscribers Adds a new subscriber to the specified mailing list. If there is already a subscriber with the specified email address in the list, an update will be performed instead.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to add the new member.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>AddingSubscribersResponse</returns>
        public AddingSubscribersResponse AddingSubscribers (string format, string mailingListID, string apikey, AddingSubscribersRequest body)
        {
             ApiResponse<AddingSubscribersResponse> localVarResponse = AddingSubscribersWithHttpInfo(format, mailingListID, apikey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adding subscribers Adds a new subscriber to the specified mailing list. If there is already a subscriber with the specified email address in the list, an update will be performed instead.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to add the new member.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of AddingSubscribersResponse</returns>
        public ApiResponse< AddingSubscribersResponse > AddingSubscribersWithHttpInfo (string format, string mailingListID, string apikey, AddingSubscribersRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->AddingSubscribers");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->AddingSubscribers");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->AddingSubscribers");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->AddingSubscribers");

            var localVarPath = "/subscribers/{MailingListID}/subscribe.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddingSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddingSubscribersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddingSubscribersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddingSubscribersResponse)));
        }

        /// <summary>
        /// Adding subscribers Adds a new subscriber to the specified mailing list. If there is already a subscriber with the specified email address in the list, an update will be performed instead.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to add the new member.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of AddingSubscribersResponse</returns>
        public async System.Threading.Tasks.Task<AddingSubscribersResponse> AddingSubscribersAsync (string format, string mailingListID, string apikey, AddingSubscribersRequest body)
        {
             ApiResponse<AddingSubscribersResponse> localVarResponse = await AddingSubscribersAsyncWithHttpInfo(format, mailingListID, apikey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adding subscribers Adds a new subscriber to the specified mailing list. If there is already a subscriber with the specified email address in the list, an update will be performed instead.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list to add the new member.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (AddingSubscribersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AddingSubscribersResponse>> AddingSubscribersAsyncWithHttpInfo (string format, string mailingListID, string apikey, AddingSubscribersRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->AddingSubscribers");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->AddingSubscribers");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->AddingSubscribers");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->AddingSubscribers");

            var localVarPath = "/subscribers/{MailingListID}/subscribe.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddingSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AddingSubscribersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (AddingSubscribersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(AddingSubscribersResponse)));
        }

        /// <summary>
        /// Get subscriber by email address Searches for a subscriber with the specified email address in the specified mailing list and returns detailed information such as id, name, date created, date unsubscribed, status and custom fields
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the subscriber belongs.</param>
        /// <param name="email">The email of the subscriber.</param>
        /// <returns>GetSubscriberByEmailAddressResponse</returns>
        public GetSubscriberByEmailAddressResponse GetSubscriberByEmailAddress (string format, string apikey, string mailingListID, string email)
        {
             ApiResponse<GetSubscriberByEmailAddressResponse> localVarResponse = GetSubscriberByEmailAddressWithHttpInfo(format, apikey, mailingListID, email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get subscriber by email address Searches for a subscriber with the specified email address in the specified mailing list and returns detailed information such as id, name, date created, date unsubscribed, status and custom fields
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the subscriber belongs.</param>
        /// <param name="email">The email of the subscriber.</param>
        /// <returns>ApiResponse of GetSubscriberByEmailAddressResponse</returns>
        public ApiResponse< GetSubscriberByEmailAddressResponse > GetSubscriberByEmailAddressWithHttpInfo (string format, string apikey, string mailingListID, string email)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->GetSubscriberByEmailAddress");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->GetSubscriberByEmailAddress");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->GetSubscriberByEmailAddress");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling SubscribersApi->GetSubscriberByEmailAddress");

            var localVarPath = "/subscribers/{MailingListID}/view.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (email != null) localVarQueryParams.Add("Email", Configuration.ApiClient.ParameterToString(email)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriberByEmailAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSubscriberByEmailAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSubscriberByEmailAddressResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubscriberByEmailAddressResponse)));
        }

        /// <summary>
        /// Get subscriber by email address Searches for a subscriber with the specified email address in the specified mailing list and returns detailed information such as id, name, date created, date unsubscribed, status and custom fields
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the subscriber belongs.</param>
        /// <param name="email">The email of the subscriber.</param>
        /// <returns>Task of GetSubscriberByEmailAddressResponse</returns>
        public async System.Threading.Tasks.Task<GetSubscriberByEmailAddressResponse> GetSubscriberByEmailAddressAsync (string format, string apikey, string mailingListID, string email)
        {
             ApiResponse<GetSubscriberByEmailAddressResponse> localVarResponse = await GetSubscriberByEmailAddressAsyncWithHttpInfo(format, apikey, mailingListID, email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get subscriber by email address Searches for a subscriber with the specified email address in the specified mailing list and returns detailed information such as id, name, date created, date unsubscribed, status and custom fields
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list where the subscriber belongs.</param>
        /// <param name="email">The email of the subscriber.</param>
        /// <returns>Task of ApiResponse (GetSubscriberByEmailAddressResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSubscriberByEmailAddressResponse>> GetSubscriberByEmailAddressAsyncWithHttpInfo (string format, string apikey, string mailingListID, string email)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->GetSubscriberByEmailAddress");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->GetSubscriberByEmailAddress");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->GetSubscriberByEmailAddress");
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling SubscribersApi->GetSubscriberByEmailAddress");

            var localVarPath = "/subscribers/{MailingListID}/view.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (email != null) localVarQueryParams.Add("Email", Configuration.ApiClient.ParameterToString(email)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriberByEmailAddress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSubscriberByEmailAddressResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSubscriberByEmailAddressResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubscriberByEmailAddressResponse)));
        }

        /// <summary>
        /// Get subscriber by id Searches for a subscriber with the specified unique id in the specified mailing list and returns detailed information such as email, name, date created, date unsubscribed, status and custom fields.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to search the subscriber in.</param>
        /// <param name="subscriberID">The id of the subscriber being searched.</param>
        /// <returns>GetSubscriberByIdResponse</returns>
        public GetSubscriberByIdResponse GetSubscriberById (string format, string apikey, string mailingListID, string subscriberID)
        {
             ApiResponse<GetSubscriberByIdResponse> localVarResponse = GetSubscriberByIdWithHttpInfo(format, apikey, mailingListID, subscriberID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get subscriber by id Searches for a subscriber with the specified unique id in the specified mailing list and returns detailed information such as email, name, date created, date unsubscribed, status and custom fields.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to search the subscriber in.</param>
        /// <param name="subscriberID">The id of the subscriber being searched.</param>
        /// <returns>ApiResponse of GetSubscriberByIdResponse</returns>
        public ApiResponse< GetSubscriberByIdResponse > GetSubscriberByIdWithHttpInfo (string format, string apikey, string mailingListID, string subscriberID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->GetSubscriberById");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->GetSubscriberById");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->GetSubscriberById");
            // verify the required parameter 'subscriberID' is set
            if (subscriberID == null)
                throw new ApiException(400, "Missing required parameter 'subscriberID' when calling SubscribersApi->GetSubscriberById");

            var localVarPath = "/subscribers/{MailingListID}/find/{SubscriberID}.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (subscriberID != null) localVarPathParams.Add("SubscriberID", Configuration.ApiClient.ParameterToString(subscriberID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriberById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSubscriberByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSubscriberByIdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubscriberByIdResponse)));
        }

        /// <summary>
        /// Get subscriber by id Searches for a subscriber with the specified unique id in the specified mailing list and returns detailed information such as email, name, date created, date unsubscribed, status and custom fields.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to search the subscriber in.</param>
        /// <param name="subscriberID">The id of the subscriber being searched.</param>
        /// <returns>Task of GetSubscriberByIdResponse</returns>
        public async System.Threading.Tasks.Task<GetSubscriberByIdResponse> GetSubscriberByIdAsync (string format, string apikey, string mailingListID, string subscriberID)
        {
             ApiResponse<GetSubscriberByIdResponse> localVarResponse = await GetSubscriberByIdAsyncWithHttpInfo(format, apikey, mailingListID, subscriberID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get subscriber by id Searches for a subscriber with the specified unique id in the specified mailing list and returns detailed information such as email, name, date created, date unsubscribed, status and custom fields.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to search the subscriber in.</param>
        /// <param name="subscriberID">The id of the subscriber being searched.</param>
        /// <returns>Task of ApiResponse (GetSubscriberByIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetSubscriberByIdResponse>> GetSubscriberByIdAsyncWithHttpInfo (string format, string apikey, string mailingListID, string subscriberID)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->GetSubscriberById");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->GetSubscriberById");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->GetSubscriberById");
            // verify the required parameter 'subscriberID' is set
            if (subscriberID == null)
                throw new ApiException(400, "Missing required parameter 'subscriberID' when calling SubscribersApi->GetSubscriberById");

            var localVarPath = "/subscribers/{MailingListID}/find/{SubscriberID}.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (subscriberID != null) localVarPathParams.Add("SubscriberID", Configuration.ApiClient.ParameterToString(subscriberID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubscriberById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetSubscriberByIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetSubscriberByIdResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetSubscriberByIdResponse)));
        }

        /// <summary>
        /// Getting subscribers Gets a list of all subscribers in a given mailing list. You may filter the list by setting a date to fetch those subscribed since then and/or by their status. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list where the subscribers belong.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="status">Specifies what type of subscriber statistics results will be returned.</param>
        /// <param name="page">Specifies the page of subscriber statistics results will be returned. (optional)</param>
        /// <param name="pageSize">Specifies the page size of subscriber statistics results will be returned. (optional)</param>
        /// <returns>GettingSubscribersResponse</returns>
        public GettingSubscribersResponse GettingSubscribers (string format, string mailingListID, string apikey, string status, double? page = null, double? pageSize = null)
        {
             ApiResponse<GettingSubscribersResponse> localVarResponse = GettingSubscribersWithHttpInfo(format, mailingListID, apikey, status, page, pageSize);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Getting subscribers Gets a list of all subscribers in a given mailing list. You may filter the list by setting a date to fetch those subscribed since then and/or by their status. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list where the subscribers belong.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="status">Specifies what type of subscriber statistics results will be returned.</param>
        /// <param name="page">Specifies the page of subscriber statistics results will be returned. (optional)</param>
        /// <param name="pageSize">Specifies the page size of subscriber statistics results will be returned. (optional)</param>
        /// <returns>ApiResponse of GettingSubscribersResponse</returns>
        public ApiResponse< GettingSubscribersResponse > GettingSubscribersWithHttpInfo (string format, string mailingListID, string apikey, string status, double? page = null, double? pageSize = null)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->GettingSubscribers");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->GettingSubscribers");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->GettingSubscribers");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling SubscribersApi->GettingSubscribers");

            var localVarPath = "/lists/{MailingListID}/subscribers/{Status}.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (status != null) localVarPathParams.Add("Status", Configuration.ApiClient.ParameterToString(status)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (page != null) localVarQueryParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingSubscribersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingSubscribersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingSubscribersResponse)));
        }

        /// <summary>
        /// Getting subscribers Gets a list of all subscribers in a given mailing list. You may filter the list by setting a date to fetch those subscribed since then and/or by their status. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list where the subscribers belong.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="status">Specifies what type of subscriber statistics results will be returned.</param>
        /// <param name="page">Specifies the page of subscriber statistics results will be returned. (optional)</param>
        /// <param name="pageSize">Specifies the page size of subscriber statistics results will be returned. (optional)</param>
        /// <returns>Task of GettingSubscribersResponse</returns>
        public async System.Threading.Tasks.Task<GettingSubscribersResponse> GettingSubscribersAsync (string format, string mailingListID, string apikey, string status, double? page = null, double? pageSize = null)
        {
             ApiResponse<GettingSubscribersResponse> localVarResponse = await GettingSubscribersAsyncWithHttpInfo(format, mailingListID, apikey, status, page, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting subscribers Gets a list of all subscribers in a given mailing list. You may filter the list by setting a date to fetch those subscribed since then and/or by their status. Because the results for this call could be quite big, paging information is required as input.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="mailingListID">The ID of the mailing list where the subscribers belong.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="status">Specifies what type of subscriber statistics results will be returned.</param>
        /// <param name="page">Specifies the page of subscriber statistics results will be returned. (optional)</param>
        /// <param name="pageSize">Specifies the page size of subscriber statistics results will be returned. (optional)</param>
        /// <returns>Task of ApiResponse (GettingSubscribersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GettingSubscribersResponse>> GettingSubscribersAsyncWithHttpInfo (string format, string mailingListID, string apikey, string status, double? page = null, double? pageSize = null)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->GettingSubscribers");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->GettingSubscribers");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->GettingSubscribers");
            // verify the required parameter 'status' is set
            if (status == null)
                throw new ApiException(400, "Missing required parameter 'status' when calling SubscribersApi->GettingSubscribers");

            var localVarPath = "/lists/{MailingListID}/subscribers/{Status}.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (status != null) localVarPathParams.Add("Status", Configuration.ApiClient.ParameterToString(status)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (page != null) localVarQueryParams.Add("Page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("PageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GettingSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GettingSubscribersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GettingSubscribersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GettingSubscribersResponse)));
        }

        /// <summary>
        /// Removing a subscriber Removes a subscriber from the specified mailing list permanently (without moving to the suppression list).
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>RemovingASubscriberResponse</returns>
        public RemovingASubscriberResponse RemovingASubscriber (string format, string apikey, string mailingListID, RemovingASubscriberRequest body)
        {
             ApiResponse<RemovingASubscriberResponse> localVarResponse = RemovingASubscriberWithHttpInfo(format, apikey, mailingListID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removing a subscriber Removes a subscriber from the specified mailing list permanently (without moving to the suppression list).
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RemovingASubscriberResponse</returns>
        public ApiResponse< RemovingASubscriberResponse > RemovingASubscriberWithHttpInfo (string format, string apikey, string mailingListID, RemovingASubscriberRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->RemovingASubscriber");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->RemovingASubscriber");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->RemovingASubscriber");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->RemovingASubscriber");

            var localVarPath = "/subscribers/{MailingListID}/remove.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovingASubscriber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemovingASubscriberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemovingASubscriberResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemovingASubscriberResponse)));
        }

        /// <summary>
        /// Removing a subscriber Removes a subscriber from the specified mailing list permanently (without moving to the suppression list).
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>Task of RemovingASubscriberResponse</returns>
        public async System.Threading.Tasks.Task<RemovingASubscriberResponse> RemovingASubscriberAsync (string format, string apikey, string mailingListID, RemovingASubscriberRequest body)
        {
             ApiResponse<RemovingASubscriberResponse> localVarResponse = await RemovingASubscriberAsyncWithHttpInfo(format, apikey, mailingListID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removing a subscriber Removes a subscriber from the specified mailing list permanently (without moving to the suppression list).
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RemovingASubscriberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemovingASubscriberResponse>> RemovingASubscriberAsyncWithHttpInfo (string format, string apikey, string mailingListID, RemovingASubscriberRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->RemovingASubscriber");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->RemovingASubscriber");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->RemovingASubscriber");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->RemovingASubscriber");

            var localVarPath = "/subscribers/{MailingListID}/remove.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovingASubscriber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemovingASubscriberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemovingASubscriberResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemovingASubscriberResponse)));
        }

        /// <summary>
        /// Removing multiple subscribers Removes a list of subscribers from the specified mailing list permanently (without putting them in the suppression list). Any invalid email addresses specified will be ignored.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscribers from.</param>
        /// <param name="body"></param>
        /// <returns>RemovingMultipleSubscribersResponse</returns>
        public RemovingMultipleSubscribersResponse RemovingMultipleSubscribers (string format, string apikey, string mailingListID, RemovingMultipleSubscribersRequest body)
        {
             ApiResponse<RemovingMultipleSubscribersResponse> localVarResponse = RemovingMultipleSubscribersWithHttpInfo(format, apikey, mailingListID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removing multiple subscribers Removes a list of subscribers from the specified mailing list permanently (without putting them in the suppression list). Any invalid email addresses specified will be ignored.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscribers from.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of RemovingMultipleSubscribersResponse</returns>
        public ApiResponse< RemovingMultipleSubscribersResponse > RemovingMultipleSubscribersWithHttpInfo (string format, string apikey, string mailingListID, RemovingMultipleSubscribersRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->RemovingMultipleSubscribers");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->RemovingMultipleSubscribers");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->RemovingMultipleSubscribers");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->RemovingMultipleSubscribers");

            var localVarPath = "/subscribers/{MailingListID}/remove_many.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovingMultipleSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemovingMultipleSubscribersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemovingMultipleSubscribersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemovingMultipleSubscribersResponse)));
        }

        /// <summary>
        /// Removing multiple subscribers Removes a list of subscribers from the specified mailing list permanently (without putting them in the suppression list). Any invalid email addresses specified will be ignored.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscribers from.</param>
        /// <param name="body"></param>
        /// <returns>Task of RemovingMultipleSubscribersResponse</returns>
        public async System.Threading.Tasks.Task<RemovingMultipleSubscribersResponse> RemovingMultipleSubscribersAsync (string format, string apikey, string mailingListID, RemovingMultipleSubscribersRequest body)
        {
             ApiResponse<RemovingMultipleSubscribersResponse> localVarResponse = await RemovingMultipleSubscribersAsyncWithHttpInfo(format, apikey, mailingListID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removing multiple subscribers Removes a list of subscribers from the specified mailing list permanently (without putting them in the suppression list). Any invalid email addresses specified will be ignored.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscribers from.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (RemovingMultipleSubscribersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RemovingMultipleSubscribersResponse>> RemovingMultipleSubscribersAsyncWithHttpInfo (string format, string apikey, string mailingListID, RemovingMultipleSubscribersRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->RemovingMultipleSubscribers");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->RemovingMultipleSubscribers");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->RemovingMultipleSubscribers");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->RemovingMultipleSubscribers");

            var localVarPath = "/subscribers/{MailingListID}/remove_many.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemovingMultipleSubscribers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RemovingMultipleSubscribersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RemovingMultipleSubscribersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RemovingMultipleSubscribersResponse)));
        }

        /// <summary>
        /// Unsubscribing subscribers from account Unsubscribes a subscriber from the account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>UnsubscribingSubscribersFromAccountResponse</returns>
        public UnsubscribingSubscribersFromAccountResponse UnsubscribingSubscribersFromAccount (string format, string apikey, UnsubscribingSubscribersFromAccountRequest body)
        {
             ApiResponse<UnsubscribingSubscribersFromAccountResponse> localVarResponse = UnsubscribingSubscribersFromAccountWithHttpInfo(format, apikey, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribing subscribers from account Unsubscribes a subscriber from the account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UnsubscribingSubscribersFromAccountResponse</returns>
        public ApiResponse< UnsubscribingSubscribersFromAccountResponse > UnsubscribingSubscribersFromAccountWithHttpInfo (string format, string apikey, UnsubscribingSubscribersFromAccountRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->UnsubscribingSubscribersFromAccount");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->UnsubscribingSubscribersFromAccount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->UnsubscribingSubscribersFromAccount");

            var localVarPath = "/subscribers/unsubscribe.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribingSubscribersFromAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnsubscribingSubscribersFromAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnsubscribingSubscribersFromAccountResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnsubscribingSubscribersFromAccountResponse)));
        }

        /// <summary>
        /// Unsubscribing subscribers from account Unsubscribes a subscriber from the account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of UnsubscribingSubscribersFromAccountResponse</returns>
        public async System.Threading.Tasks.Task<UnsubscribingSubscribersFromAccountResponse> UnsubscribingSubscribersFromAccountAsync (string format, string apikey, UnsubscribingSubscribersFromAccountRequest body)
        {
             ApiResponse<UnsubscribingSubscribersFromAccountResponse> localVarResponse = await UnsubscribingSubscribersFromAccountAsyncWithHttpInfo(format, apikey, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsubscribing subscribers from account Unsubscribes a subscriber from the account.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UnsubscribingSubscribersFromAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnsubscribingSubscribersFromAccountResponse>> UnsubscribingSubscribersFromAccountAsyncWithHttpInfo (string format, string apikey, UnsubscribingSubscribersFromAccountRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->UnsubscribingSubscribersFromAccount");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->UnsubscribingSubscribersFromAccount");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->UnsubscribingSubscribersFromAccount");

            var localVarPath = "/subscribers/unsubscribe.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribingSubscribersFromAccount", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnsubscribingSubscribersFromAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnsubscribingSubscribersFromAccountResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnsubscribingSubscribersFromAccountResponse)));
        }

        /// <summary>
        /// Unsubscribing subscribers from mailing list Unsubscribes a subscriber from the specified mailing list. The subscriber is not deleted, but moved to the suppression list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>UnsubscribingSubscribersFromMailingListResponse</returns>
        public UnsubscribingSubscribersFromMailingListResponse UnsubscribingSubscribersFromMailingList (string format, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListRequest body)
        {
             ApiResponse<UnsubscribingSubscribersFromMailingListResponse> localVarResponse = UnsubscribingSubscribersFromMailingListWithHttpInfo(format, apikey, mailingListID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribing subscribers from mailing list Unsubscribes a subscriber from the specified mailing list. The subscriber is not deleted, but moved to the suppression list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UnsubscribingSubscribersFromMailingListResponse</returns>
        public ApiResponse< UnsubscribingSubscribersFromMailingListResponse > UnsubscribingSubscribersFromMailingListWithHttpInfo (string format, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->UnsubscribingSubscribersFromMailingList");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->UnsubscribingSubscribersFromMailingList");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->UnsubscribingSubscribersFromMailingList");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->UnsubscribingSubscribersFromMailingList");

            var localVarPath = "/subscribers/{MailingListID}/unsubscribe.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribingSubscribersFromMailingList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnsubscribingSubscribersFromMailingListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnsubscribingSubscribersFromMailingListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnsubscribingSubscribersFromMailingListResponse)));
        }

        /// <summary>
        /// Unsubscribing subscribers from mailing list Unsubscribes a subscriber from the specified mailing list. The subscriber is not deleted, but moved to the suppression list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>Task of UnsubscribingSubscribersFromMailingListResponse</returns>
        public async System.Threading.Tasks.Task<UnsubscribingSubscribersFromMailingListResponse> UnsubscribingSubscribersFromMailingListAsync (string format, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListRequest body)
        {
             ApiResponse<UnsubscribingSubscribersFromMailingListResponse> localVarResponse = await UnsubscribingSubscribersFromMailingListAsyncWithHttpInfo(format, apikey, mailingListID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsubscribing subscribers from mailing list Unsubscribes a subscriber from the specified mailing list. The subscriber is not deleted, but moved to the suppression list.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to add subscribers to.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UnsubscribingSubscribersFromMailingListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnsubscribingSubscribersFromMailingListResponse>> UnsubscribingSubscribersFromMailingListAsyncWithHttpInfo (string format, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->UnsubscribingSubscribersFromMailingList");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->UnsubscribingSubscribersFromMailingList");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->UnsubscribingSubscribersFromMailingList");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->UnsubscribingSubscribersFromMailingList");

            var localVarPath = "/subscribers/{MailingListID}/unsubscribe.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribingSubscribersFromMailingList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnsubscribingSubscribersFromMailingListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnsubscribingSubscribersFromMailingListResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnsubscribingSubscribersFromMailingListResponse)));
        }

        /// <summary>
        /// Unsubscribing subscribers from mailing list and a specified campaign Unsubscribes a subscriber from the specified mailing list and the specified campaign. The subscriber is not deleted, but moved to the suppression list.  This call will take into account the setting you have in \&quot;suppression list and unsubscribe settings\&quot; and will remove the subscriber from all other mailing lists or not accordingly.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID">The ID of the campaign that was sent to the specific mailing list.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse</returns>
        public UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign (string format, string campaignID, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest body)
        {
             ApiResponse<UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse> localVarResponse = UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignWithHttpInfo(format, campaignID, apikey, mailingListID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unsubscribing subscribers from mailing list and a specified campaign Unsubscribes a subscriber from the specified mailing list and the specified campaign. The subscriber is not deleted, but moved to the suppression list.  This call will take into account the setting you have in \&quot;suppression list and unsubscribe settings\&quot; and will remove the subscriber from all other mailing lists or not accordingly.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID">The ID of the campaign that was sent to the specific mailing list.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse</returns>
        public ApiResponse< UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse > UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignWithHttpInfo (string format, string campaignID, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling SubscribersApi->UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign");

            var localVarPath = "/subscribers/{MailingListID}/{CampaignID}/unsubscribe.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse)));
        }

        /// <summary>
        /// Unsubscribing subscribers from mailing list and a specified campaign Unsubscribes a subscriber from the specified mailing list and the specified campaign. The subscriber is not deleted, but moved to the suppression list.  This call will take into account the setting you have in \&quot;suppression list and unsubscribe settings\&quot; and will remove the subscriber from all other mailing lists or not accordingly.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID">The ID of the campaign that was sent to the specific mailing list.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>Task of UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse</returns>
        public async System.Threading.Tasks.Task<UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse> UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignAsync (string format, string campaignID, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest body)
        {
             ApiResponse<UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse> localVarResponse = await UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignAsyncWithHttpInfo(format, campaignID, apikey, mailingListID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unsubscribing subscribers from mailing list and a specified campaign Unsubscribes a subscriber from the specified mailing list and the specified campaign. The subscriber is not deleted, but moved to the suppression list.  This call will take into account the setting you have in \&quot;suppression list and unsubscribe settings\&quot; and will remove the subscriber from all other mailing lists or not accordingly.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="campaignID">The ID of the campaign that was sent to the specific mailing list.</param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list to remove the subscriber from.</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse>> UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignAsyncWithHttpInfo (string format, string campaignID, string apikey, string mailingListID, UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign");
            // verify the required parameter 'campaignID' is set
            if (campaignID == null)
                throw new ApiException(400, "Missing required parameter 'campaignID' when calling SubscribersApi->UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign");

            var localVarPath = "/subscribers/{MailingListID}/{CampaignID}/unsubscribe.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (campaignID != null) localVarPathParams.Add("CampaignID", Configuration.ApiClient.ParameterToString(campaignID)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UnsubscribingSubscribersFromMailingListAndASpecifiedCampaign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UnsubscribingSubscribersFromMailingListAndASpecifiedCampaignResponse)));
        }

        /// <summary>
        /// Updating a subscriber Updates a subscriber in the specified mailing list. You can even update the subscribers email, if he has not unsubscribed.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list that contains the subscriber</param>
        /// <param name="subscriberID">The id of the subscriber to be updated</param>
        /// <param name="body"></param>
        /// <returns>UpdatingASubscriberResponse</returns>
        public UpdatingASubscriberResponse UpdatingASubscriber (string format, string apikey, string mailingListID, string subscriberID, UpdatingASubscriberRequest body)
        {
             ApiResponse<UpdatingASubscriberResponse> localVarResponse = UpdatingASubscriberWithHttpInfo(format, apikey, mailingListID, subscriberID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updating a subscriber Updates a subscriber in the specified mailing list. You can even update the subscribers email, if he has not unsubscribed.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list that contains the subscriber</param>
        /// <param name="subscriberID">The id of the subscriber to be updated</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UpdatingASubscriberResponse</returns>
        public ApiResponse< UpdatingASubscriberResponse > UpdatingASubscriberWithHttpInfo (string format, string apikey, string mailingListID, string subscriberID, UpdatingASubscriberRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->UpdatingASubscriber");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->UpdatingASubscriber");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->UpdatingASubscriber");
            // verify the required parameter 'subscriberID' is set
            if (subscriberID == null)
                throw new ApiException(400, "Missing required parameter 'subscriberID' when calling SubscribersApi->UpdatingASubscriber");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->UpdatingASubscriber");

            var localVarPath = "/subscribers/{MailingListID}/update/{SubscriberID}.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (subscriberID != null) localVarPathParams.Add("SubscriberID", Configuration.ApiClient.ParameterToString(subscriberID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatingASubscriber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatingASubscriberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatingASubscriberResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatingASubscriberResponse)));
        }

        /// <summary>
        /// Updating a subscriber Updates a subscriber in the specified mailing list. You can even update the subscribers email, if he has not unsubscribed.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list that contains the subscriber</param>
        /// <param name="subscriberID">The id of the subscriber to be updated</param>
        /// <param name="body"></param>
        /// <returns>Task of UpdatingASubscriberResponse</returns>
        public async System.Threading.Tasks.Task<UpdatingASubscriberResponse> UpdatingASubscriberAsync (string format, string apikey, string mailingListID, string subscriberID, UpdatingASubscriberRequest body)
        {
             ApiResponse<UpdatingASubscriberResponse> localVarResponse = await UpdatingASubscriberAsyncWithHttpInfo(format, apikey, mailingListID, subscriberID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updating a subscriber Updates a subscriber in the specified mailing list. You can even update the subscribers email, if he has not unsubscribed.
        /// </summary>
        /// <exception cref="Moosend.Wrappers.CSharpWrapper.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="format"></param>
        /// <param name="apikey">You may find your API Key or generate a new one in your account settings.</param>
        /// <param name="mailingListID">The ID of the mailing list that contains the subscriber</param>
        /// <param name="subscriberID">The id of the subscriber to be updated</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UpdatingASubscriberResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UpdatingASubscriberResponse>> UpdatingASubscriberAsyncWithHttpInfo (string format, string apikey, string mailingListID, string subscriberID, UpdatingASubscriberRequest body)
        {
            // verify the required parameter 'format' is set
            if (format == null)
                throw new ApiException(400, "Missing required parameter 'format' when calling SubscribersApi->UpdatingASubscriber");
            // verify the required parameter 'apikey' is set
            if (apikey == null)
                throw new ApiException(400, "Missing required parameter 'apikey' when calling SubscribersApi->UpdatingASubscriber");
            // verify the required parameter 'mailingListID' is set
            if (mailingListID == null)
                throw new ApiException(400, "Missing required parameter 'mailingListID' when calling SubscribersApi->UpdatingASubscriber");
            // verify the required parameter 'subscriberID' is set
            if (subscriberID == null)
                throw new ApiException(400, "Missing required parameter 'subscriberID' when calling SubscribersApi->UpdatingASubscriber");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SubscribersApi->UpdatingASubscriber");

            var localVarPath = "/subscribers/{MailingListID}/update/{SubscriberID}.{Format}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (format != null) localVarPathParams.Add("Format", Configuration.ApiClient.ParameterToString(format)); // path parameter
            if (mailingListID != null) localVarPathParams.Add("MailingListID", Configuration.ApiClient.ParameterToString(mailingListID)); // path parameter
            if (subscriberID != null) localVarPathParams.Add("SubscriberID", Configuration.ApiClient.ParameterToString(subscriberID)); // path parameter
            if (apikey != null) localVarQueryParams.Add("apikey", Configuration.ApiClient.ParameterToString(apikey)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatingASubscriber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<UpdatingASubscriberResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (UpdatingASubscriberResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(UpdatingASubscriberResponse)));
        }

    }
}
